{
	"info": {
		"_postman_id": "603aa75c-21ff-4ba9-bb7d-8984529e59e8",
		"name": "NudgingPlatform",
		"description": "1).to Execute Collection \"Rule_By_providing_EntityId_and_Ruleid\" you need to provide those value before collection    Run.\n2). to execute \"Entity\" collection need to maintain substatetype and updateSubstateType variables.\n3). In \"PWT_RULES_By_Create_Entity\"collection ; values of NotificationTemplateId need to be hardcoded as per requirment.and the Script is mainly designed for 8 nudges.\nIf user Want to Run script For 4 nudges he need to do changes in Create rule [POST method of Pre- NAT/ARF/Exam] and have to remove required  \"PWT_5-8nudges\" folder from \"PWT_RULES_By_Create_Entity\" collection.\n",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "PWT_RULES_by_createEntity",
			"item": [
				{
					"name": "PWT_Pre_NAT ",
					"item": [
						{
							"name": "NAT_1-4Nudges",
							"item": [
								{
									"name": "[PWT_RULES]Create Test Template############",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a8599241-b4fc-43b5-b634-57dacf2369fa",
												"exec": [
													"pm.test(\"extract NudgeTemplateId\", function () {",
													"    var jsonData = pm.response.json();",
													"    ",
													"pm.environment.set(\"notificationMessageTemplateId1\", jsonData.notificationMessageTemplateId);",
													"});",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "b535f90c-b810-4818-b81f-b747180c3430",
												"exec": [
													"var random = _.random(100, 1000);",
													"",
													"",
													"var codeSeed = \"Temp-\";",
													"pm.environment.set(\"TemplateName\", codeSeed.concat(random));",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n            \"name\": \"{{TemplateName}}\",\n            \"entitySourceSystemId\": {{entitySourceSystemId}},\n            \"isActive\": true,\n            \"notificationMessageTemplateLineItems\": [\n                {\n                    \"elementName\": \"English_Default\",\n                    \"templateContent\": \"Hi {1},This Is test Template ,(ENGLISH-DEFAULT) please click on this 'Google' bitly link! {2}\",\n                    \"languageTypeId\": 1,\n                    \"entitySegmentTypeId\": 1,\n                     \"isDefault\":true,\n                    \"notificationMessageTemplateConfigurationMappings\": [\n                        {\n                            \"placeholderKey\": 1,\n                            \"notificationMessageTemplatePlaceHolderTypeId\": 1,\n                            \"value\": \"string\"\n                        },\n                        {\n                            \"placeholderKey\": 2,\n                            \"notificationMessageTemplatePlaceHolderTypeId\": 4,\n                            \"value\": \"https://www.google.com/\"\n                        }\n                    ]\n                }\n            ]\n    \n}"
										},
										"url": {
											"raw": "{{url}}/api/NotificationMessageTemplate",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"NotificationMessageTemplate"
											]
										}
									},
									"response": []
								},
								{
									"name": "[101] [PWT PRE-NAT]craete Rule*********",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9b7b9e2e-8674-4d11-b9c2-de3b5c25dc3f",
												"exec": [
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(201);",
													"     var jsonData = pm.response.json();",
													"     pm.environment.set(\"ruleId\", jsonData.ruleId);",
													"     ",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "e9f50de3-c2ed-4ae5-88af-5fa1255fd65b",
												"exec": [
													"pm.environment.set(\"entitySourceSystemId\",1);",
													"pm.environment.set(\"entityStateType\",1);",
													"pm.environment.set(\"entitySubStateType\",1);",
													"",
													"console.log(\"STARTED: ***********PWT_RULES_by_createEntity/PRE-NAT********************************\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"rule\": {\r\n    \"id\": 0,\r\n    \"name\": \" PWT Stage \",\r\n    \"description\": \"Prospect_Warming_tool pre NAT \",\r\n    \"ruleType\": 2,\r\n    \"frequencyType\": 1,\r\n    \"entitySourceSystemId\": {{entitySourceSystemId}},\r\n    \"entityStateType\": {{entityStateType}},\r\n    \"entitySubStateType\": {{entitySubStateType}},\r\n     \"ruleFrequencies\": [\r\n      {\r\n        \"id\": 0,\r\n        \"hour\": 0,\r\n        \"minute\": 15\r\n      }\r\n    ],\r\n    \"ruleLineItems\": [\r\n       {\r\n        \"id\": 0,\r\n        \"ruleLineItemType\": 1,\r\n        \"name\": \"PreNAT_ 1st nudge\",\r\n        \"parentId\": \"0\",\r\n        \"sequence\": 1,\r\n        \"sendToPrimary\": true,\r\n        \"intendedPositiveOutput\": \"1st Nudge\",\r\n        \"ruleLineItemConditions\": [\r\n          {\r\n            \"value\": \"2\",\r\n            \"logicalOperatorType\": 1,\r\n            \"sequence\": 1,\r\n            \"ruleCategoryId\": 10,\r\n            \"mathOperatorOnValue\": 1\r\n          }\r\n        ],\r\n        \"ruleLineItemResults\": [\r\n          {\r\n            \"notificationChannelType\": 1,\r\n            \"notificationMessageTemplateId\": {{notificationMessageTemplateId1}},\r\n            \"isSMSAsFallBack\": false\r\n          }\r\n        ]\r\n      },\r\n\t   {\r\n        \"id\": 0,\r\n        \"ruleLineItemType\": 1,\r\n        \"name\": \"PreNAT_ 2nd nudge\",\r\n        \"parentId\": \"0\",\r\n        \"sequence\": 2,\r\n        \"sendToPrimary\": true,\r\n        \"intendedPositiveOutput\": \"2nd Nudge\",\r\n        \"ruleLineItemConditions\": [\r\n          {\r\n            \"value\": \"2\",\r\n            \"logicalOperatorType\": 1,\r\n            \"sequence\": 1,\r\n            \"ruleCategoryId\": 11,\r\n            \"mathOperatorOnValue\": 1\r\n          }\r\n        ],\r\n        \"ruleLineItemResults\": [\r\n          {\r\n            \"notificationChannelType\": 1,\r\n            \"notificationMessageTemplateId\": {{notificationMessageTemplateId1}},\r\n            \"isSMSAsFallBack\": false\r\n          }\r\n        ]\r\n      },\r\n\t   {\r\n        \"id\": 0,\r\n        \"ruleLineItemType\": 1,\r\n        \"name\": \"PreNAT_ 3rd nudge\",\r\n        \"parentId\": \"0\",\r\n        \"sequence\": 3,\r\n        \"sendToPrimary\": true,\r\n        \"intendedPositiveOutput\": \"3rd Nudge\",\r\n        \"ruleLineItemConditions\": [\r\n          {\r\n            \"value\": \"2\",\r\n            \"logicalOperatorType\": 1,\r\n            \"sequence\": 1,\r\n            \"ruleCategoryId\": 11,\r\n            \"mathOperatorOnValue\": 1\r\n          }\r\n        ],\r\n        \"ruleLineItemResults\": [\r\n          {\r\n            \"notificationChannelType\": 1,\r\n            \"notificationMessageTemplateId\": {{notificationMessageTemplateId1}},\r\n            \"isSMSAsFallBack\": false\r\n          }\r\n        ]\r\n      },\r\n\t   {\r\n        \"id\": 0,\r\n        \"ruleLineItemType\": 1,\r\n        \"name\": \"PreNAT_ 4th nudge\",\r\n        \"parentId\": \"0\",\r\n        \"sequence\": 4,\r\n        \"sendToPrimary\": true,\r\n        \"intendedPositiveOutput\": \"4th Nudge\",\r\n        \"ruleLineItemConditions\": [\r\n          {\r\n            \"value\": \"2\",\r\n            \"logicalOperatorType\": 1,\r\n            \"sequence\": 1,\r\n            \"ruleCategoryId\": 11,\r\n            \"mathOperatorOnValue\": 1\r\n          }\r\n        ],\r\n        \"ruleLineItemResults\": [\r\n          {\r\n            \"notificationChannelType\": 1,\r\n            \"notificationMessageTemplateId\": {{notificationMessageTemplateId1}},\r\n            \"isSMSAsFallBack\": false\r\n          }\r\n        ]\r\n      },\r\n\t   {\r\n        \"id\": 0,\r\n        \"ruleLineItemType\": 1,\r\n        \"name\": \"PreNAT_ 5th nudge\",\r\n        \"parentId\": \"0\",\r\n        \"sequence\": 5,\r\n        \"sendToPrimary\": true,\r\n        \"intendedPositiveOutput\": \"5th Nudge\",\r\n        \"ruleLineItemConditions\": [\r\n          {\r\n            \"value\": \"2\",\r\n            \"logicalOperatorType\": 1,\r\n            \"sequence\": 1,\r\n            \"ruleCategoryId\": 11,\r\n            \"mathOperatorOnValue\": 1\r\n          }\r\n        ],\r\n        \"ruleLineItemResults\": [\r\n          {\r\n            \"notificationChannelType\": 1,\r\n            \"notificationMessageTemplateId\": {{notificationMessageTemplateId1}},\r\n            \"isSMSAsFallBack\": false\r\n          }\r\n        ]\r\n      },\r\n\t   {\r\n        \"id\": 0,\r\n        \"ruleLineItemType\": 1,\r\n        \"name\": \"PreNAT_ 6th nudge\",\r\n        \"parentId\": \"0\",\r\n        \"sequence\": 6,\r\n        \"sendToPrimary\": true,\r\n        \"intendedPositiveOutput\": \"6th Nudge\",\r\n        \"ruleLineItemConditions\": [\r\n          {\r\n            \"value\": \"2\",\r\n            \"logicalOperatorType\": 1,\r\n            \"sequence\": 1,\r\n            \"ruleCategoryId\": 11,\r\n            \"mathOperatorOnValue\": 1\r\n          }\r\n        ],\r\n        \"ruleLineItemResults\": [\r\n          {\r\n            \"notificationChannelType\": 1,\r\n            \"notificationMessageTemplateId\": {{notificationMessageTemplateId1}},\r\n            \"isSMSAsFallBack\": false\r\n          }\r\n        ]\r\n      },\r\n\t   {\r\n        \"id\": 0,\r\n        \"ruleLineItemType\": 1,\r\n        \"name\": \"PreNAT_ 7th nudge\",\r\n        \"parentId\": \"0\",\r\n        \"sequence\": 7,\r\n        \"sendToPrimary\": true,\r\n        \"intendedPositiveOutput\": \"7th Nudge\",\r\n        \"ruleLineItemConditions\": [\r\n          {\r\n            \"value\": \"2\",\r\n            \"logicalOperatorType\": 1,\r\n            \"sequence\": 1,\r\n            \"ruleCategoryId\": 11,\r\n            \"mathOperatorOnValue\": 1\r\n          }\r\n        ],\r\n        \"ruleLineItemResults\": [\r\n          {\r\n            \"notificationChannelType\": 1,\r\n            \"notificationMessageTemplateId\": {{notificationMessageTemplateId1}},\r\n            \"isSMSAsFallBack\": false\r\n          }\r\n        ]\r\n      },\r\n\t   {\r\n        \"id\": 0,\r\n        \"ruleLineItemType\": 1,\r\n        \"name\": \"PreNAT_ 8th nudge\",\r\n        \"parentId\": \"0\",\r\n        \"sequence\": 8,\r\n        \"sendToPrimary\": true,\r\n        \"intendedPositiveOutput\": \"8th Nudge\",\r\n        \"ruleLineItemConditions\": [\r\n          {\r\n            \"value\": \"2\",\r\n            \"logicalOperatorType\": 1,\r\n            \"sequence\": 1,\r\n            \"ruleCategoryId\": 11,\r\n            \"mathOperatorOnValue\": 1\r\n          }\r\n        ],\r\n        \"ruleLineItemResults\": [\r\n          {\r\n            \"notificationChannelType\": 1,\r\n            \"notificationMessageTemplateId\": {{notificationMessageTemplateId1}},\r\n            \"isSMSAsFallBack\": false\r\n          }\r\n        ]\r\n      },\r\n\t   {\r\n        \"id\": 0,\r\n        \"ruleLineItemType\": 3,\r\n        \"name\": \"PreNAT_ end line\",\r\n        \"parentId\": \"0\",\r\n        \"sequence\": 9,\r\n        \"sendToPrimary\": true,\r\n        \"intendedPositiveOutput\": \"End line item\",\r\n        \"ruleLineItemConditions\": [\r\n          {\r\n            \"value\": \"2\",\r\n            \"logicalOperatorType\": 1,\r\n            \"sequence\": 1,\r\n            \"ruleCategoryId\": 11,\r\n            \"mathOperatorOnValue\": 1\r\n          }\r\n        ],\r\n        \"ruleLineItemResults\": [\r\n          {\r\n            \"notificationChannelType\": 1,\r\n            \"notificationMessageTemplateId\": {{notificationMessageTemplateId1}},\r\n            \"isSMSAsFallBack\": false\r\n          }\r\n        ]\r\n      }\r\n    ]\r\n  }\r\n}"
										},
										"url": {
											"raw": "{{url}}/api/Rule",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"Rule"
											]
										}
									},
									"response": []
								},
								{
									"name": "[102]read Rule By Rule ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b21dfda3-5d01-4762-bed6-681e39e637c4",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Your test name\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.rule.ruleLineItems[0].id).to.exist;",
													"    pm.environment.set(\"ruleLineItemId\",jsonData.rule.ruleLineItems[0].id);",
													"    var size = jsonData.rule.ruleLineItems.length;",
													"    pm.environment.set(\"totalrulelineitems\",size-1);",
													"",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/api/Rule?ruleId={{ruleId}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"Rule"
											],
											"query": [
												{
													"key": "ruleId",
													"value": "{{ruleId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[103]create entity",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b45ca225-09f2-4fd4-a05e-4c3d13a6dbf0",
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"   ",
													"    let EntityJSON = pm.response.json();",
													"    pm.expect(EntityJSON.entityId).to.exist;",
													"    pm.expect(EntityJSON.isSaved).to.equal(true);",
													"     pm.environment.set(\"entityId\", EntityJSON.entityId);",
													"    console.log(EntityJSON);",
													"});",
													"",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "0e9b9ca9-9c49-46e8-ac8c-768fb21ce4b8",
												"exec": [
													"var milliseconds = new Date().getTime();",
													"var codeSeed = \"Auto-\";",
													"pm.environment.set(\"entityCode\", codeSeed.concat(milliseconds));",
													"",
													"",
													"var codeSeed = \"Auto2nd-\";",
													"pm.environment.set(\"secondaryEntityCode\", codeSeed.concat(milliseconds));",
													"",
													"var moment = require('moment');",
													"pm.environment.set(\"timestamp\", moment().format(\"YYYY-MM-DDThh:mm:ss.SSS\"))   ;",
													"console.log(pm.variables.get(\"timestamp\"));",
													"",
													"",
													"var moment = require('moment');",
													"pm.environment.set(\"pickUpTime\", moment().subtract(2, 'days').format(\"YYYY-MM-DDThh:mm:ss.SSS\")) ;",
													"console.log(pm.variables.get(\"pickUpTime\"));",
													"",
													"let ran =  _.random(1111111111, 9999999999);",
													" pm.environment.set(\"mobileNumberNAT\",ran);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"id\": 0,\r\n  \"entityCode\": \"{{entityCode}}\",\r\n  \"name\": \"PreNAT-{{name}}\",\r\n  \"mobileNumber\": {{mobileNumberNAT}},\r\n  \"entityCreationDate\": \"{{timestamp}}\",\r\n  \"entitySourceSystemId\": {{entitySourceSystemId}},\r\n  \"entityStateDate\": \"{{pickUpTime}}\",\r\n  \"entityStateType\": {{entityStateType}},\r\n  \"entitySubStateType\":{{entitySubStateType}},\r\n  \"entityStateValue\": \" {{entityStateValue}} \",\r\n  \"secondaryEntityCode\": \"{{secondaryEntityCode}}\",\r\n  \"secondaryName\": \"{{secondaryName}}\",\r\n  \"secondaryMobileNumber\": {{secondaryMobileNumber}},\r\n  \"customField1\":\"location-pune\",\r\n  \"customField2\":\"state-MH\",\r\n  \"customFieldUrl\":\"https://www.w3schools.com/xml/xpath_nodes.asp\",\r\n  \"entitySegmentTypeId\": {{entitySegmentTypeId}},\r\n  \"languageTypeId\": {{languageTypeId}}\r\n}\r\n"
										},
										"url": {
											"raw": "{{url}}/api/Entity",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"Entity"
											]
										}
									},
									"response": []
								},
								{
									"name": "[104]read entity by entityId",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "24ac8dfd-18cf-476f-8c08-1bd93aad7e83",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"verify mobile number\", function () {",
													"    var jsonData = pm.response.json();",
													"   let Z=JSON.parse(jsonData.mobileNumber);",
													"    pm.expect(Z).to.eql(pm.variables.get(\"mobileNumberNAT\"));",
													"pm.variables.get(\"variable_key\");",
													"    pm.environment.set(\"mobileNumber\",jsonData.mobileNumber);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/api/Entity?entityId={{entityId}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"Entity"
											],
											"query": [
												{
													"key": "entityId",
													"value": "{{entityId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[105]Trigger RuleExecuteEvent",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "24ac8dfd-18cf-476f-8c08-1bd93aad7e83",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Is Rule Executed\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.eql(true);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/api/RuleExecution?ruleId={{ruleId}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"RuleExecution"
											],
											"query": [
												{
													"key": "ruleId",
													"value": "{{ruleId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[106]TriggerExecuteNotificationMessage",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "24ac8dfd-18cf-476f-8c08-1bd93aad7e83",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Your test name\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.isExecuted).to.eql(true);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/api/JobExecution?jobId=15",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"JobExecution"
											],
											"query": [
												{
													"key": "jobId",
													"value": "15"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[107]SearchMessageSentViaRule",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "24ac8dfd-18cf-476f-8c08-1bd93aad7e83",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"to check notifications exist\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.notifications).to.exist;",
													"    var size1 = jsonData.notifications.length;",
													"  ",
													"    ",
													"    var array=JSON.parse(pm.environment.get(\"ruleLineItemId\"));",
													"    ",
													"     pm.expect((jsonData.notifications[0].ruleLineItemId)).to.eql(array);",
													"",
													"    pm.environment.set(\"TotalNudgesenttoentity\",size1);",
													"  ",
													"    console.log( \"[PRE-NAT]first nudge of entity is associated with  rulelineitemId : \"+pm.variables.get(\"ruleLineItemId\") );",
													"",
													"    ",
													"",
													"",
													"});",
													"pm.test(\"Nudge delivery Verification\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.notifications[0].messageContent).to.eql(\"\");",
													"    pm.expect(jsonData.notifications[0].mobileNumber).to.eql(\"\");",
													"    ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/api/NotificationMessageProcessor/SearchMessageSentViaRule?entityId={{entityId}}&ruleId={{ruleId}}&ruleLineItemId={{ruleLineItemId}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"NotificationMessageProcessor",
												"SearchMessageSentViaRule"
											],
											"query": [
												{
													"key": "entityId",
													"value": "{{entityId}}"
												},
												{
													"key": "ruleId",
													"value": "{{ruleId}}"
												},
												{
													"key": "ruleLineItemId",
													"value": "{{ruleLineItemId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[108]Trigger NudgeInteractionAnalytics",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "24ac8dfd-18cf-476f-8c08-1bd93aad7e83",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Your test name\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.isExecuted).to.eql(true);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/api/JobExecution?jobId=17",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"JobExecution"
											],
											"query": [
												{
													"key": "jobId",
													"value": "17"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[109]read data like URL is clicked",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0822a3c8-02fb-46f7-a903-c7a96a6fe942",
												"exec": [
													"pm.test(\"Status code 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Bitly is not cllicked \", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.nudgeInteractionDetails[0].entityId).to.eql(pm.variables.get(\"entityId\"));",
													"    pm.expect(jsonData.nudgeInteractionDetails[0].isLinkClicked).to.eql(false);",
													"    pm.expect(jsonData.nudgeInteractionDetails[0].canBeMarkedAs).to.eql(\"No response\");",
													"",
													"",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/api/Entity/ReadNudgeInteraction?entitySourceSystemId={{entitySourceSystemId}}&entityCode={{entityCode}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"Entity",
												"ReadNudgeInteraction"
											],
											"query": [
												{
													"key": "entitySourceSystemId",
													"value": "{{entitySourceSystemId}}"
												},
												{
													"key": "entityCode",
													"value": "{{entityCode}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[110]  1st change last nudge sent date",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "a66f8df1-605f-4640-aa35-cd0d72b96dff",
												"exec": [
													"var moment = require('moment');",
													"pm.environment.set(\"pickUpTime\", moment().subtract(2, 'days').format(\"YYYY-MM-DDThh:mm:ss.SSS\")) ;",
													"console.log(pm.variables.get(\"pickUpTime\"));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "23d9c19d-f037-4abd-9ce9-a7494827aacd",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Your test name\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.id).to.exist;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"entityId\": {{entityId}},\r\n  \"ruleId\": {{ruleId}},\r\n  \"ruleLineItemId\": {{ruleLineItemId}},\r\n  \"createdDate\": \"{{pickUpTime}}\"\r\n}"
										},
										"url": {
											"raw": "{{url}}/api/Rule/UpdateEntityRuleMapping",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"Rule",
												"UpdateEntityRuleMapping"
											]
										}
									},
									"response": []
								},
								{
									"name": "[111]read Rule By Rule ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b21dfda3-5d01-4762-bed6-681e39e637c4",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Your test name\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.rule.ruleLineItems[0].id).to.exist;",
													"    pm.environment.set(\"ruleLineItemId\",jsonData.rule.ruleLineItems[1].id);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/api/Rule?ruleId={{ruleId}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"Rule"
											],
											"query": [
												{
													"key": "ruleId",
													"value": "{{ruleId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[112]Trigger RuleExecuteEvent",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "24ac8dfd-18cf-476f-8c08-1bd93aad7e83",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Is Rule Executed\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.eql(true);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/api/RuleExecution?ruleId={{ruleId}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"RuleExecution"
											],
											"query": [
												{
													"key": "ruleId",
													"value": "{{ruleId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[113]TriggerExecuteNotificationMessage",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "24ac8dfd-18cf-476f-8c08-1bd93aad7e83",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Your test name\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.isExecuted).to.eql(true);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/api/JobExecution?jobId=15",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"JobExecution"
											],
											"query": [
												{
													"key": "jobId",
													"value": "15"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[114]SearchMessageSentViaRule",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "24ac8dfd-18cf-476f-8c08-1bd93aad7e83",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"to check notifications exist\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.notifications).to.exist;",
													"    var size1 = jsonData.notifications.length;",
													"    ",
													"    ",
													"    var array=JSON.parse(pm.environment.get(\"ruleLineItemId\"));",
													"    ",
													"     pm.expect((jsonData.notifications[0].ruleLineItemId)).to.eql(array);",
													"",
													"    pm.environment.set(\"TotalNudgesenttoentity\",size1);",
													"  ",
													"   ",
													"     console.log( \"[PRE-NAT] Second nudge of entity is associated with  rulelineitemId : \"+pm.variables.get(\"ruleLineItemId\") );",
													"",
													"",
													"",
													"});",
													"pm.test(\"Nudge delivery Verification\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.notifications[0].messageContent).to.eql(\"\");",
													"    pm.expect(jsonData.notifications[0].mobileNumber).to.eql(\"\");",
													"    ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/api/NotificationMessageProcessor/SearchMessageSentViaRule?entityId={{entityId}}&ruleId={{ruleId}}&ruleLineItemId={{ruleLineItemId}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"NotificationMessageProcessor",
												"SearchMessageSentViaRule"
											],
											"query": [
												{
													"key": "entityId",
													"value": "{{entityId}}"
												},
												{
													"key": "ruleId",
													"value": "{{ruleId}}"
												},
												{
													"key": "ruleLineItemId",
													"value": "{{ruleLineItemId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[115]2nd change last nudge sent date",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "a66f8df1-605f-4640-aa35-cd0d72b96dff",
												"exec": [
													"var moment = require('moment');",
													"pm.environment.set(\"pickUpTime\", moment().subtract(2, 'days').format(\"YYYY-MM-DDThh:mm:ss.SSS\")) ;",
													"console.log(pm.variables.get(\"pickUpTime\"));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "357de4ea-0342-4ae4-b704-9433175072c0",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Your test name\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.id).to.exist;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"entityId\": {{entityId}},\r\n  \"ruleId\": {{ruleId}},\r\n  \"ruleLineItemId\": {{ruleLineItemId}},\r\n  \"createdDate\": \"{{pickUpTime}}\"\r\n}"
										},
										"url": {
											"raw": "{{url}}/api/Rule/UpdateEntityRuleMapping",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"Rule",
												"UpdateEntityRuleMapping"
											]
										}
									},
									"response": []
								},
								{
									"name": "[116]read Rule By Rule ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b21dfda3-5d01-4762-bed6-681e39e637c4",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Your test name\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.rule.ruleLineItems[0].id).to.exist;",
													"    pm.environment.set(\"ruleLineItemId\",jsonData.rule.ruleLineItems[2].id);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/api/Rule?ruleId={{ruleId}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"Rule"
											],
											"query": [
												{
													"key": "ruleId",
													"value": "{{ruleId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[117]Trigger RuleExecuteEvent",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "24ac8dfd-18cf-476f-8c08-1bd93aad7e83",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Is Rule Executed\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.eql(true);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/api/RuleExecution?ruleId={{ruleId}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"RuleExecution"
											],
											"query": [
												{
													"key": "ruleId",
													"value": "{{ruleId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[118]TriggerExecuteNotificationMessage",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "24ac8dfd-18cf-476f-8c08-1bd93aad7e83",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Your test name\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.isExecuted).to.eql(true);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/api/JobExecution?jobId=15",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"JobExecution"
											],
											"query": [
												{
													"key": "jobId",
													"value": "15"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[119]SearchMessageSentViaRule",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "24ac8dfd-18cf-476f-8c08-1bd93aad7e83",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"to check notifications exist\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.notifications).to.exist;",
													"    var size1 = jsonData.notifications.length;",
													"    console.log( \"notifications array size : \"+size1);",
													"    ",
													"    var array=JSON.parse(pm.environment.get(\"ruleLineItemId\"));",
													"    ",
													"     pm.expect((jsonData.notifications[0].ruleLineItemId)).to.eql(array);",
													"",
													"    pm.environment.set(\"TotalNudgesenttoentity\",size1);",
													"  ",
													"   console.log( \" [PRE-NAT] Third nudge of entity is associated with  rulelineitemId : \"+pm.variables.get(\"ruleLineItemId\") );",
													"    ",
													"",
													"",
													"});",
													"",
													"pm.test(\"Nudge delivery Verification\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.notifications[0].messageContent).to.eql(\"\");",
													"    pm.expect(jsonData.notifications[0].mobileNumber).to.eql(\"\");",
													"    ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/api/NotificationMessageProcessor/SearchMessageSentViaRule?entityId={{entityId}}&ruleId={{ruleId}}&ruleLineItemId={{ruleLineItemId}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"NotificationMessageProcessor",
												"SearchMessageSentViaRule"
											],
											"query": [
												{
													"key": "entityId",
													"value": "{{entityId}}"
												},
												{
													"key": "ruleId",
													"value": "{{ruleId}}"
												},
												{
													"key": "ruleLineItemId",
													"value": "{{ruleLineItemId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[ 120 ]3rd change last nudge sent date",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "a66f8df1-605f-4640-aa35-cd0d72b96dff",
												"exec": [
													"var moment = require('moment');",
													"pm.environment.set(\"pickUpTime\", moment().subtract(2, 'days').format(\"YYYY-MM-DDThh:mm:ss.SSS\")) ;",
													"console.log(pm.variables.get(\"pickUpTime\"));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "8e5a4bf6-25c0-402b-9cea-5fbbd2dfd8cc",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Your test name\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.id).to.exist;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"entityId\": {{entityId}},\r\n  \"ruleId\": {{ruleId}},\r\n  \"ruleLineItemId\": {{ruleLineItemId}},\r\n  \"createdDate\": \"{{pickUpTime}}\"\r\n}"
										},
										"url": {
											"raw": "{{url}}/api/Rule/UpdateEntityRuleMapping",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"Rule",
												"UpdateEntityRuleMapping"
											]
										}
									},
									"response": []
								},
								{
									"name": "[122]read Rule By Rule ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b21dfda3-5d01-4762-bed6-681e39e637c4",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Your test name\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.rule.ruleLineItems[0].id).to.exist;",
													"    pm.environment.set(\"ruleLineItemId\",jsonData.rule.ruleLineItems[3].id);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/api/Rule?ruleId={{ruleId}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"Rule"
											],
											"query": [
												{
													"key": "ruleId",
													"value": "{{ruleId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[123]Trigger RuleExecuteEvent",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "24ac8dfd-18cf-476f-8c08-1bd93aad7e83",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Is Rule Executed\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.eql(true);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/api/RuleExecution?ruleId={{ruleId}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"RuleExecution"
											],
											"query": [
												{
													"key": "ruleId",
													"value": "{{ruleId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[124]TriggerExecuteNotificationMessage",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "24ac8dfd-18cf-476f-8c08-1bd93aad7e83",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Your test name\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.isExecuted).to.eql(true);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/api/JobExecution?jobId=15",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"JobExecution"
											],
											"query": [
												{
													"key": "jobId",
													"value": "15"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[125] 4 SearchMessageSentViaRule (count total nudge to entity)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "24ac8dfd-18cf-476f-8c08-1bd93aad7e83",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"to check notifications exist\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.notifications).to.exist;",
													"    var size1 = jsonData.notifications.length;",
													"    console.log( \"total nudges sent to entity : \"+size1);",
													"     ",
													"    pm.environment.set(\"TotalNudgesenttoentity\",size1);",
													"    pm.expect(pm.variables.get(\"TotalNudgesenttoentity\")).to.eql(4);",
													"",
													"    ",
													"    pm.test(\"ruleLineItemId\", function () {",
													"     for ( var i=0;i<pm.variables.get(\"TotalNudgesenttoentity\");i++){",
													"",
													"   if((jsonData.notifications[i].ruleLineItemId)==(pm.environment.get(\"ruleLineItemId\"))){",
													"  ",
													"    console.log( \"[PRE-NAT]last nudge of entity is associated with  rulelineitemId : \"+pm.variables.get(\"ruleLineItemId\") );",
													"",
													"}",
													"    }",
													"   ",
													"    ",
													"    ",
													"    });",
													"    ",
													"    ",
													"",
													"",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/api/NotificationMessageProcessor/SearchMessageSentViaRule?entityId={{entityId}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"NotificationMessageProcessor",
												"SearchMessageSentViaRule"
											],
											"query": [
												{
													"key": "entityId",
													"value": "{{entityId}}"
												}
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "NAT_5-8nudges",
							"item": [
								{
									"name": "[130]read entity by entityId",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "24ac8dfd-18cf-476f-8c08-1bd93aad7e83",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Your test name\", function () {",
													"    var jsonData = pm.response.json();",
													"    var X =JSON.parse(jsonData.id);",
													"    pm.expect(jsonData.id).to.eql(X);",
													"    ",
													"    pm.environment.set(\"entityCode\",jsonData.entityCode);",
													"     pm.environment.set(\"mobileNumber\",jsonData.mobileNumber);",
													"    ",
													"    ",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "28cea83f-eb53-4910-ac4e-05df0273e0ea",
												"exec": [
													"//pm.environment.set(\"entityId\",3847);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/api/Entity?entityId={{entityId}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"Entity"
											],
											"query": [
												{
													"key": "entityId",
													"value": "{{entityId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[131] 5th change last nudge sent date",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "a66f8df1-605f-4640-aa35-cd0d72b96dff",
												"exec": [
													"var moment = require('moment');",
													"pm.environment.set(\"pickUpTime\", moment().subtract(2, 'days').format(\"YYYY-MM-DDThh:mm:ss.SSS\")) ;",
													"console.log(pm.variables.get(\"pickUpTime\"));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "23d9c19d-f037-4abd-9ce9-a7494827aacd",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Your test name\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.id).to.exist;",
													"});",
													"",
													"console.log(\"Information of (5-8) nudges\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"entityId\": {{entityId}},\r\n  \"ruleId\": {{ruleId}},\r\n  \"ruleLineItemId\": {{ruleLineItemId}},\r\n  \"createdDate\": \"{{pickUpTime}}\"\r\n}"
										},
										"url": {
											"raw": "{{url}}/api/Rule/UpdateEntityRuleMapping",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"Rule",
												"UpdateEntityRuleMapping"
											]
										}
									},
									"response": []
								},
								{
									"name": "[132]read Rule By Rule ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b21dfda3-5d01-4762-bed6-681e39e637c4",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Your test name\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.rule.ruleLineItems[0].id).to.exist;",
													"    pm.environment.set(\"ruleLineItemId\",jsonData.rule.ruleLineItems[4].id);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/api/Rule?ruleId={{ruleId}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"Rule"
											],
											"query": [
												{
													"key": "ruleId",
													"value": "{{ruleId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[133]Trigger RuleExecuteEvent",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "24ac8dfd-18cf-476f-8c08-1bd93aad7e83",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Is Rule Executed\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.eql(true);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/api/RuleExecution?ruleId={{ruleId}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"RuleExecution"
											],
											"query": [
												{
													"key": "ruleId",
													"value": "{{ruleId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[134]TriggerExecuteNotificationMessage",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "24ac8dfd-18cf-476f-8c08-1bd93aad7e83",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Your test name\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.isExecuted).to.eql(true);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/api/JobExecution?jobId=15",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"JobExecution"
											],
											"query": [
												{
													"key": "jobId",
													"value": "15"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[136]SearchMessageSentViaRule",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "24ac8dfd-18cf-476f-8c08-1bd93aad7e83",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"to check notifications exist\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.notifications).to.exist;",
													"    var size1 = jsonData.notifications.length;",
													"    //console.log( \"notifications array size : \"+size1);",
													"    ",
													"    var array=JSON.parse(pm.environment.get(\"ruleLineItemId\"));",
													"    ",
													"     pm.expect((jsonData.notifications[0].ruleLineItemId)).to.eql(array);",
													"",
													"    pm.environment.set(\"TotalNudgesenttoentity\",size1);",
													"  ",
													"   ",
													"     console.log( \"[PRE-NAT] Second nudge of entity is associated with  rulelineitemId : \"+pm.variables.get(\"ruleLineItemId\") );",
													"",
													"",
													"",
													"});",
													"pm.test(\"Nudge delivery Verification\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.notifications[0].messageContent).to.eql(\"\");",
													"    pm.expect(jsonData.notifications[0].mobileNumber).to.eql(\"\");",
													"    ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/api/NotificationMessageProcessor/SearchMessageSentViaRule?entityId={{entityId}}&ruleId={{ruleId}}&ruleLineItemId={{ruleLineItemId}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"NotificationMessageProcessor",
												"SearchMessageSentViaRule"
											],
											"query": [
												{
													"key": "entityId",
													"value": "{{entityId}}"
												},
												{
													"key": "ruleId",
													"value": "{{ruleId}}"
												},
												{
													"key": "ruleLineItemId",
													"value": "{{ruleLineItemId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[137]6th change last nudge sent date",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "a66f8df1-605f-4640-aa35-cd0d72b96dff",
												"exec": [
													"var moment = require('moment');",
													"pm.environment.set(\"pickUpTime\", moment().subtract(2, 'days').format(\"YYYY-MM-DDThh:mm:ss.SSS\")) ;",
													"console.log(pm.variables.get(\"pickUpTime\"));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "357de4ea-0342-4ae4-b704-9433175072c0",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Your test name\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.id).to.exist;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"entityId\": {{entityId}},\r\n  \"ruleId\": {{ruleId}},\r\n  \"ruleLineItemId\": {{ruleLineItemId}},\r\n  \"createdDate\": \"{{pickUpTime}}\"\r\n}"
										},
										"url": {
											"raw": "{{url}}/api/Rule/UpdateEntityRuleMapping",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"Rule",
												"UpdateEntityRuleMapping"
											]
										}
									},
									"response": []
								},
								{
									"name": "[138]read Rule By Rule ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b21dfda3-5d01-4762-bed6-681e39e637c4",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Your test name\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.rule.ruleLineItems[0].id).to.exist;",
													"    pm.environment.set(\"ruleLineItemId\",jsonData.rule.ruleLineItems[5].id);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/api/Rule?ruleId={{ruleId}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"Rule"
											],
											"query": [
												{
													"key": "ruleId",
													"value": "{{ruleId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[139]Trigger RuleExecuteEvent",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "24ac8dfd-18cf-476f-8c08-1bd93aad7e83",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Is Rule Executed\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.eql(true);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/api/RuleExecution?ruleId={{ruleId}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"RuleExecution"
											],
											"query": [
												{
													"key": "ruleId",
													"value": "{{ruleId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[140]TriggerExecuteNotificationMessage",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "24ac8dfd-18cf-476f-8c08-1bd93aad7e83",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Your test name\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.isExecuted).to.eql(true);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/api/JobExecution?jobId=15",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"JobExecution"
											],
											"query": [
												{
													"key": "jobId",
													"value": "15"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[141]SearchMessageSentViaRule",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "24ac8dfd-18cf-476f-8c08-1bd93aad7e83",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"to check notifications exist\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.notifications).to.exist;",
													"    var size1 = jsonData.notifications.length;",
													"    console.log( \"notifications array size : \"+size1);",
													"    ",
													"    var array=JSON.parse(pm.environment.get(\"ruleLineItemId\"));",
													"    ",
													"     pm.expect((jsonData.notifications[0].ruleLineItemId)).to.eql(array);",
													"",
													"    pm.environment.set(\"TotalNudgesenttoentity\",size1);",
													"  ",
													"   console.log( \" [PRE-NAT] Third nudge of entity is associated with  rulelineitemId : \"+pm.variables.get(\"ruleLineItemId\") );",
													"    ",
													"",
													"",
													"});",
													"",
													"pm.test(\"Nudge delivery Verification\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.notifications[0].messageContent).to.eql(\"\");",
													"    pm.expect(jsonData.notifications[0].mobileNumber).to.eql(\"\");",
													"    ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/api/NotificationMessageProcessor/SearchMessageSentViaRule?entityId={{entityId}}&ruleId={{ruleId}}&ruleLineItemId={{ruleLineItemId}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"NotificationMessageProcessor",
												"SearchMessageSentViaRule"
											],
											"query": [
												{
													"key": "entityId",
													"value": "{{entityId}}"
												},
												{
													"key": "ruleId",
													"value": "{{ruleId}}"
												},
												{
													"key": "ruleLineItemId",
													"value": "{{ruleLineItemId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[142]7th change last nudge sent date",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "a66f8df1-605f-4640-aa35-cd0d72b96dff",
												"exec": [
													"var moment = require('moment');",
													"pm.environment.set(\"pickUpTime\", moment().subtract(2, 'days').format(\"YYYY-MM-DDThh:mm:ss.SSS\")) ;",
													"console.log(pm.variables.get(\"pickUpTime\"));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "8e5a4bf6-25c0-402b-9cea-5fbbd2dfd8cc",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Your test name\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.id).to.exist;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"entityId\": {{entityId}},\r\n  \"ruleId\": {{ruleId}},\r\n  \"ruleLineItemId\": {{ruleLineItemId}},\r\n  \"createdDate\": \"{{pickUpTime}}\"\r\n}"
										},
										"url": {
											"raw": "{{url}}/api/Rule/UpdateEntityRuleMapping",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"Rule",
												"UpdateEntityRuleMapping"
											]
										}
									},
									"response": []
								},
								{
									"name": "[143]read Rule By Rule ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b21dfda3-5d01-4762-bed6-681e39e637c4",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Your test name\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.rule.ruleLineItems[0].id).to.exist;",
													"    pm.environment.set(\"ruleLineItemId\",jsonData.rule.ruleLineItems[6].id);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/api/Rule?ruleId={{ruleId}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"Rule"
											],
											"query": [
												{
													"key": "ruleId",
													"value": "{{ruleId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[144]Trigger RuleExecuteEvent",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "24ac8dfd-18cf-476f-8c08-1bd93aad7e83",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Is Rule Executed\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.eql(true);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/api/RuleExecution?ruleId={{ruleId}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"RuleExecution"
											],
											"query": [
												{
													"key": "ruleId",
													"value": "{{ruleId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[145]TriggerExecuteNotificationMessage",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "24ac8dfd-18cf-476f-8c08-1bd93aad7e83",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Your test name\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.isExecuted).to.eql(true);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/api/JobExecution?jobId=15",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"JobExecution"
											],
											"query": [
												{
													"key": "jobId",
													"value": "15"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[146]4 SearchMessageSentViaRule",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "24ac8dfd-18cf-476f-8c08-1bd93aad7e83",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"to check notifications exist\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.notifications).to.exist;",
													"    var size1 = jsonData.notifications.length;",
													"    console.log( \"notifications array size : \"+size1);",
													"    ",
													"    var array=JSON.parse(pm.environment.get(\"ruleLineItemId\"));",
													"    ",
													"     pm.expect((jsonData.notifications[0].ruleLineItemId)).to.eql(array);",
													"",
													"    pm.environment.set(\"TotalNudgesenttoentity\",size1);",
													"  ",
													"   ",
													"    ",
													"",
													"",
													"});",
													"pm.test(\"Nudge delivery Verification\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.notifications[0].messageContent).to.eql(\"\");",
													"    pm.expect(jsonData.notifications[0].mobileNumber).to.eql(\"\");",
													"    ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/api/NotificationMessageProcessor/SearchMessageSentViaRule?entityId={{entityId}}&ruleId={{ruleId}}&ruleLineItemId={{ruleLineItemId}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"NotificationMessageProcessor",
												"SearchMessageSentViaRule"
											],
											"query": [
												{
													"key": "entityId",
													"value": "{{entityId}}"
												},
												{
													"key": "ruleId",
													"value": "{{ruleId}}"
												},
												{
													"key": "ruleLineItemId",
													"value": "{{ruleLineItemId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[147]4 SearchMessageSentViaRule (count total nudge to entity)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "24ac8dfd-18cf-476f-8c08-1bd93aad7e83",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"to check notifications exist\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.notifications).to.exist;",
													"    var size1 = jsonData.notifications.length;",
													"    console.log( \"total nudges sent to entity : \"+size1);",
													"     ",
													"    pm.environment.set(\"TotalNudgesenttoentity\",size1);",
													"    pm.expect(pm.variables.get(\"TotalNudgesenttoentity\")).to.eql(7);",
													"",
													"    //var count=0;",
													"    pm.test(\"ruleLineItemId\", function () {",
													"     for ( var i=0;i<pm.variables.get(\"TotalNudgesenttoentity\");i++){",
													"",
													"   if((jsonData.notifications[i].ruleLineItemId)==(pm.environment.get(\"ruleLineItemId\"))){",
													"  ",
													"    console.log( \"[PRE-NAT]last nudge of entity is associated with  rulelineitemId : \"+pm.variables.get(\"ruleLineItemId\") );",
													"",
													"}",
													"    }",
													"   ",
													"    ",
													"    ",
													"    });",
													"    ",
													"    ",
													"",
													"",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/api/NotificationMessageProcessor/SearchMessageSentViaRule?entityId={{entityId}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"NotificationMessageProcessor",
												"SearchMessageSentViaRule"
											],
											"query": [
												{
													"key": "entityId",
													"value": "{{entityId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[149]8th change last nudge sent date",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "a66f8df1-605f-4640-aa35-cd0d72b96dff",
												"exec": [
													"var moment = require('moment');",
													"pm.environment.set(\"pickUpTime\", moment().subtract(2, 'days').format(\"YYYY-MM-DDThh:mm:ss.SSS\")) ;",
													"console.log(pm.variables.get(\"pickUpTime\"));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "8e5a4bf6-25c0-402b-9cea-5fbbd2dfd8cc",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Your test name\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.id).to.exist;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"entityId\": {{entityId}},\r\n  \"ruleId\": {{ruleId}},\r\n  \"ruleLineItemId\": {{ruleLineItemId}},\r\n  \"createdDate\": \"{{pickUpTime}}\"\r\n}"
										},
										"url": {
											"raw": "{{url}}/api/Rule/UpdateEntityRuleMapping",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"Rule",
												"UpdateEntityRuleMapping"
											]
										}
									},
									"response": []
								},
								{
									"name": "[150]read Rule By Rule ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b21dfda3-5d01-4762-bed6-681e39e637c4",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Your test name\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.rule.ruleLineItems[0].id).to.exist;",
													"    pm.environment.set(\"ruleLineItemId\",jsonData.rule.ruleLineItems[7].id);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/api/Rule?ruleId={{ruleId}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"Rule"
											],
											"query": [
												{
													"key": "ruleId",
													"value": "{{ruleId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[151]Trigger RuleExecuteEvent",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "24ac8dfd-18cf-476f-8c08-1bd93aad7e83",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Is Rule Executed\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.eql(true);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/api/RuleExecution?ruleId={{ruleId}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"RuleExecution"
											],
											"query": [
												{
													"key": "ruleId",
													"value": "{{ruleId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[152]TriggerExecuteNotificationMessage",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "24ac8dfd-18cf-476f-8c08-1bd93aad7e83",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Your test name\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.isExecuted).to.eql(true);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/api/JobExecution?jobId=15",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"JobExecution"
											],
											"query": [
												{
													"key": "jobId",
													"value": "15"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[153]4 SearchMessageSentViaRule",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "24ac8dfd-18cf-476f-8c08-1bd93aad7e83",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"to check notifications exist\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.notifications).to.exist;",
													"    var size1 = jsonData.notifications.length;",
													"    console.log( \"notifications array size : \"+size1);",
													"    ",
													"    var array=JSON.parse(pm.environment.get(\"ruleLineItemId\"));",
													"    ",
													"     pm.expect((jsonData.notifications[0].ruleLineItemId)).to.eql(array);",
													"",
													"    pm.environment.set(\"TotalNudgesenttoentity\",size1);",
													"  ",
													"   ",
													"    ",
													"",
													"",
													"});",
													"pm.test(\"Nudge delivery Verification\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.notifications[0].messageContent).to.eql(\"\");",
													"    pm.expect(jsonData.notifications[0].mobileNumber).to.eql(\"\");",
													"    ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/api/NotificationMessageProcessor/SearchMessageSentViaRule?entityId={{entityId}}&ruleId={{ruleId}}&ruleLineItemId={{ruleLineItemId}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"NotificationMessageProcessor",
												"SearchMessageSentViaRule"
											],
											"query": [
												{
													"key": "entityId",
													"value": "{{entityId}}"
												},
												{
													"key": "ruleId",
													"value": "{{ruleId}}"
												},
												{
													"key": "ruleLineItemId",
													"value": "{{ruleLineItemId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[154]4 SearchMessageSentViaRule (count total nudge to entity)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "24ac8dfd-18cf-476f-8c08-1bd93aad7e83",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"to check notifications exist\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.notifications).to.exist;",
													"    var size1 = jsonData.notifications.length;",
													"    console.log( \"total nudges sent to entity : \"+size1);",
													"     ",
													"    pm.environment.set(\"TotalNudgesenttoentity\",size1);",
													"    pm.expect(pm.variables.get(\"TotalNudgesenttoentity\")).to.eql(8);",
													"",
													"    //var count=0;",
													"    pm.test(\"ruleLineItemId\", function () {",
													"     for ( var i=0;i<pm.variables.get(\"TotalNudgesenttoentity\");i++){",
													"",
													"   if((jsonData.notifications[i].ruleLineItemId)==(pm.environment.get(\"ruleLineItemId\"))){",
													"  ",
													"    console.log( \"[PRE-NAT]last nudge of entity is associated with  rulelineitemId : \"+pm.variables.get(\"ruleLineItemId\") );",
													"",
													"}",
													"    }",
													"   ",
													"    ",
													"    ",
													"    });",
													"    ",
													"    ",
													"",
													"",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/api/NotificationMessageProcessor/SearchMessageSentViaRule?entityId={{entityId}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"NotificationMessageProcessor",
												"SearchMessageSentViaRule"
											],
											"query": [
												{
													"key": "entityId",
													"value": "{{entityId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[155]notificationMessageProcessorHistory",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "24ac8dfd-18cf-476f-8c08-1bd93aad7e83",
												"exec": [
													"pm.test(\"status code 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    ",
													"",
													"    ",
													"});",
													"",
													"pm.test(\"extract message\", function () {",
													"    ",
													"    console.log(\"Nudge Details:\");",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.notificationMessageProcessorHistoryRecords).to.exist;",
													"    var size = jsonData.notificationMessageProcessorHistoryRecords.length;",
													"    pm.environment.set(\"messageContent\",jsonData.notificationMessageProcessorHistoryRecords[0].messageContent);",
													"    var count=0;",
													"     for ( var i=0;i<size;i++){",
													"   if((jsonData.notificationMessageProcessorHistoryRecords[i].mobileNumber)==(pm.environment.get(\"mobileNumber\"))){",
													"  ",
													"   count++;",
													"   ",
													"pm.environment.set(\"TotalNudgesenttoMobilenum\",count );",
													"   ",
													"// pm.environment.set(\"messageContent\",jsonData.notificationMessageProcessorHistoryRecords[0].messageContent);",
													"",
													"pm.environment.set(\"NudgeReceivedVia_NotificationChannelType\",jsonData.notificationMessageProcessorHistoryRecords[i].notificationChannelTypeId);",
													"console.log(\"nudgeNudgeReceivedVia_NotificationChannelType :\" +pm.variables.get(\"NudgeReceivedVia_NotificationChannelType\"));",
													"",
													"}",
													"   ",
													"    }",
													"    console.log(\"Number of nudges sent to mobile num  : \"+pm.variables.get(\"TotalNudgesenttoMobilenum\"));",
													"",
													"});",
													"",
													"pm.test(\"extract bitly url\",function(){",
													"",
													"var string = pm.variables.get(\"messageContent\");",
													"var bitly = string.match(/\\bhttps?:\\/\\/\\S+/gi);",
													"pm.environment.set(\"bitly\",bitly);",
													"console.log(bitly);",
													" ",
													"",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "308a3958-7fc4-4416-b794-eac8c0849b9e",
												"exec": [
													"pm.environment.set(\"TotalNudgesenttoMobilenum\",0);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/api/NotificationMessageProcessedHistory",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"NotificationMessageProcessedHistory"
											]
										}
									},
									"response": []
								},
								{
									"name": "[156]click on bitly link",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "24ac8dfd-18cf-476f-8c08-1bd93aad7e83",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{bitly}}",
											"host": [
												"{{bitly}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "[157]Trigger NudgeInteractionAnalytics",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "24ac8dfd-18cf-476f-8c08-1bd93aad7e83",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Your test name\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.isExecuted).to.eql(true);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/api/JobExecution?jobId=17",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"JobExecution"
											],
											"query": [
												{
													"key": "jobId",
													"value": "17"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[158]read data like URL is clicked (true)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0822a3c8-02fb-46f7-a903-c7a96a6fe942",
												"exec": [
													"pm.test(\"Status code 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Bitly is not cllicked \", function () {",
													"    var jsonData = pm.response.json();",
													"    var X = JSON.parse(jsonData.nudgeInteractionDetails[0].entityId);",
													"    pm.expect(jsonData.nudgeInteractionDetails[0].entityId).to.eql(X);",
													"    pm.expect(jsonData.nudgeInteractionDetails[0].isLinkClicked).to.eql(true);",
													"   ",
													"",
													"   console.log(\"Nudge System has captured Bitly analytics as TRUE \");",
													"",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/api/Entity/ReadNudgeInteraction?entitySourceSystemId={{entitySourceSystemId}}&entityCode={{entityCode}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"Entity",
												"ReadNudgeInteraction"
											],
											"query": [
												{
													"key": "entitySourceSystemId",
													"value": "{{entitySourceSystemId}}"
												},
												{
													"key": "entityCode",
													"value": "{{entityCode}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[152]Delete Rule",
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{url}}/api/Rule?ruleId={{ruleId}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"Rule"
											],
											"query": [
												{
													"key": "ruleId",
													"value": "{{ruleId}}"
												}
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "f3db1086-b756-4b8f-a6af-069357e13c1d",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "8aff3ff8-0fef-4729-a292-eed11c5dcb57",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "03821bd9-fcd6-46cc-9eaa-567fa5246d3c",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "9f311d63-a0b8-452d-a9e3-2a8fc290d876",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "PWT_Pre_ARF ",
					"item": [
						{
							"name": "ARF_1-4 nudges",
							"item": [
								{
									"name": "[201] [PWT PRE-ARF]craete Rule*********",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9b7b9e2e-8674-4d11-b9c2-de3b5c25dc3f",
												"exec": [
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(201);",
													"     var jsonData = pm.response.json();",
													"     pm.environment.set(\"ruleId\", jsonData.ruleId);",
													"     ",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "75c0cdb1-cfb0-4a07-b285-2080ac11d68a",
												"exec": [
													"pm.environment.set(\"entitySourceSystemId\",1);",
													"pm.environment.set(\"entityStateType\",1);",
													"pm.environment.set(\"entitySubStateType\",2);",
													"//pm.environment.set(\"notificationMessageTemplateId\",25);",
													"console.log(\"STARTED: ***********PWT_RULES_by_createEntity/PRE-ARF********************************\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"rule\": {\r\n    \"id\": 0,\r\n    \"name\": \" PWT pre ARF \",\r\n    \"description\": \"Prospect_Warming_tool pre ARF \",\r\n    \"ruleType\": 2,\r\n     \"frequencyType\": 1,\r\n    \"entitySourceSystemId\": {{entitySourceSystemId}},\r\n    \"entityStateType\": {{entityStateType}},\r\n    \"entitySubStateType\": {{entitySubStateType}},\r\n     \"ruleFrequencies\": [\r\n      {\r\n        \"id\": 0,\r\n        \"hour\": 0,\r\n        \"minute\": 15\r\n      }\r\n    ],\r\n    \"ruleLineItems\": [\r\n      {\r\n        \"id\": 0,\r\n        \"ruleLineItemType\": 1,\r\n        \"name\": \"PreARF_ 1st nudge\",\r\n        \"parentId\": \"0\",\r\n        \"sequence\": 1,\r\n        \"sendToPrimary\": true,\r\n        \"intendedPositiveOutput\": \"1st Nudge\",\r\n        \"ruleLineItemConditions\": [\r\n          {\r\n            \"value\": \"2\",\r\n            \"logicalOperatorType\": 1,\r\n            \"sequence\": 1,\r\n            \"ruleCategoryId\": 10,\r\n            \"mathOperatorOnValue\": 1\r\n          }\r\n        ],\r\n        \"ruleLineItemResults\": [\r\n          {\r\n            \"notificationChannelType\": 1,\r\n            \"notificationMessageTemplateId\": {{notificationMessageTemplateId1}},\r\n            \"isSMSAsFallBack\": false\r\n          }\r\n        ]\r\n      },\r\n\t   {\r\n        \"id\": 0,\r\n        \"ruleLineItemType\": 1,\r\n        \"name\": \"PreARF_ 2nd nudge\",\r\n        \"parentId\": \"0\",\r\n        \"sequence\": 2,\r\n        \"sendToPrimary\": true,\r\n        \"intendedPositiveOutput\": \"2nd Nudge\",\r\n        \"ruleLineItemConditions\": [\r\n          {\r\n            \"value\": \"2\",\r\n            \"logicalOperatorType\": 1,\r\n            \"sequence\": 1,\r\n            \"ruleCategoryId\": 11,\r\n            \"mathOperatorOnValue\": 1\r\n          }\r\n        ],\r\n        \"ruleLineItemResults\": [\r\n          {\r\n            \"notificationChannelType\": 1,\r\n            \"notificationMessageTemplateId\":{{notificationMessageTemplateId1}} ,\r\n            \"isSMSAsFallBack\": false\r\n          }\r\n        ]\r\n      },\r\n\t   {\r\n        \"id\": 0,\r\n        \"ruleLineItemType\": 1,\r\n        \"name\": \"PreARF_ 3rd nudge\",\r\n        \"parentId\": \"0\",\r\n        \"sequence\": 3,\r\n        \"sendToPrimary\": true,\r\n        \"intendedPositiveOutput\": \"3rd Nudge\",\r\n        \"ruleLineItemConditions\": [\r\n          {\r\n            \"value\": \"2\",\r\n            \"logicalOperatorType\": 1,\r\n            \"sequence\": 1,\r\n            \"ruleCategoryId\": 11,\r\n            \"mathOperatorOnValue\": 1\r\n          }\r\n        ],\r\n        \"ruleLineItemResults\": [\r\n          {\r\n            \"notificationChannelType\": 1,\r\n            \"notificationMessageTemplateId\": {{notificationMessageTemplateId1}},\r\n            \"isSMSAsFallBack\": false\r\n          }\r\n        ]\r\n      },\r\n\t   {\r\n        \"id\": 0,\r\n        \"ruleLineItemType\": 1,\r\n        \"name\": \"PreARF_ 4th nudge\",\r\n        \"parentId\": \"0\",\r\n        \"sequence\": 4,\r\n        \"sendToPrimary\": true,\r\n        \"intendedPositiveOutput\": \"4th Nudge\",\r\n        \"ruleLineItemConditions\": [\r\n          {\r\n            \"value\": \"2\",\r\n            \"logicalOperatorType\": 1,\r\n            \"sequence\": 1,\r\n            \"ruleCategoryId\": 11,\r\n            \"mathOperatorOnValue\": 1\r\n          }\r\n        ],\r\n        \"ruleLineItemResults\": [\r\n          {\r\n            \"notificationChannelType\": 1,\r\n            \"notificationMessageTemplateId\": {{notificationMessageTemplateId1}},\r\n            \"isSMSAsFallBack\": false\r\n          }\r\n        ]\r\n      },\r\n\t   {\r\n        \"id\": 0,\r\n        \"ruleLineItemType\": 1,\r\n        \"name\": \"PreARF_ 5th nudge\",\r\n        \"parentId\": \"0\",\r\n        \"sequence\": 5,\r\n        \"sendToPrimary\": true,\r\n        \"intendedPositiveOutput\": \"5th Nudge\",\r\n        \"ruleLineItemConditions\": [\r\n          {\r\n            \"value\": \"2\",\r\n            \"logicalOperatorType\": 1,\r\n            \"sequence\": 1,\r\n            \"ruleCategoryId\": 11,\r\n            \"mathOperatorOnValue\": 1\r\n          }\r\n        ],\r\n        \"ruleLineItemResults\": [\r\n          {\r\n            \"notificationChannelType\": 1,\r\n            \"notificationMessageTemplateId\": {{notificationMessageTemplateId1}},\r\n            \"isSMSAsFallBack\": false\r\n          }\r\n        ]\r\n      },\r\n\t   {\r\n        \"id\": 0,\r\n        \"ruleLineItemType\": 1,\r\n        \"name\": \"PreARF_ 6th nudge\",\r\n        \"parentId\": \"0\",\r\n        \"sequence\": 6,\r\n        \"sendToPrimary\": true,\r\n        \"intendedPositiveOutput\": \"6th Nudge\",\r\n        \"ruleLineItemConditions\": [\r\n          {\r\n            \"value\": \"2\",\r\n            \"logicalOperatorType\": 1,\r\n            \"sequence\": 1,\r\n            \"ruleCategoryId\": 11,\r\n            \"mathOperatorOnValue\": 1\r\n          }\r\n        ],\r\n        \"ruleLineItemResults\": [\r\n          {\r\n            \"notificationChannelType\": 1,\r\n            \"notificationMessageTemplateId\": {{notificationMessageTemplateId1}},\r\n            \"isSMSAsFallBack\": false\r\n          }\r\n        ]\r\n      },\r\n\t   {\r\n        \"id\": 0,\r\n        \"ruleLineItemType\": 1,\r\n        \"name\": \"PreARF_ 7th nudge\",\r\n        \"parentId\": \"0\",\r\n        \"sequence\": 7,\r\n        \"sendToPrimary\": true,\r\n        \"intendedPositiveOutput\": \"7th Nudge\",\r\n        \"ruleLineItemConditions\": [\r\n          {\r\n            \"value\": \"2\",\r\n            \"logicalOperatorType\": 1,\r\n            \"sequence\": 1,\r\n            \"ruleCategoryId\": 11,\r\n            \"mathOperatorOnValue\": 1\r\n          }\r\n        ],\r\n        \"ruleLineItemResults\": [\r\n          {\r\n            \"notificationChannelType\": 1,\r\n            \"notificationMessageTemplateId\": {{notificationMessageTemplateId1}},\r\n            \"isSMSAsFallBack\": false\r\n          }\r\n        ]\r\n      },\r\n\t   {\r\n        \"id\": 0,\r\n        \"ruleLineItemType\": 1,\r\n        \"name\": \"PreARF_ 8th nudge\",\r\n        \"parentId\": \"0\",\r\n        \"sequence\": 8,\r\n        \"sendToPrimary\": true,\r\n        \"intendedPositiveOutput\": \"8th Nudge\",\r\n        \"ruleLineItemConditions\": [\r\n          {\r\n            \"value\": \"2\",\r\n            \"logicalOperatorType\": 1,\r\n            \"sequence\": 1,\r\n            \"ruleCategoryId\": 11,\r\n            \"mathOperatorOnValue\": 1\r\n          }\r\n        ],\r\n        \"ruleLineItemResults\": [\r\n          {\r\n            \"notificationChannelType\": 1,\r\n            \"notificationMessageTemplateId\": {{notificationMessageTemplateId1}},\r\n            \"isSMSAsFallBack\": false\r\n          }\r\n        ]\r\n      },\r\n\t   {\r\n        \"id\": 0,\r\n        \"ruleLineItemType\": 3,\r\n        \"name\": \"PreARF_ end line\",\r\n        \"parentId\": \"0\",\r\n        \"sequence\": 9,\r\n        \"sendToPrimary\": true,\r\n        \"intendedPositiveOutput\": \"End line item\",\r\n        \"ruleLineItemConditions\": [\r\n          {\r\n            \"value\": \"2\",\r\n            \"logicalOperatorType\": 1,\r\n            \"sequence\": 1,\r\n            \"ruleCategoryId\": 11,\r\n            \"mathOperatorOnValue\": 1\r\n          }\r\n        ],\r\n        \"ruleLineItemResults\": [\r\n          {\r\n            \"notificationChannelType\": 1,\r\n            \"notificationMessageTemplateId\": {{notificationMessageTemplateId1}},\r\n            \"isSMSAsFallBack\": false\r\n          }\r\n        ]\r\n      }\r\n    ]\r\n  }\r\n}"
										},
										"url": {
											"raw": "{{url}}/api/Rule",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"Rule"
											]
										}
									},
									"response": []
								},
								{
									"name": "[202]read Rule By Rule ID Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b21dfda3-5d01-4762-bed6-681e39e637c4",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Your test name\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.rule.ruleLineItems[0].id).to.exist;",
													"    pm.environment.set(\"ruleLineItemId\",jsonData.rule.ruleLineItems[0].id);",
													"    var size = jsonData.rule.ruleLineItems.length;",
													"    pm.environment.set(\"totalrulelineitems\",size-1);",
													"",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/api/Rule?ruleId={{ruleId}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"Rule"
											],
											"query": [
												{
													"key": "ruleId",
													"value": "{{ruleId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[203]create entity",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b45ca225-09f2-4fd4-a05e-4c3d13a6dbf0",
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"   ",
													"    let EntityJSON = pm.response.json();",
													"    pm.expect(EntityJSON.entityId).to.exist;",
													"    pm.expect(EntityJSON.isSaved).to.equal(true);",
													"     pm.environment.set(\"entityId\", EntityJSON.entityId);",
													"    console.log(EntityJSON);",
													"});",
													"",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "0e9b9ca9-9c49-46e8-ac8c-768fb21ce4b8",
												"exec": [
													"var milliseconds = new Date().getTime();",
													"var codeSeed = \"Auto-\";",
													"pm.environment.set(\"entityCode\", codeSeed.concat(milliseconds));",
													"",
													"",
													"var codeSeed = \"Auto2nd-\";",
													"pm.environment.set(\"secondaryEntityCode\", codeSeed.concat(milliseconds));",
													"",
													"var moment = require('moment');",
													"pm.environment.set(\"timestamp\", moment().format(\"YYYY-MM-DDThh:mm:ss.SSS\"))   ;",
													"console.log(pm.variables.get(\"timestamp\"));",
													"",
													"",
													"var moment = require('moment');",
													"pm.environment.set(\"pickUpTime\", moment().subtract(2, 'days').format(\"YYYY-MM-DDThh:mm:ss.SSS\")) ;",
													"console.log(pm.variables.get(\"pickUpTime\"));",
													"",
													"// let ran =  _.random(1111111111, 9999999999);",
													"// pm.environment.set(\"mobileNumberARF\",ran);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"id\": 0,\r\n  \"entityCode\": \"{{entityCode}}\",\r\n  \"name\": \"PreARF-{{name}}\",\r\n  \"mobileNumber\": {{mobileNumberARF}},\r\n  \"entityCreationDate\": \"{{timestamp}}\",\r\n  \"entitySourceSystemId\": {{entitySourceSystemId}},\r\n  \"entityStateDate\": \"{{pickUpTime}}\",\r\n  \"entityStateType\": {{entityStateType}},\r\n  \"entitySubStateType\":{{entitySubStateType}},\r\n  \"entityStateValue\": \" {{entityStateValue}} \",\r\n  \"secondaryEntityCode\": \"{{secondaryEntityCode}}\",\r\n  \"secondaryName\": \"{{secondaryName}}\",\r\n  \"secondaryMobileNumber\": {{secondaryMobileNumber}},\r\n  \"entitySegmentTypeId\": {{entitySegmentTypeId}},\r\n  \"languageTypeId\": {{languageTypeId}}\r\n}\r\n"
										},
										"url": {
											"raw": "{{url}}/api/Entity",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"Entity"
											]
										}
									},
									"response": []
								},
								{
									"name": "[204]read entity by entityId",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "24ac8dfd-18cf-476f-8c08-1bd93aad7e83",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"verify mobile number\", function () {",
													"    var jsonData = pm.response.json();",
													"     // let Z= JSON.parse(jsonData.mobileNumber);",
													"    pm.expect(jsonData.mobileNumber).to.eql(pm.variables.get(\"mobileNumberARF\"));",
													"    pm.environment.set(\"mobileNumber\",jsonData.mobileNumber);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/api/Entity?entityId={{entityId}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"Entity"
											],
											"query": [
												{
													"key": "entityId",
													"value": "{{entityId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[205]Trigger RuleExecuteEvent",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "24ac8dfd-18cf-476f-8c08-1bd93aad7e83",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Is Rule Executed\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.eql(true);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/api/RuleExecution?ruleId={{ruleId}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"RuleExecution"
											],
											"query": [
												{
													"key": "ruleId",
													"value": "{{ruleId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[206]TriggerExecuteNotificationMessage",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "24ac8dfd-18cf-476f-8c08-1bd93aad7e83",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Your test name\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.isExecuted).to.eql(true);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/api/JobExecution?jobId=15",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"JobExecution"
											],
											"query": [
												{
													"key": "jobId",
													"value": "15"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[207]SearchMessageSentViaRule",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "24ac8dfd-18cf-476f-8c08-1bd93aad7e83",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"to check notifications exist\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.notifications).to.exist;",
													"    var size1 = jsonData.notifications.length;",
													"  ",
													"    ",
													"    var array=JSON.parse(pm.environment.get(\"ruleLineItemId\"));",
													"    ",
													"     pm.expect((jsonData.notifications[0].ruleLineItemId)).to.eql(array);",
													"",
													"    pm.environment.set(\"TotalNudgesenttoentity\",size1);",
													"  ",
													"    console.log( \"[Pre-ARF]first nudge of entity is associated with  rulelineitemId : \"+pm.variables.get(\"ruleLineItemId\") );",
													"",
													"    ",
													"});",
													"",
													"pm.test(\"Nudge delivery Verification\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.notifications[0].messageContent).to.eql(\"\");",
													"    pm.expect(jsonData.notifications[0].mobileNumber).to.eql(\"\");",
													"    ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/api/NotificationMessageProcessor/SearchMessageSentViaRule?entityId={{entityId}}&ruleId={{ruleId}}&ruleLineItemId={{ruleLineItemId}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"NotificationMessageProcessor",
												"SearchMessageSentViaRule"
											],
											"query": [
												{
													"key": "entityId",
													"value": "{{entityId}}"
												},
												{
													"key": "ruleId",
													"value": "{{ruleId}}"
												},
												{
													"key": "ruleLineItemId",
													"value": "{{ruleLineItemId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[208]1st change last nudge sent date",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "a66f8df1-605f-4640-aa35-cd0d72b96dff",
												"exec": [
													"var moment = require('moment');",
													"pm.environment.set(\"pickUpTime\", moment().subtract(2, 'days').format(\"YYYY-MM-DDThh:mm:ss.SSS\")) ;",
													"console.log(pm.variables.get(\"pickUpTime\"));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "23d9c19d-f037-4abd-9ce9-a7494827aacd",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Your test name\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.id).to.exist;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"entityId\": {{entityId}},\r\n  \"ruleId\": {{ruleId}},\r\n  \"ruleLineItemId\": {{ruleLineItemId}},\r\n  \"createdDate\": \"{{pickUpTime}}\"\r\n}"
										},
										"url": {
											"raw": "{{url}}/api/Rule/UpdateEntityRuleMapping",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"Rule",
												"UpdateEntityRuleMapping"
											]
										}
									},
									"response": []
								},
								{
									"name": "[209]read Rule By Rule ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b21dfda3-5d01-4762-bed6-681e39e637c4",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Your test name\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.rule.ruleLineItems[0].id).to.exist;",
													"    pm.environment.set(\"ruleLineItemId\",jsonData.rule.ruleLineItems[1].id);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/api/Rule?ruleId={{ruleId}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"Rule"
											],
											"query": [
												{
													"key": "ruleId",
													"value": "{{ruleId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[210]Trigger RuleExecuteEvent",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "24ac8dfd-18cf-476f-8c08-1bd93aad7e83",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Is Rule Executed\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.eql(true);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/api/RuleExecution?ruleId={{ruleId}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"RuleExecution"
											],
											"query": [
												{
													"key": "ruleId",
													"value": "{{ruleId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[211]TriggerExecuteNotificationMessage",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "24ac8dfd-18cf-476f-8c08-1bd93aad7e83",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Your test name\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.isExecuted).to.eql(true);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/api/JobExecution?jobId=15",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"JobExecution"
											],
											"query": [
												{
													"key": "jobId",
													"value": "15"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[212]SearchMessageSentViaRule",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "24ac8dfd-18cf-476f-8c08-1bd93aad7e83",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"to check notifications exist\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.notifications).to.exist;",
													"    var size1 = jsonData.notifications.length;",
													"   ",
													"    var array=JSON.parse(pm.environment.get(\"ruleLineItemId\"));",
													"    ",
													"     pm.expect((jsonData.notifications[0].ruleLineItemId)).to.eql(array);",
													"",
													"    pm.environment.set(\"TotalNudgesenttoentity\",size1);",
													"  ",
													"   ",
													"     console.log( \" [Pre-ARF] Second nudge of entity is associated with  rulelineitemId : \"+pm.variables.get(\"ruleLineItemId\") );",
													"",
													"",
													"",
													"});",
													"",
													"pm.test(\"Nudge delivery Verification\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.notifications[0].messageContent).to.eql(\"\");",
													"    pm.expect(jsonData.notifications[0].mobileNumber).to.eql(\"\");",
													"    ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/api/NotificationMessageProcessor/SearchMessageSentViaRule?entityId={{entityId}}&ruleId={{ruleId}}&ruleLineItemId={{ruleLineItemId}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"NotificationMessageProcessor",
												"SearchMessageSentViaRule"
											],
											"query": [
												{
													"key": "entityId",
													"value": "{{entityId}}"
												},
												{
													"key": "ruleId",
													"value": "{{ruleId}}"
												},
												{
													"key": "ruleLineItemId",
													"value": "{{ruleLineItemId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[213]2nd change last nudge sent date",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "a66f8df1-605f-4640-aa35-cd0d72b96dff",
												"exec": [
													"var moment = require('moment');",
													"pm.environment.set(\"pickUpTime\", moment().subtract(2, 'days').format(\"YYYY-MM-DDThh:mm:ss.SSS\")) ;",
													"console.log(pm.variables.get(\"pickUpTime\"));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "357de4ea-0342-4ae4-b704-9433175072c0",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Your test name\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.id).to.exist;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"entityId\": {{entityId}},\r\n  \"ruleId\": {{ruleId}},\r\n  \"ruleLineItemId\": {{ruleLineItemId}},\r\n  \"createdDate\": \"{{pickUpTime}}\"\r\n}"
										},
										"url": {
											"raw": "{{url}}/api/Rule/UpdateEntityRuleMapping",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"Rule",
												"UpdateEntityRuleMapping"
											]
										}
									},
									"response": []
								},
								{
									"name": "[214]read Rule By Rule ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b21dfda3-5d01-4762-bed6-681e39e637c4",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Your test name\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.rule.ruleLineItems[0].id).to.exist;",
													"    pm.environment.set(\"ruleLineItemId\",jsonData.rule.ruleLineItems[2].id);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/api/Rule?ruleId={{ruleId}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"Rule"
											],
											"query": [
												{
													"key": "ruleId",
													"value": "{{ruleId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[215]Trigger RuleExecuteEvent",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "24ac8dfd-18cf-476f-8c08-1bd93aad7e83",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Is Rule Executed\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.eql(true);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/api/RuleExecution?ruleId={{ruleId}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"RuleExecution"
											],
											"query": [
												{
													"key": "ruleId",
													"value": "{{ruleId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[216]TriggerExecuteNotificationMessage",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "24ac8dfd-18cf-476f-8c08-1bd93aad7e83",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Your test name\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.isExecuted).to.eql(true);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/api/JobExecution?jobId=15",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"JobExecution"
											],
											"query": [
												{
													"key": "jobId",
													"value": "15"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[217]SearchMessageSentViaRule",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "24ac8dfd-18cf-476f-8c08-1bd93aad7e83",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"to check notifications exist\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.notifications).to.exist;",
													"    var size1 = jsonData.notifications.length;",
													"    console.log( \"notifications array size : \"+size1);",
													"    ",
													"    var array=JSON.parse(pm.environment.get(\"ruleLineItemId\"));",
													"    ",
													"     pm.expect((jsonData.notifications[0].ruleLineItemId)).to.eql(array);",
													"",
													"    pm.environment.set(\"TotalNudgesenttoentity\",size1);",
													"  ",
													"   console.log( \" [Pre-ARF] Third nudge of entity is associated with  rulelineitemId : \"+pm.variables.get(\"ruleLineItemId\") );",
													"    ",
													"",
													"",
													"});",
													"",
													"pm.test(\"Nudge delivery Verification\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.notifications[0].messageContent).to.eql(\"\");",
													"    pm.expect(jsonData.notifications[0].mobileNumber).to.eql(\"\");",
													"    ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/api/NotificationMessageProcessor/SearchMessageSentViaRule?entityId={{entityId}}&ruleId={{ruleId}}&ruleLineItemId={{ruleLineItemId}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"NotificationMessageProcessor",
												"SearchMessageSentViaRule"
											],
											"query": [
												{
													"key": "entityId",
													"value": "{{entityId}}"
												},
												{
													"key": "ruleId",
													"value": "{{ruleId}}"
												},
												{
													"key": "ruleLineItemId",
													"value": "{{ruleLineItemId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[218] 3rd  change last nudge sent date",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "a66f8df1-605f-4640-aa35-cd0d72b96dff",
												"exec": [
													"var moment = require('moment');",
													"pm.environment.set(\"pickUpTime\", moment().subtract(2, 'days').format(\"YYYY-MM-DDThh:mm:ss.SSS\")) ;",
													"console.log(pm.variables.get(\"pickUpTime\"));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "8e5a4bf6-25c0-402b-9cea-5fbbd2dfd8cc",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Your test name\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.id).to.exist;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"entityId\": {{entityId}},\r\n  \"ruleId\": {{ruleId}},\r\n  \"ruleLineItemId\": {{ruleLineItemId}},\r\n  \"createdDate\": \"{{pickUpTime}}\"\r\n}"
										},
										"url": {
											"raw": "{{url}}/api/Rule/UpdateEntityRuleMapping",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"Rule",
												"UpdateEntityRuleMapping"
											]
										}
									},
									"response": []
								},
								{
									"name": "[219]read Rule By Rule ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b21dfda3-5d01-4762-bed6-681e39e637c4",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Your test name\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.rule.ruleLineItems[0].id).to.exist;",
													"    pm.environment.set(\"ruleLineItemId\",jsonData.rule.ruleLineItems[3].id);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/api/Rule?ruleId={{ruleId}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"Rule"
											],
											"query": [
												{
													"key": "ruleId",
													"value": "{{ruleId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[220]Trigger RuleExecuteEvent",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "24ac8dfd-18cf-476f-8c08-1bd93aad7e83",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Is Rule Executed\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.eql(true);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/api/RuleExecution?ruleId={{ruleId}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"RuleExecution"
											],
											"query": [
												{
													"key": "ruleId",
													"value": "{{ruleId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[221]TriggerExecuteNotificationMessage",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "24ac8dfd-18cf-476f-8c08-1bd93aad7e83",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Your test name\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.isExecuted).to.eql(true);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/api/JobExecution?jobId=15",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"JobExecution"
											],
											"query": [
												{
													"key": "jobId",
													"value": "15"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[222]4 SearchMessageSentViaRule",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "24ac8dfd-18cf-476f-8c08-1bd93aad7e83",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"to check notifications exist\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.notifications).to.exist;",
													"    var size1 = jsonData.notifications.length;",
													"    console.log( \"notifications array size : \"+size1);",
													"    ",
													"    var array=JSON.parse(pm.environment.get(\"ruleLineItemId\"));",
													"    ",
													"     pm.expect((jsonData.notifications[0].ruleLineItemId)).to.eql(array);",
													"",
													"    pm.environment.set(\"TotalNudgesenttoentity\",size1);",
													"  ",
													"   ",
													"    ",
													"",
													"",
													"});",
													"",
													"pm.test(\"Nudge delivery Verification\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.notifications[0].messageContent).to.eql(\"\");",
													"    pm.expect(jsonData.notifications[0].mobileNumber).to.eql(\"\");",
													"    ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/api/NotificationMessageProcessor/SearchMessageSentViaRule?entityId={{entityId}}&ruleId={{ruleId}}&ruleLineItemId={{ruleLineItemId}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"NotificationMessageProcessor",
												"SearchMessageSentViaRule"
											],
											"query": [
												{
													"key": "entityId",
													"value": "{{entityId}}"
												},
												{
													"key": "ruleId",
													"value": "{{ruleId}}"
												},
												{
													"key": "ruleLineItemId",
													"value": "{{ruleLineItemId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[224] SearchMessageSentViaRule (count total nudge to entity)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "24ac8dfd-18cf-476f-8c08-1bd93aad7e83",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"to check notifications exist\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.notifications).to.exist;",
													"    var size1 = jsonData.notifications.length;",
													"    console.log( \"total nudges sent to entity : \"+size1);",
													"     ",
													"    pm.environment.set(\"TotalNudgesenttoentity\",size1);",
													"    pm.expect(pm.variables.get(\"TotalNudgesenttoentity\")).to.eql(4);",
													"",
													"    ",
													"    pm.test(\"ruleLineItemId\", function () {",
													"     for ( var i=0;i<pm.variables.get(\"TotalNudgesenttoentity\");i++){",
													"",
													"   if((jsonData.notifications[i].ruleLineItemId)==(pm.environment.get(\"ruleLineItemId\"))){",
													"  ",
													"    console.log( \"[Pre-ARF] last nudge of entity is associated with  rulelineitemId : \"+pm.variables.get(\"ruleLineItemId\") );",
													"",
													"}",
													"    }",
													"   ",
													"    ",
													"    ",
													"    });",
													"    ",
													"    ",
													"",
													"",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/api/NotificationMessageProcessor/SearchMessageSentViaRule?entityId={{entityId}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"NotificationMessageProcessor",
												"SearchMessageSentViaRule"
											],
											"query": [
												{
													"key": "entityId",
													"value": "{{entityId}}"
												}
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "ARF_5-8nudges",
							"item": [
								{
									"name": "[229]read entity by entityId",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "24ac8dfd-18cf-476f-8c08-1bd93aad7e83",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Your test name\", function () {",
													"    var jsonData = pm.response.json();",
													"    var X =JSON.parse(jsonData.id);",
													"    pm.expect(jsonData.id).to.eql(X);",
													"    ",
													"    pm.environment.set(\"entityCode\",jsonData.entityCode);",
													"     pm.environment.set(\"mobileNumber\",jsonData.mobileNumber);",
													"    ",
													"    ",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "28cea83f-eb53-4910-ac4e-05df0273e0ea",
												"exec": [
													"//pm.environment.set(\"entityId\",3847);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/api/Entity?entityId={{entityId}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"Entity"
											],
											"query": [
												{
													"key": "entityId",
													"value": "{{entityId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[230][5th] change last nudge sent date for",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "a66f8df1-605f-4640-aa35-cd0d72b96dff",
												"exec": [
													"var moment = require('moment');",
													"pm.environment.set(\"pickUpTime\", moment().subtract(2, 'days').format(\"YYYY-MM-DDThh:mm:ss.SSS\")) ;",
													"console.log(pm.variables.get(\"pickUpTime\"));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "23d9c19d-f037-4abd-9ce9-a7494827aacd",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Your test name\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.id).to.exist;",
													"});",
													"",
													"console.log(\"Information of (5-8) nudges\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"entityId\": {{entityId}},\r\n  \"ruleId\": {{ruleId}},\r\n  \"ruleLineItemId\": {{ruleLineItemId}},\r\n  \"createdDate\": \"{{pickUpTime}}\"\r\n}"
										},
										"url": {
											"raw": "{{url}}/api/Rule/UpdateEntityRuleMapping",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"Rule",
												"UpdateEntityRuleMapping"
											]
										}
									},
									"response": []
								},
								{
									"name": "[231]read Rule By Rule ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b21dfda3-5d01-4762-bed6-681e39e637c4",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Your test name\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.rule.ruleLineItems[0].id).to.exist;",
													"    pm.environment.set(\"ruleLineItemId\",jsonData.rule.ruleLineItems[4].id);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/api/Rule?ruleId={{ruleId}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"Rule"
											],
											"query": [
												{
													"key": "ruleId",
													"value": "{{ruleId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[232]Trigger RuleExecuteEvent",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "24ac8dfd-18cf-476f-8c08-1bd93aad7e83",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Is Rule Executed\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.eql(true);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/api/RuleExecution?ruleId={{ruleId}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"RuleExecution"
											],
											"query": [
												{
													"key": "ruleId",
													"value": "{{ruleId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[233]TriggerExecuteNotificationMessage",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "24ac8dfd-18cf-476f-8c08-1bd93aad7e83",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Your test name\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.isExecuted).to.eql(true);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/api/JobExecution?jobId=15",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"JobExecution"
											],
											"query": [
												{
													"key": "jobId",
													"value": "15"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[234]Trigger NudgeInteractionAnalytics",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "24ac8dfd-18cf-476f-8c08-1bd93aad7e83",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Your test name\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.isExecuted).to.eql(true);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/api/JobExecution?jobId=17",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"JobExecution"
											],
											"query": [
												{
													"key": "jobId",
													"value": "17"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[235]SearchMessageSentViaRule",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "24ac8dfd-18cf-476f-8c08-1bd93aad7e83",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"to check notifications exist\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.notifications).to.exist;",
													"    var size1 = jsonData.notifications.length;",
													"    //console.log( \"notifications array size : \"+size1);",
													"    ",
													"    var array=JSON.parse(pm.environment.get(\"ruleLineItemId\"));",
													"    ",
													"     pm.expect((jsonData.notifications[0].ruleLineItemId)).to.eql(array);",
													"",
													"    pm.environment.set(\"TotalNudgesenttoentity\",size1);",
													"  ",
													"   ",
													"     console.log( \"[PRE-NAT] Second nudge of entity is associated with  rulelineitemId : \"+pm.variables.get(\"ruleLineItemId\") );",
													"",
													"",
													"",
													"});",
													"pm.test(\"Nudge delivery Verification\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.notifications[0].messageContent).to.eql(\"\");",
													"    pm.expect(jsonData.notifications[0].mobileNumber).to.eql(\"\");",
													"    ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/api/NotificationMessageProcessor/SearchMessageSentViaRule?entityId={{entityId}}&ruleId={{ruleId}}&ruleLineItemId={{ruleLineItemId}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"NotificationMessageProcessor",
												"SearchMessageSentViaRule"
											],
											"query": [
												{
													"key": "entityId",
													"value": "{{entityId}}"
												},
												{
													"key": "ruleId",
													"value": "{{ruleId}}"
												},
												{
													"key": "ruleLineItemId",
													"value": "{{ruleLineItemId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[236] 6th change last nudge sent date",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "a66f8df1-605f-4640-aa35-cd0d72b96dff",
												"exec": [
													"var moment = require('moment');",
													"pm.environment.set(\"pickUpTime\", moment().subtract(2, 'days').format(\"YYYY-MM-DDThh:mm:ss.SSS\")) ;",
													"console.log(pm.variables.get(\"pickUpTime\"));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "357de4ea-0342-4ae4-b704-9433175072c0",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Your test name\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.id).to.exist;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"entityId\": {{entityId}},\r\n  \"ruleId\": {{ruleId}},\r\n  \"ruleLineItemId\": {{ruleLineItemId}},\r\n  \"createdDate\": \"{{pickUpTime}}\"\r\n}"
										},
										"url": {
											"raw": "{{url}}/api/Rule/UpdateEntityRuleMapping",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"Rule",
												"UpdateEntityRuleMapping"
											]
										}
									},
									"response": []
								},
								{
									"name": "[237]read Rule By Rule ID Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b21dfda3-5d01-4762-bed6-681e39e637c4",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Your test name\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.rule.ruleLineItems[0].id).to.exist;",
													"    pm.environment.set(\"ruleLineItemId\",jsonData.rule.ruleLineItems[5].id);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/api/Rule?ruleId={{ruleId}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"Rule"
											],
											"query": [
												{
													"key": "ruleId",
													"value": "{{ruleId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[238]Trigger RuleExecuteEvent Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "24ac8dfd-18cf-476f-8c08-1bd93aad7e83",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Is Rule Executed\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.eql(true);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/api/RuleExecution?ruleId={{ruleId}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"RuleExecution"
											],
											"query": [
												{
													"key": "ruleId",
													"value": "{{ruleId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[239]TriggerExecuteNotificationMessage",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "24ac8dfd-18cf-476f-8c08-1bd93aad7e83",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Your test name\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.isExecuted).to.eql(true);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/api/JobExecution?jobId=15",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"JobExecution"
											],
											"query": [
												{
													"key": "jobId",
													"value": "15"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[240]SearchMessageSentViaRule",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "24ac8dfd-18cf-476f-8c08-1bd93aad7e83",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"to check notifications exist\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.notifications).to.exist;",
													"    var size1 = jsonData.notifications.length;",
													"    console.log( \"notifications array size : \"+size1);",
													"    ",
													"    var array=JSON.parse(pm.environment.get(\"ruleLineItemId\"));",
													"    ",
													"     pm.expect((jsonData.notifications[0].ruleLineItemId)).to.eql(array);",
													"",
													"    pm.environment.set(\"TotalNudgesenttoentity\",size1);",
													"  ",
													"   console.log( \" [PRE-NAT] Third nudge of entity is associated with  rulelineitemId : \"+pm.variables.get(\"ruleLineItemId\") );",
													"    ",
													"",
													"",
													"});",
													"",
													"pm.test(\"Nudge delivery Verification\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.notifications[0].messageContent).to.eql(\"\");",
													"    pm.expect(jsonData.notifications[0].mobileNumber).to.eql(\"\");",
													"    ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/api/NotificationMessageProcessor/SearchMessageSentViaRule?entityId={{entityId}}&ruleId={{ruleId}}&ruleLineItemId={{ruleLineItemId}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"NotificationMessageProcessor",
												"SearchMessageSentViaRule"
											],
											"query": [
												{
													"key": "entityId",
													"value": "{{entityId}}"
												},
												{
													"key": "ruleId",
													"value": "{{ruleId}}"
												},
												{
													"key": "ruleLineItemId",
													"value": "{{ruleLineItemId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[241] 7th change last nudge sent date",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "a66f8df1-605f-4640-aa35-cd0d72b96dff",
												"exec": [
													"var moment = require('moment');",
													"pm.environment.set(\"pickUpTime\", moment().subtract(2, 'days').format(\"YYYY-MM-DDThh:mm:ss.SSS\")) ;",
													"console.log(pm.variables.get(\"pickUpTime\"));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "8e5a4bf6-25c0-402b-9cea-5fbbd2dfd8cc",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Your test name\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.id).to.exist;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"entityId\": {{entityId}},\r\n  \"ruleId\": {{ruleId}},\r\n  \"ruleLineItemId\": {{ruleLineItemId}},\r\n  \"createdDate\": \"{{pickUpTime}}\"\r\n}"
										},
										"url": {
											"raw": "{{url}}/api/Rule/UpdateEntityRuleMapping",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"Rule",
												"UpdateEntityRuleMapping"
											]
										}
									},
									"response": []
								},
								{
									"name": "[242]read Rule By Rule ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b21dfda3-5d01-4762-bed6-681e39e637c4",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Your test name\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.rule.ruleLineItems[0].id).to.exist;",
													"    pm.environment.set(\"ruleLineItemId\",jsonData.rule.ruleLineItems[6].id);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/api/Rule?ruleId={{ruleId}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"Rule"
											],
											"query": [
												{
													"key": "ruleId",
													"value": "{{ruleId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[243]Trigger RuleExecuteEvent",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "24ac8dfd-18cf-476f-8c08-1bd93aad7e83",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Is Rule Executed\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.eql(true);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/api/RuleExecution?ruleId={{ruleId}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"RuleExecution"
											],
											"query": [
												{
													"key": "ruleId",
													"value": "{{ruleId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[244]TriggerExecuteNotificationMessage",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "24ac8dfd-18cf-476f-8c08-1bd93aad7e83",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Your test name\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.isExecuted).to.eql(true);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/api/JobExecution?jobId=15",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"JobExecution"
											],
											"query": [
												{
													"key": "jobId",
													"value": "15"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[245]4 SearchMessageSentViaRule",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "24ac8dfd-18cf-476f-8c08-1bd93aad7e83",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"to check notifications exist\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.notifications).to.exist;",
													"    var size1 = jsonData.notifications.length;",
													"    console.log( \"notifications array size : \"+size1);",
													"    ",
													"    var array=JSON.parse(pm.environment.get(\"ruleLineItemId\"));",
													"    ",
													"     pm.expect((jsonData.notifications[0].ruleLineItemId)).to.eql(array);",
													"",
													"    pm.environment.set(\"TotalNudgesenttoentity\",size1);",
													"  ",
													"   ",
													"    ",
													"",
													"",
													"});",
													"pm.test(\"Nudge delivery Verification\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.notifications[0].messageContent).to.eql(\"\");",
													"    pm.expect(jsonData.notifications[0].mobileNumber).to.eql(\"\");",
													"    ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/api/NotificationMessageProcessor/SearchMessageSentViaRule?entityId={{entityId}}&ruleId={{ruleId}}&ruleLineItemId={{ruleLineItemId}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"NotificationMessageProcessor",
												"SearchMessageSentViaRule"
											],
											"query": [
												{
													"key": "entityId",
													"value": "{{entityId}}"
												},
												{
													"key": "ruleId",
													"value": "{{ruleId}}"
												},
												{
													"key": "ruleLineItemId",
													"value": "{{ruleLineItemId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[247]4 SearchMessageSentViaRule (count total nudge to entity)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "24ac8dfd-18cf-476f-8c08-1bd93aad7e83",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"to check notifications exist\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.notifications).to.exist;",
													"    var size1 = jsonData.notifications.length;",
													"    console.log( \"total nudges sent to entity : \"+size1);",
													"     ",
													"    pm.environment.set(\"TotalNudgesenttoentity\",size1);",
													"    pm.expect(pm.variables.get(\"TotalNudgesenttoentity\")).to.eql(7);",
													"",
													"    //var count=0;",
													"    pm.test(\"ruleLineItemId\", function () {",
													"     for ( var i=0;i<pm.variables.get(\"TotalNudgesenttoentity\");i++){",
													"",
													"   if((jsonData.notifications[i].ruleLineItemId)==(pm.environment.get(\"ruleLineItemId\"))){",
													"  ",
													"    console.log( \"[PRE-NAT]last nudge of entity is associated with  rulelineitemId : \"+pm.variables.get(\"ruleLineItemId\") );",
													"",
													"}",
													"    }",
													"   ",
													"    ",
													"    ",
													"    });",
													"    ",
													"    ",
													"",
													"",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/api/NotificationMessageProcessor/SearchMessageSentViaRule?entityId={{entityId}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"NotificationMessageProcessor",
												"SearchMessageSentViaRule"
											],
											"query": [
												{
													"key": "entityId",
													"value": "{{entityId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[248]notificationMessageProcessorHistory",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "24ac8dfd-18cf-476f-8c08-1bd93aad7e83",
												"exec": [
													"pm.test(\"status code 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    ",
													"",
													"    ",
													"});",
													"",
													"pm.test(\"extract message\", function () {",
													"    ",
													"    console.log(\"Nudge Details:\");",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.notificationMessageProcessorHistoryRecords).to.exist;",
													"    var size = jsonData.notificationMessageProcessorHistoryRecords.length;",
													"    pm.environment.set(\"messageContent\",jsonData.notificationMessageProcessorHistoryRecords[0].messageContent);",
													"    ",
													"    var count=0;",
													"     for ( var i=0;i<size;i++){",
													"   if((jsonData.notificationMessageProcessorHistoryRecords[i].mobileNumber)==(pm.environment.get(\"MobileNuber\"))){",
													"  ",
													"   count++;",
													"   ",
													"pm.environment.set(\"TotalNudgesenttoMobilenum\",count );",
													"   ",
													"// pm.environment.set(\"messageContent\",jsonData.notificationMessageProcessorHistoryRecords[0].messageContent);",
													"",
													"pm.environment.set(\"NudgeReceivedVia_NotificationChannelType\",jsonData.notificationMessageProcessorHistoryRecords[i].notificationChannelTypeId);",
													"console.log(\"nudgeNudgeReceivedVia_NotificationChannelType :\" +pm.variables.get(\"NudgeReceivedVia_NotificationChannelType\"));",
													"",
													"}",
													"   ",
													"    }",
													"    console.log(\"Number of nudges sent to mobile num  : \"+pm.variables.get(\"TotalNudgesenttoMobilenum\"));",
													"",
													"});",
													"",
													"pm.test(\"extract bitly url\",function(){",
													"",
													"var string = pm.variables.get(\"messageContent\");",
													"var bitly = string.match(/\\bhttps?:\\/\\/\\S+/gi);",
													"pm.environment.set(\"bitly\",bitly);",
													"console.log(bitly);",
													" ",
													"",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "308a3958-7fc4-4416-b794-eac8c0849b9e",
												"exec": [
													"pm.environment.set(\"TotalNudgesenttoMobilenum\",0);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/api/NotificationMessageProcessedHistory",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"NotificationMessageProcessedHistory"
											]
										}
									},
									"response": []
								},
								{
									"name": "[249] 8th change last nudge sent date",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "a66f8df1-605f-4640-aa35-cd0d72b96dff",
												"exec": [
													"var moment = require('moment');",
													"pm.environment.set(\"pickUpTime\", moment().subtract(2, 'days').format(\"YYYY-MM-DDThh:mm:ss.SSS\")) ;",
													"console.log(pm.variables.get(\"pickUpTime\"));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "8e5a4bf6-25c0-402b-9cea-5fbbd2dfd8cc",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Your test name\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.id).to.exist;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"entityId\": {{entityId}},\r\n  \"ruleId\": {{ruleId}},\r\n  \"ruleLineItemId\": {{ruleLineItemId}},\r\n  \"createdDate\": \"{{pickUpTime}}\"\r\n}"
										},
										"url": {
											"raw": "{{url}}/api/Rule/UpdateEntityRuleMapping",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"Rule",
												"UpdateEntityRuleMapping"
											]
										}
									},
									"response": []
								},
								{
									"name": "[250]Trigger RuleExecuteEvent",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "24ac8dfd-18cf-476f-8c08-1bd93aad7e83",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Is Rule Executed\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.eql(true);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/api/RuleExecution?ruleId={{ruleId}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"RuleExecution"
											],
											"query": [
												{
													"key": "ruleId",
													"value": "{{ruleId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[251]Trigger RuleExecuteEvent",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "24ac8dfd-18cf-476f-8c08-1bd93aad7e83",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Is Rule Executed\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.eql(true);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/api/RuleExecution?ruleId={{ruleId}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"RuleExecution"
											],
											"query": [
												{
													"key": "ruleId",
													"value": "{{ruleId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[252]TriggerExecuteNotificationMessage",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "24ac8dfd-18cf-476f-8c08-1bd93aad7e83",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Your test name\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.isExecuted).to.eql(true);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/api/JobExecution?jobId=15",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"JobExecution"
											],
											"query": [
												{
													"key": "jobId",
													"value": "15"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[253]4 SearchMessageSentViaRule",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "24ac8dfd-18cf-476f-8c08-1bd93aad7e83",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"to check notifications exist\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.notifications).to.exist;",
													"    var size1 = jsonData.notifications.length;",
													"    console.log( \"notifications array size : \"+size1);",
													"    ",
													"    var array=JSON.parse(pm.environment.get(\"ruleLineItemId\"));",
													"    ",
													"     pm.expect((jsonData.notifications[0].ruleLineItemId)).to.eql(array);",
													"",
													"    pm.environment.set(\"TotalNudgesenttoentity\",size1);",
													"  ",
													"   ",
													"    ",
													"",
													"",
													"});",
													"pm.test(\"Nudge delivery Verification\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.notifications[0].messageContent).to.eql(\"\");",
													"    pm.expect(jsonData.notifications[0].mobileNumber).to.eql(\"\");",
													"    ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/api/NotificationMessageProcessor/SearchMessageSentViaRule?entityId={{entityId}}&ruleId={{ruleId}}&ruleLineItemId={{ruleLineItemId}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"NotificationMessageProcessor",
												"SearchMessageSentViaRule"
											],
											"query": [
												{
													"key": "entityId",
													"value": "{{entityId}}"
												},
												{
													"key": "ruleId",
													"value": "{{ruleId}}"
												},
												{
													"key": "ruleLineItemId",
													"value": "{{ruleLineItemId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[254]4 SearchMessageSentViaRule (count total nudge to entity)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "24ac8dfd-18cf-476f-8c08-1bd93aad7e83",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"to check notifications exist\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.notifications).to.exist;",
													"    var size1 = jsonData.notifications.length;",
													"    console.log( \"total nudges sent to entity : \"+size1);",
													"     ",
													"    pm.environment.set(\"TotalNudgesenttoentity\",size1);",
													"    pm.expect(pm.variables.get(\"TotalNudgesenttoentity\")).to.eql(8);",
													"",
													"    //var count=0;",
													"    pm.test(\"ruleLineItemId\", function () {",
													"     for ( var i=0;i<pm.variables.get(\"TotalNudgesenttoentity\");i++){",
													"",
													"   if((jsonData.notifications[i].ruleLineItemId)==(pm.environment.get(\"ruleLineItemId\"))){",
													"  ",
													"    console.log( \"[PRE-NAT]last nudge of entity is associated with  rulelineitemId : \"+pm.variables.get(\"ruleLineItemId\") );",
													"",
													"}",
													"    }",
													"   ",
													"    ",
													"    ",
													"    });",
													"    ",
													"    ",
													"",
													"",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/api/NotificationMessageProcessor/SearchMessageSentViaRule?entityId={{entityId}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"NotificationMessageProcessor",
												"SearchMessageSentViaRule"
											],
											"query": [
												{
													"key": "entityId",
													"value": "{{entityId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[255]notificationMessageProcessorHistory",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "24ac8dfd-18cf-476f-8c08-1bd93aad7e83",
												"exec": [
													"pm.test(\"status code 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    ",
													"",
													"    ",
													"});",
													"",
													"pm.test(\"extract message\", function () {",
													"    ",
													"    console.log(\"Nudge Details:\");",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.notificationMessageProcessorHistoryRecords).to.exist;",
													"    var size = jsonData.notificationMessageProcessorHistoryRecords.length;",
													"    pm.environment.set(\"messageContent\",jsonData.notificationMessageProcessorHistoryRecords[0].messageContent);",
													"    ",
													"    var count=0;",
													"     for ( var i=0;i<size;i++){",
													"   if((jsonData.notificationMessageProcessorHistoryRecords[i].mobileNumber)==(pm.environment.get(\"mobileNumber\"))){",
													"  ",
													"   count++;",
													"   ",
													"pm.environment.set(\"TotalNudgesenttoMobilenum\",count );",
													"   ",
													"// pm.environment.set(\"messageContent\",jsonData.notificationMessageProcessorHistoryRecords[0].messageContent);",
													"",
													"pm.environment.set(\"NudgeReceivedVia_NotificationChannelType\",jsonData.notificationMessageProcessorHistoryRecords[i].notificationChannelTypeId);",
													"console.log(\"nudgeNudgeReceivedVia_NotificationChannelType :\" +pm.variables.get(\"NudgeReceivedVia_NotificationChannelType\"));",
													"",
													"}",
													"   ",
													"    }",
													"    console.log(\"Number of nudges sent to mobile num  : \"+pm.variables.get(\"TotalNudgesenttoMobilenum\"));",
													"",
													"});",
													"",
													"pm.test(\"extract bitly url\",function(){",
													"",
													"var string = pm.variables.get(\"messageContent\");",
													"var bitly = string.match(/\\bhttps?:\\/\\/\\S+/gi);",
													"pm.environment.set(\"bitly\",bitly);",
													"console.log(bitly);",
													" ",
													"",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "308a3958-7fc4-4416-b794-eac8c0849b9e",
												"exec": [
													"pm.environment.set(\"TotalNudgesenttoMobilenum\",0);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/api/NotificationMessageProcessedHistory",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"NotificationMessageProcessedHistory"
											]
										}
									},
									"response": []
								},
								{
									"name": "[256]click on bitly link",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "24ac8dfd-18cf-476f-8c08-1bd93aad7e83",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{bitly}}",
											"host": [
												"{{bitly}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "[257]Trigger NudgeInteractionAnalytics",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "24ac8dfd-18cf-476f-8c08-1bd93aad7e83",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Your test name\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.isExecuted).to.eql(true);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/api/JobExecution?jobId=17",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"JobExecution"
											],
											"query": [
												{
													"key": "jobId",
													"value": "17"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[258]read data like URL is clicked (true)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0822a3c8-02fb-46f7-a903-c7a96a6fe942",
												"exec": [
													"pm.test(\"Status code 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Bitly  is  clicked \", function () {",
													"    var jsonData = pm.response.json();",
													"    var X = JSON.parse(jsonData.nudgeInteractionDetails[0].entityId);",
													"    pm.expect(jsonData.nudgeInteractionDetails[0].entityId).to.eql(X);",
													"    pm.expect(jsonData.nudgeInteractionDetails[0].isLinkClicked).to.eql(true);",
													"   ",
													"",
													"   console.log(\"Nudge System has captured Bitly analytics as TRUE \");",
													"",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/api/Entity/ReadNudgeInteraction?entitySourceSystemId={{entitySourceSystemId}}&entityCode={{entityCode}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"Entity",
												"ReadNudgeInteraction"
											],
											"query": [
												{
													"key": "entitySourceSystemId",
													"value": "{{entitySourceSystemId}}"
												},
												{
													"key": "entityCode",
													"value": "{{entityCode}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[252]Delete Rule",
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{url}}/api/Rule?ruleId={{ruleId}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"Rule"
											],
											"query": [
												{
													"key": "ruleId",
													"value": "{{ruleId}}"
												}
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "f3db1086-b756-4b8f-a6af-069357e13c1d",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "8aff3ff8-0fef-4729-a292-eed11c5dcb57",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "aadfee2c-ff32-492a-925e-b48767c70aed",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "e54896c3-b4c8-4fb0-8369-7dcbb495f5d3",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "PWT_Pre_Exam ",
					"item": [
						{
							"name": "EXAM_1-4 nudges",
							"item": [
								{
									"name": "[301] [PWT PRE-EXAM] craete Rule******",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9b7b9e2e-8674-4d11-b9c2-de3b5c25dc3f",
												"exec": [
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(201);",
													"     var jsonData = pm.response.json();",
													"     pm.environment.set(\"ruleId\", jsonData.ruleId);",
													"     ",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "32b12f40-9524-4575-b139-a0eb48160d73",
												"exec": [
													"pm.environment.set(\"entitySourceSystemId\",1);",
													"pm.environment.set(\"entityStateType\",1);",
													"pm.environment.set(\"entitySubStateType\",3);",
													"//pm.environment.set(\"notificationMessageTemplateId\",1);",
													"console.log(\"STARTED: ***********PWT_RULES_by_createEntity/PRE-EXAM********************************\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"rule\": {\r\n    \"id\": 0,\r\n    \"name\": \" PWT pre-exam \",\r\n    \"description\": \"Prospect_Warming_tool pre exam \",\r\n    \"ruleType\": 2,\r\n     \"frequencyType\": 1,\r\n    \"entitySourceSystemId\": {{entitySourceSystemId}},\r\n    \"entityStateType\": {{entityStateType}},\r\n    \"entitySubStateType\": {{entitySubStateType}},\r\n     \"ruleFrequencies\": [\r\n      {\r\n        \"id\": 0,\r\n        \"hour\": 0,\r\n        \"minute\": 15\r\n      }\r\n    ],\r\n     \"ruleLineItems\": [\r\n      {\r\n        \"id\": 0,\r\n        \"ruleLineItemType\": 1,\r\n        \"name\": \"PreExam 1st nudge\",\r\n        \"parentId\": \"0\",\r\n        \"sequence\": 1,\r\n        \"sendToPrimary\": true,\r\n        \"intendedPositiveOutput\": \"1st Nudge\",\r\n        \"ruleLineItemConditions\": [\r\n          {\r\n            \"value\": \"2\",\r\n            \"logicalOperatorType\": 1,\r\n            \"sequence\": 1,\r\n            \"ruleCategoryId\": 10,\r\n            \"mathOperatorOnValue\": 1\r\n          }\r\n        ],\r\n        \"ruleLineItemResults\": [\r\n          {\r\n            \"notificationChannelType\": 2,\r\n            \"notificationMessageTemplateId\": {{notificationMessageTemplateId1}},\r\n            \"isSMSAsFallBack\": true\r\n          }\r\n        ]\r\n      },\r\n\t   {\r\n        \"id\": 0,\r\n        \"ruleLineItemType\": 1,\r\n        \"name\": \"PreExam 2nd nudge\",\r\n        \"parentId\": \"0\",\r\n        \"sequence\": 2,\r\n        \"sendToPrimary\": true,\r\n        \"intendedPositiveOutput\": \"2nd Nudge\",\r\n        \"ruleLineItemConditions\": [\r\n          {\r\n            \"value\": \"2\",\r\n            \"logicalOperatorType\": 1,\r\n            \"sequence\": 1,\r\n            \"ruleCategoryId\": 11,\r\n            \"mathOperatorOnValue\": 1\r\n          }\r\n        ],\r\n        \"ruleLineItemResults\": [\r\n          {\r\n            \"notificationChannelType\": 2,\r\n            \"notificationMessageTemplateId\": {{notificationMessageTemplateId1}},\r\n            \"isSMSAsFallBack\": true\r\n          }\r\n        ]\r\n      },\r\n\t   {\r\n        \"id\": 0,\r\n        \"ruleLineItemType\": 1,\r\n        \"name\": \"PreExam 3rd nudge\",\r\n        \"parentId\": \"0\",\r\n        \"sequence\": 3,\r\n        \"sendToPrimary\": true,\r\n        \"intendedPositiveOutput\": \"3rd Nudge\",\r\n        \"ruleLineItemConditions\": [\r\n          {\r\n            \"value\": \"2\",\r\n            \"logicalOperatorType\": 1,\r\n            \"sequence\": 1,\r\n            \"ruleCategoryId\": 11,\r\n            \"mathOperatorOnValue\": 1\r\n          }\r\n        ],\r\n        \"ruleLineItemResults\": [\r\n          {\r\n            \"notificationChannelType\": 2,\r\n            \"notificationMessageTemplateId\": {{notificationMessageTemplateId1}},\r\n            \"isSMSAsFallBack\": true\r\n          }\r\n        ]\r\n      },\r\n\t   {\r\n        \"id\": 0,\r\n        \"ruleLineItemType\": 1,\r\n        \"name\": \"PreExam 4th nudge\",\r\n        \"parentId\": \"0\",\r\n        \"sequence\": 4,\r\n        \"sendToPrimary\": true,\r\n        \"intendedPositiveOutput\": \"4th Nudge\",\r\n        \"ruleLineItemConditions\": [\r\n          {\r\n            \"value\": \"2\",\r\n            \"logicalOperatorType\": 1,\r\n            \"sequence\": 1,\r\n            \"ruleCategoryId\": 11,\r\n            \"mathOperatorOnValue\": 1\r\n          }\r\n        ],\r\n        \"ruleLineItemResults\": [\r\n          {\r\n            \"notificationChannelType\": 2,\r\n            \"notificationMessageTemplateId\": {{notificationMessageTemplateId1}},\r\n            \"isSMSAsFallBack\": true\r\n          }\r\n        ]\r\n      },\r\n\t   {\r\n        \"id\": 0,\r\n        \"ruleLineItemType\": 1,\r\n        \"name\": \"PreExam 5th nudge\",\r\n        \"parentId\": \"0\",\r\n        \"sequence\": 5,\r\n        \"sendToPrimary\": true,\r\n        \"intendedPositiveOutput\": \"5th Nudge\",\r\n        \"ruleLineItemConditions\": [\r\n          {\r\n            \"value\": \"2\",\r\n            \"logicalOperatorType\": 1,\r\n            \"sequence\": 1,\r\n            \"ruleCategoryId\": 11,\r\n            \"mathOperatorOnValue\": 1\r\n          }\r\n        ],\r\n        \"ruleLineItemResults\": [\r\n          {\r\n            \"notificationChannelType\": 2,\r\n            \"notificationMessageTemplateId\":{{notificationMessageTemplateId1}},\r\n            \"isSMSAsFallBack\": true\r\n          }\r\n        ]\r\n      },\r\n\t   {\r\n        \"id\": 0,\r\n        \"ruleLineItemType\": 1,\r\n        \"name\": \"PreExam 6th nudge\",\r\n        \"parentId\": \"0\",\r\n        \"sequence\": 6,\r\n        \"sendToPrimary\": true,\r\n        \"intendedPositiveOutput\": \"6th Nudge\",\r\n        \"ruleLineItemConditions\": [\r\n          {\r\n            \"value\": \"2\",\r\n            \"logicalOperatorType\": 1,\r\n            \"sequence\": 1,\r\n            \"ruleCategoryId\": 11,\r\n            \"mathOperatorOnValue\": 1\r\n          }\r\n        ],\r\n        \"ruleLineItemResults\": [\r\n          {\r\n            \"notificationChannelType\": 2,\r\n            \"notificationMessageTemplateId\": {{notificationMessageTemplateId1}},\r\n            \"isSMSAsFallBack\": true\r\n          }\r\n        ]\r\n      },\r\n\t   {\r\n        \"id\": 0,\r\n        \"ruleLineItemType\": 1,\r\n        \"name\": \"PreExam 7th nudge\",\r\n        \"parentId\": \"0\",\r\n        \"sequence\": 7,\r\n        \"sendToPrimary\": true,\r\n        \"intendedPositiveOutput\": \"7th Nudge\",\r\n        \"ruleLineItemConditions\": [\r\n          {\r\n            \"value\": \"2\",\r\n            \"logicalOperatorType\": 1,\r\n            \"sequence\": 1,\r\n            \"ruleCategoryId\": 11,\r\n            \"mathOperatorOnValue\": 1\r\n          }\r\n        ],\r\n        \"ruleLineItemResults\": [\r\n          {\r\n            \"notificationChannelType\": 2,\r\n            \"notificationMessageTemplateId\": {{notificationMessageTemplateId1}},\r\n            \"isSMSAsFallBack\": true\r\n          }\r\n        ]\r\n      },\r\n\t   {\r\n        \"id\": 0,\r\n        \"ruleLineItemType\": 1,\r\n        \"name\": \"PreExam 8th nudge\",\r\n        \"parentId\": \"0\",\r\n        \"sequence\": 8,\r\n        \"sendToPrimary\": true,\r\n        \"intendedPositiveOutput\": \"8th Nudge\",\r\n        \"ruleLineItemConditions\": [\r\n          {\r\n            \"value\": \"2\",\r\n            \"logicalOperatorType\": 1,\r\n            \"sequence\": 1,\r\n            \"ruleCategoryId\": 11,\r\n            \"mathOperatorOnValue\": 1\r\n          }\r\n        ],\r\n        \"ruleLineItemResults\": [\r\n          {\r\n            \"notificationChannelType\": 2,\r\n            \"notificationMessageTemplateId\": {{notificationMessageTemplateId1}},\r\n            \"isSMSAsFallBack\": true\r\n          }\r\n        ]\r\n      },\r\n\t   {\r\n        \"id\": 0,\r\n        \"ruleLineItemType\": 3,\r\n        \"name\": \"PreExam end line\",\r\n        \"parentId\": \"0\",\r\n        \"sequence\": 9,\r\n        \"sendToPrimary\": true,\r\n        \"intendedPositiveOutput\": \"End line item\",\r\n        \"ruleLineItemConditions\": [\r\n          {\r\n            \"value\": \"2\",\r\n            \"logicalOperatorType\": 1,\r\n            \"sequence\": 1,\r\n            \"ruleCategoryId\": 11,\r\n            \"mathOperatorOnValue\": 1\r\n          }\r\n        ],\r\n        \"ruleLineItemResults\": [\r\n          {\r\n            \"notificationChannelType\": 2,\r\n            \"notificationMessageTemplateId\": {{notificationMessageTemplateId1}},\r\n            \"isSMSAsFallBack\": true\r\n          }\r\n        ]\r\n      }\r\n    ]\r\n  }\r\n}"
										},
										"url": {
											"raw": "{{url}}/api/Rule",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"Rule"
											]
										}
									},
									"response": []
								},
								{
									"name": "[302]read Rule By Rule ID Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b21dfda3-5d01-4762-bed6-681e39e637c4",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Read Rule\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.rule.ruleLineItems[0].id).to.exist;",
													"    pm.environment.set(\"ruleLineItemId\",jsonData.rule.ruleLineItems[0].id);",
													"    var size = jsonData.rule.ruleLineItems.length;",
													"    pm.environment.set(\"totalrulelineitems\",size-1);",
													"",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/api/Rule?ruleId={{ruleId}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"Rule"
											],
											"query": [
												{
													"key": "ruleId",
													"value": "{{ruleId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[303]create entity",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b45ca225-09f2-4fd4-a05e-4c3d13a6dbf0",
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"   ",
													"    let EntityJSON = pm.response.json();",
													"    pm.expect(EntityJSON.entityId).to.exist;",
													"    pm.expect(EntityJSON.isSaved).to.equal(true);",
													"     pm.environment.set(\"entityId\", EntityJSON.entityId);",
													"    console.log(EntityJSON);",
													"});",
													"",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "0e9b9ca9-9c49-46e8-ac8c-768fb21ce4b8",
												"exec": [
													"var milliseconds = new Date().getTime();",
													"var codeSeed = \"Auto-\";",
													"pm.environment.set(\"entityCode\", codeSeed.concat(milliseconds));",
													"",
													"",
													"var codeSeed = \"Auto2nd-\";",
													"pm.environment.set(\"secondaryEntityCode\", codeSeed.concat(milliseconds));",
													"",
													"var moment = require('moment');",
													"pm.environment.set(\"timestamp\", moment().format(\"YYYY-MM-DDThh:mm:ss.SSS\"))   ;",
													"console.log(pm.variables.get(\"timestamp\"));",
													"",
													"",
													"var moment = require('moment');",
													"pm.environment.set(\"pickUpTime\", moment().subtract(2, 'days').format(\"YYYY-MM-DDThh:mm:ss.SSS\")) ;",
													"console.log(pm.variables.get(\"pickUpTime\"));",
													"",
													"// let ran =  _.random(1111111111, 9999999999);",
													"// pm.environment.set(\"mobileNumberEXAM\",ran);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"id\": 0,\r\n  \"entityCode\": \"{{entityCode}}\",\r\n  \"name\": \"{{name}}\",\r\n  \"mobileNumber\": {{mobileNumberEXAM}},\r\n  \"entityCreationDate\": \"{{timestamp}}\",\r\n  \"entitySourceSystemId\": {{entitySourceSystemId}},\r\n  \"entityStateDate\": \"{{pickUpTime}}\",\r\n  \"entityStateType\": {{entityStateType}},\r\n  \"entitySubStateType\":{{entitySubStateType}},\r\n  \"entityStateValue\": \" {{entityStateValue}} \",\r\n  \"secondaryEntityCode\": \"{{secondaryEntityCode}}\",\r\n  \"secondaryName\": \"{{secondaryName}}\",\r\n  \"secondaryMobileNumber\": {{secondaryMobileNumber}},\r\n  \"entitySegmentTypeId\": {{entitySegmentTypeId}},\r\n  \"languageTypeId\": {{languageTypeId}}\r\n}\r\n"
										},
										"url": {
											"raw": "{{url}}/api/Entity",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"Entity"
											]
										}
									},
									"response": []
								},
								{
									"name": "[304]read entity by entityId",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "24ac8dfd-18cf-476f-8c08-1bd93aad7e83",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"verify mobile number\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mobileNumber).to.eql(pm.variables.get(\"mobileNumberEXAM\"));",
													"    pm.environment.set(\"mobileNumber\",jsonData.mobileNumber);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/api/Entity?entityId={{entityId}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"Entity"
											],
											"query": [
												{
													"key": "entityId",
													"value": "{{entityId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[305]Trigger RuleExecuteEvent",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "24ac8dfd-18cf-476f-8c08-1bd93aad7e83",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Is Rule Executed\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.eql(true);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/api/RuleExecution?ruleId={{ruleId}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"RuleExecution"
											],
											"query": [
												{
													"key": "ruleId",
													"value": "{{ruleId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[306]TriggerExecuteNotificationMessage",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "24ac8dfd-18cf-476f-8c08-1bd93aad7e83",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Your test name\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.isExecuted).to.eql(true);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/api/JobExecution?jobId=15",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"JobExecution"
											],
											"query": [
												{
													"key": "jobId",
													"value": "15"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[307]SearchMessageSentViaRule",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "24ac8dfd-18cf-476f-8c08-1bd93aad7e83",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"to check notifications exist\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.notifications).to.exist;",
													"    var size1 = jsonData.notifications.length;",
													"  ",
													"    ",
													"    var array=JSON.parse(pm.environment.get(\"ruleLineItemId\"));",
													"    ",
													"     pm.expect((jsonData.notifications[0].ruleLineItemId)).to.eql(array);",
													"",
													"    pm.environment.set(\"TotalNudgesenttoentity\",size1);",
													"  ",
													"    console.log( \"[Pre-Exam] first nudge of entity is associated with  rulelineitemId : \"+pm.variables.get(\"ruleLineItemId\") );",
													"",
													"",
													"});",
													"",
													"pm.test(\"Nudge delivery Verification\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.notifications[0].messageContent).to.eql(\"\");",
													"    pm.expect(jsonData.notifications[0].mobileNumber).to.eql(\"\");",
													"    ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/api/NotificationMessageProcessor/SearchMessageSentViaRule?entityId={{entityId}}&ruleId={{ruleId}}&ruleLineItemId={{ruleLineItemId}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"NotificationMessageProcessor",
												"SearchMessageSentViaRule"
											],
											"query": [
												{
													"key": "entityId",
													"value": "{{entityId}}"
												},
												{
													"key": "ruleId",
													"value": "{{ruleId}}"
												},
												{
													"key": "ruleLineItemId",
													"value": "{{ruleLineItemId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[308]Trigger NudgeInteractionAnalytics",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "24ac8dfd-18cf-476f-8c08-1bd93aad7e83",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Your test name\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.isExecuted).to.eql(true);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/api/JobExecution?jobId=17",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"JobExecution"
											],
											"query": [
												{
													"key": "jobId",
													"value": "17"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[309]read data like URL is clicked",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0822a3c8-02fb-46f7-a903-c7a96a6fe942",
												"exec": [
													"pm.test(\"Status code 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Bitly is not cllicked \", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.nudgeInteractionDetails[0].entityId).to.eql(pm.variables.get(\"entityId\"));",
													"    pm.expect(jsonData.nudgeInteractionDetails[0].isLinkClicked).to.eql(false);",
													"    pm.expect(jsonData.nudgeInteractionDetails[0].canBeMarkedAs).to.eql(\"No response\");",
													"",
													"",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/api/Entity/ReadNudgeInteraction?entitySourceSystemId={{entitySourceSystemId}}&entityCode={{entityCode}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"Entity",
												"ReadNudgeInteraction"
											],
											"query": [
												{
													"key": "entitySourceSystemId",
													"value": "{{entitySourceSystemId}}"
												},
												{
													"key": "entityCode",
													"value": "{{entityCode}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[310] 1st change last nudge sent date",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "a66f8df1-605f-4640-aa35-cd0d72b96dff",
												"exec": [
													"var moment = require('moment');",
													"pm.environment.set(\"pickUpTime\", moment().subtract(2, 'days').format(\"YYYY-MM-DDThh:mm:ss.SSS\")) ;",
													"console.log(pm.variables.get(\"pickUpTime\"));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "23d9c19d-f037-4abd-9ce9-a7494827aacd",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Your test name\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.id).to.exist;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"entityId\": {{entityId}},\r\n  \"ruleId\": {{ruleId}},\r\n  \"ruleLineItemId\": {{ruleLineItemId}},\r\n  \"createdDate\": \"{{pickUpTime}}\"\r\n}"
										},
										"url": {
											"raw": "{{url}}/api/Rule/UpdateEntityRuleMapping",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"Rule",
												"UpdateEntityRuleMapping"
											]
										}
									},
									"response": []
								},
								{
									"name": "[311]read Rule By Rule ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b21dfda3-5d01-4762-bed6-681e39e637c4",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Your test name\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.rule.ruleLineItems[0].id).to.exist;",
													"    pm.environment.set(\"ruleLineItemId\",jsonData.rule.ruleLineItems[1].id);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/api/Rule?ruleId={{ruleId}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"Rule"
											],
											"query": [
												{
													"key": "ruleId",
													"value": "{{ruleId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[312]Trigger RuleExecuteEvent",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "24ac8dfd-18cf-476f-8c08-1bd93aad7e83",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Is Rule Executed\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.eql(true);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/api/RuleExecution?ruleId={{ruleId}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"RuleExecution"
											],
											"query": [
												{
													"key": "ruleId",
													"value": "{{ruleId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[313] TriggerExecuteNotificationMessage",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "24ac8dfd-18cf-476f-8c08-1bd93aad7e83",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Your test name\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.isExecuted).to.eql(true);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/api/JobExecution?jobId=15",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"JobExecution"
											],
											"query": [
												{
													"key": "jobId",
													"value": "15"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[314] SearchMessageSentViaRule",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "24ac8dfd-18cf-476f-8c08-1bd93aad7e83",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"to check notifications exist\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.notifications).to.exist;",
													"    var size1 = jsonData.notifications.length;",
													"   ",
													"    ",
													"    var array=JSON.parse(pm.environment.get(\"ruleLineItemId\"));",
													"    ",
													"     pm.expect((jsonData.notifications[0].ruleLineItemId)).to.eql(array);",
													"",
													"    pm.environment.set(\"TotalNudgesenttoentity\",size1);",
													"  ",
													"   ",
													"     console.log( \" [Pre-Exam] Second nudge of entity is associated with  rulelineitemId : \"+pm.variables.get(\"ruleLineItemId\") );",
													"",
													"",
													"",
													"});",
													"",
													"pm.test(\"Nudge delivery Verification\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.notifications[0].messageContent).to.eql(\"\");",
													"    pm.expect(jsonData.notifications[0].mobileNumber).to.eql(\"\");",
													"    ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/api/NotificationMessageProcessor/SearchMessageSentViaRule?entityId={{entityId}}&ruleId={{ruleId}}&ruleLineItemId={{ruleLineItemId}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"NotificationMessageProcessor",
												"SearchMessageSentViaRule"
											],
											"query": [
												{
													"key": "entityId",
													"value": "{{entityId}}"
												},
												{
													"key": "ruleId",
													"value": "{{ruleId}}"
												},
												{
													"key": "ruleLineItemId",
													"value": "{{ruleLineItemId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[315] Trigger NudgeInteractionAnalytics",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "24ac8dfd-18cf-476f-8c08-1bd93aad7e83",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Your test name\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.isExecuted).to.eql(true);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/api/JobExecution?jobId=17",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"JobExecution"
											],
											"query": [
												{
													"key": "jobId",
													"value": "17"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[316] read data like URL is clicked",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0822a3c8-02fb-46f7-a903-c7a96a6fe942",
												"exec": [
													"pm.test(\"Status code 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Bitly is not cllicked \", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.nudgeInteractionDetails[0].entityId).to.eql(pm.variables.get(\"entityId\"));",
													"    pm.expect(jsonData.nudgeInteractionDetails[0].isLinkClicked).to.eql(false);",
													"    pm.expect(jsonData.nudgeInteractionDetails[0].canBeMarkedAs).to.eql(\"No response\");",
													"",
													"",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/api/Entity/ReadNudgeInteraction?entitySourceSystemId={{entitySourceSystemId}}&entityCode={{entityCode}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"Entity",
												"ReadNudgeInteraction"
											],
											"query": [
												{
													"key": "entitySourceSystemId",
													"value": "{{entitySourceSystemId}}"
												},
												{
													"key": "entityCode",
													"value": "{{entityCode}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[317] 2nd change last nudge sent date",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "a66f8df1-605f-4640-aa35-cd0d72b96dff",
												"exec": [
													"var moment = require('moment');",
													"pm.environment.set(\"pickUpTime\", moment().subtract(2, 'days').format(\"YYYY-MM-DDThh:mm:ss.SSS\")) ;",
													"console.log(pm.variables.get(\"pickUpTime\"));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "357de4ea-0342-4ae4-b704-9433175072c0",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Your test name\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.id).to.exist;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"entityId\": {{entityId}},\r\n  \"ruleId\": {{ruleId}},\r\n  \"ruleLineItemId\": {{ruleLineItemId}},\r\n  \"createdDate\": \"{{pickUpTime}}\"\r\n}"
										},
										"url": {
											"raw": "{{url}}/api/Rule/UpdateEntityRuleMapping",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"Rule",
												"UpdateEntityRuleMapping"
											]
										}
									},
									"response": []
								},
								{
									"name": "[318]read Rule By Rule ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b21dfda3-5d01-4762-bed6-681e39e637c4",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Your test name\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.rule.ruleLineItems[0].id).to.exist;",
													"    pm.environment.set(\"ruleLineItemId\",jsonData.rule.ruleLineItems[2].id);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/api/Rule?ruleId={{ruleId}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"Rule"
											],
											"query": [
												{
													"key": "ruleId",
													"value": "{{ruleId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[319]Trigger RuleExecuteEvent",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "24ac8dfd-18cf-476f-8c08-1bd93aad7e83",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Is Rule Executed\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.eql(true);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/api/RuleExecution?ruleId={{ruleId}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"RuleExecution"
											],
											"query": [
												{
													"key": "ruleId",
													"value": "{{ruleId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[320] TriggerExecuteNotificationMessage",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "24ac8dfd-18cf-476f-8c08-1bd93aad7e83",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Your test name\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.isExecuted).to.eql(true);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/api/JobExecution?jobId=15",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"JobExecution"
											],
											"query": [
												{
													"key": "jobId",
													"value": "15"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[321] SearchMessageSentViaRule",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "24ac8dfd-18cf-476f-8c08-1bd93aad7e83",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"to check notifications exist\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.notifications).to.exist;",
													"    var size1 = jsonData.notifications.length;",
													"    console.log( \"notifications array size : \"+size1);",
													"    ",
													"    var array=JSON.parse(pm.environment.get(\"ruleLineItemId\"));",
													"    ",
													"     pm.expect((jsonData.notifications[0].ruleLineItemId)).to.eql(array);",
													"",
													"    pm.environment.set(\"TotalNudgesenttoentity\",size1);",
													"  ",
													"   console.log( \" [Pre-Exam] Third nudge of entity is associated with  rulelineitemId : \"+pm.variables.get(\"ruleLineItemId\") );",
													"    ",
													"});",
													"",
													"pm.test(\"Nudge delivery Verification\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.notifications[0].messageContent).to.eql(\"\");",
													"    pm.expect(jsonData.notifications[0].mobileNumber).to.eql(\"\");",
													"    ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/api/NotificationMessageProcessor/SearchMessageSentViaRule?entityId={{entityId}}&ruleId={{ruleId}}&ruleLineItemId={{ruleLineItemId}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"NotificationMessageProcessor",
												"SearchMessageSentViaRule"
											],
											"query": [
												{
													"key": "entityId",
													"value": "{{entityId}}"
												},
												{
													"key": "ruleId",
													"value": "{{ruleId}}"
												},
												{
													"key": "ruleLineItemId",
													"value": "{{ruleLineItemId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[322] 3rd change last nudge sent date",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "a66f8df1-605f-4640-aa35-cd0d72b96dff",
												"exec": [
													"var moment = require('moment');",
													"pm.environment.set(\"pickUpTime\", moment().subtract(2, 'days').format(\"YYYY-MM-DDThh:mm:ss.SSS\")) ;",
													"console.log(pm.variables.get(\"pickUpTime\"));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "8e5a4bf6-25c0-402b-9cea-5fbbd2dfd8cc",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Your test name\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.id).to.exist;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"entityId\": {{entityId}},\r\n  \"ruleId\": {{ruleId}},\r\n  \"ruleLineItemId\": {{ruleLineItemId}},\r\n  \"createdDate\": \"{{pickUpTime}}\"\r\n}"
										},
										"url": {
											"raw": "{{url}}/api/Rule/UpdateEntityRuleMapping",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"Rule",
												"UpdateEntityRuleMapping"
											]
										}
									},
									"response": []
								},
								{
									"name": "[323]read Rule By Rule ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b21dfda3-5d01-4762-bed6-681e39e637c4",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Your test name\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.rule.ruleLineItems[0].id).to.exist;",
													"    pm.environment.set(\"ruleLineItemId\",jsonData.rule.ruleLineItems[3].id);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/api/Rule?ruleId={{ruleId}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"Rule"
											],
											"query": [
												{
													"key": "ruleId",
													"value": "{{ruleId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[324]Trigger RuleExecuteEvent",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "24ac8dfd-18cf-476f-8c08-1bd93aad7e83",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Is Rule Executed\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.eql(true);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/api/RuleExecution?ruleId={{ruleId}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"RuleExecution"
											],
											"query": [
												{
													"key": "ruleId",
													"value": "{{ruleId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[325]TriggerExecuteNotificationMessage",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "24ac8dfd-18cf-476f-8c08-1bd93aad7e83",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Your test name\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.isExecuted).to.eql(true);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/api/JobExecution?jobId=15",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"JobExecution"
											],
											"query": [
												{
													"key": "jobId",
													"value": "15"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[326]4 SearchMessageSentViaRule",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "24ac8dfd-18cf-476f-8c08-1bd93aad7e83",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"to check notifications exist\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.notifications).to.exist;",
													"    var size1 = jsonData.notifications.length;",
													"    console.log( \"notifications array size : \"+size1);",
													"    ",
													"    var array=JSON.parse(pm.environment.get(\"ruleLineItemId\"));",
													"    ",
													"     pm.expect((jsonData.notifications[0].ruleLineItemId)).to.eql(array);",
													"",
													"    pm.environment.set(\"TotalNudgesenttoentity\",size1);",
													"  ",
													"   ",
													"    ",
													"",
													"",
													"});",
													"pm.test(\"Nudge delivery Verification\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.notifications[0].messageContent).to.eql(\"\");",
													"    pm.expect(jsonData.notifications[0].mobileNumber).to.eql(\"\");",
													"    ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/api/NotificationMessageProcessor/SearchMessageSentViaRule?entityId={{entityId}}&ruleId={{ruleId}}&ruleLineItemId={{ruleLineItemId}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"NotificationMessageProcessor",
												"SearchMessageSentViaRule"
											],
											"query": [
												{
													"key": "entityId",
													"value": "{{entityId}}"
												},
												{
													"key": "ruleId",
													"value": "{{ruleId}}"
												},
												{
													"key": "ruleLineItemId",
													"value": "{{ruleLineItemId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[328]4 SearchMessageSentViaRule (count total nudge to entity)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "24ac8dfd-18cf-476f-8c08-1bd93aad7e83",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"to check notifications exist\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.notifications).to.exist;",
													"    var size1 = jsonData.notifications.length;",
													"    console.log( \"total nudges sent to entity : \"+size1);",
													"     ",
													"    pm.environment.set(\"TotalNudgesenttoentity\",size1);",
													"    pm.expect(pm.variables.get(\"TotalNudgesenttoentity\")).to.eql(4);",
													"",
													"    //var count=0;",
													"    pm.test(\"ruleLineItemId\", function () {",
													"     for ( var i=0;i<pm.variables.get(\"TotalNudgesenttoentity\");i++){",
													"",
													"   if((jsonData.notifications[i].ruleLineItemId)==(pm.environment.get(\"ruleLineItemId\"))){",
													"  ",
													"    console.log( \"[Pre-Exam] last nudge of entity is associated with  rulelineitemId : \"+pm.variables.get(\"ruleLineItemId\") );",
													"",
													"}",
													"    }",
													"   ",
													"    ",
													"    ",
													"    });",
													"    ",
													"    ",
													"",
													"",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/api/NotificationMessageProcessor/SearchMessageSentViaRule?entityId={{entityId}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"NotificationMessageProcessor",
												"SearchMessageSentViaRule"
											],
											"query": [
												{
													"key": "entityId",
													"value": "{{entityId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[329]notificationMessageProcessorHistory",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "24ac8dfd-18cf-476f-8c08-1bd93aad7e83",
												"exec": [
													"pm.test(\"status code 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    ",
													"",
													"    ",
													"});",
													"",
													"pm.test(\"extract message\", function () {",
													"    ",
													"    console.log(\"Nudge Details:\");",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.notificationMessageProcessorHistoryRecords).to.exist;",
													"    var size = jsonData.notificationMessageProcessorHistoryRecords.length;",
													"    pm.environment.set(\"messageContent\",jsonData.notificationMessageProcessorHistoryRecords[0].messageContent);",
													"    ",
													"    var count=0;",
													"     for ( var i=0;i<size;i++){",
													"   if((jsonData.notificationMessageProcessorHistoryRecords[i].mobileNumber)==(pm.environment.get(\"MobileNuber\"))){",
													"  ",
													"   count++;",
													"   ",
													"pm.environment.set(\"TotalNudgesenttoMobilenum\",count );",
													"   ",
													"// pm.environment.set(\"messageContent\",jsonData.notificationMessageProcessorHistoryRecords[0].messageContent);",
													"",
													"pm.environment.set(\"NudgeReceivedVia_NotificationChannelType\",jsonData.notificationMessageProcessorHistoryRecords[i].notificationChannelTypeId);",
													"console.log(\"nudgeNudgeReceivedVia_NotificationChannelType :\" +pm.variables.get(\"NudgeReceivedVia_NotificationChannelType\"));",
													"",
													"}",
													"   ",
													"    }",
													"    console.log(\"Number of nudges sent to mobile num  : \"+pm.variables.get(\"TotalNudgesenttoMobilenum\"));",
													"",
													"});",
													"",
													"pm.test(\"extract bitly url\",function(){",
													"",
													"var string = pm.variables.get(\"messageContent\");",
													"var bitly = string.match(/\\bhttps?:\\/\\/\\S+/gi);",
													"pm.environment.set(\"bitly\",bitly);",
													"console.log(bitly);",
													" ",
													"",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/api/NotificationMessageProcessedHistory",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"NotificationMessageProcessedHistory"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "EXAM_5-8nudges",
							"item": [
								{
									"name": "[333]read entity by entityId",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "24ac8dfd-18cf-476f-8c08-1bd93aad7e83",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Your test name\", function () {",
													"    var jsonData = pm.response.json();",
													"    var X =JSON.parse(jsonData.id);",
													"    pm.expect(jsonData.id).to.eql(X);",
													"    ",
													"    pm.environment.set(\"entityCode\",jsonData.entityCode);",
													"     pm.environment.set(\"mobileNumber\",jsonData.mobileNumber);",
													"    ",
													"    ",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "28cea83f-eb53-4910-ac4e-05df0273e0ea",
												"exec": [
													"//pm.environment.set(\"entityId\",3847);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/api/Entity?entityId={{entityId}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"Entity"
											],
											"query": [
												{
													"key": "entityId",
													"value": "{{entityId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[334] 5th change last nudge sent date for",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "a66f8df1-605f-4640-aa35-cd0d72b96dff",
												"exec": [
													"var moment = require('moment');",
													"pm.environment.set(\"pickUpTime\", moment().subtract(2, 'days').format(\"YYYY-MM-DDThh:mm:ss.SSS\")) ;",
													"console.log(pm.variables.get(\"pickUpTime\"));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "23d9c19d-f037-4abd-9ce9-a7494827aacd",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Your test name\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.id).to.exist;",
													"});",
													"",
													"console.log(\"Information of (5-8) nudges\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"entityId\": {{entityId}},\r\n  \"ruleId\": {{ruleId}},\r\n  \"ruleLineItemId\": {{ruleLineItemId}},\r\n  \"createdDate\": \"{{pickUpTime}}\"\r\n}"
										},
										"url": {
											"raw": "{{url}}/api/Rule/UpdateEntityRuleMapping",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"Rule",
												"UpdateEntityRuleMapping"
											]
										}
									},
									"response": []
								},
								{
									"name": "[335]read Rule By Rule ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b21dfda3-5d01-4762-bed6-681e39e637c4",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"read  rulelineItemId\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.rule.ruleLineItems[0].id).to.exist;",
													"    pm.environment.set(\"ruleLineItemId\",jsonData.rule.ruleLineItems[4].id);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/api/Rule?ruleId={{ruleId}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"Rule"
											],
											"query": [
												{
													"key": "ruleId",
													"value": "{{ruleId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[336]Trigger RuleExecuteEvent",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "24ac8dfd-18cf-476f-8c08-1bd93aad7e83",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Is Rule Executed\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.eql(true);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/api/RuleExecution?ruleId={{ruleId}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"RuleExecution"
											],
											"query": [
												{
													"key": "ruleId",
													"value": "{{ruleId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[337]TriggerExecuteNotificationMessage",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "24ac8dfd-18cf-476f-8c08-1bd93aad7e83",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Your test name\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.isExecuted).to.eql(true);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/api/JobExecution?jobId=15",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"JobExecution"
											],
											"query": [
												{
													"key": "jobId",
													"value": "15"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[338]SearchMessageSentViaRule",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "24ac8dfd-18cf-476f-8c08-1bd93aad7e83",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"to check notifications exist\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.notifications).to.exist;",
													"    var size1 = jsonData.notifications.length;",
													"    //console.log( \"notifications array size : \"+size1);",
													"    ",
													"    var array=JSON.parse(pm.environment.get(\"ruleLineItemId\"));",
													"    ",
													"     pm.expect((jsonData.notifications[0].ruleLineItemId)).to.eql(array);",
													"",
													"    pm.environment.set(\"TotalNudgesenttoentity\",size1);",
													"  ",
													"   ",
													"     console.log( \"[PRE-NAT] Second nudge of entity is associated with  rulelineitemId : \"+pm.variables.get(\"ruleLineItemId\") );",
													"",
													"",
													"",
													"});",
													"pm.test(\"Nudge delivery Verification\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.notifications[0].messageContent).to.eql(\"\");",
													"    pm.expect(jsonData.notifications[0].mobileNumber).to.eql(\"\");",
													"    ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/api/NotificationMessageProcessor/SearchMessageSentViaRule?entityId={{entityId}}&ruleId={{ruleId}}&ruleLineItemId={{ruleLineItemId}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"NotificationMessageProcessor",
												"SearchMessageSentViaRule"
											],
											"query": [
												{
													"key": "entityId",
													"value": "{{entityId}}"
												},
												{
													"key": "ruleId",
													"value": "{{ruleId}}"
												},
												{
													"key": "ruleLineItemId",
													"value": "{{ruleLineItemId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[339] 6th change last nudge sent date",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "a66f8df1-605f-4640-aa35-cd0d72b96dff",
												"exec": [
													"var moment = require('moment');",
													"pm.environment.set(\"pickUpTime\", moment().subtract(2, 'days').format(\"YYYY-MM-DDThh:mm:ss.SSS\")) ;",
													"console.log(pm.variables.get(\"pickUpTime\"));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "357de4ea-0342-4ae4-b704-9433175072c0",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Your test name\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.id).to.exist;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"entityId\": {{entityId}},\r\n  \"ruleId\": {{ruleId}},\r\n  \"ruleLineItemId\": {{ruleLineItemId}},\r\n  \"createdDate\": \"{{pickUpTime}}\"\r\n}"
										},
										"url": {
											"raw": "{{url}}/api/Rule/UpdateEntityRuleMapping",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"Rule",
												"UpdateEntityRuleMapping"
											]
										}
									},
									"response": []
								},
								{
									"name": "[340]read Rule By Rule ID Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b21dfda3-5d01-4762-bed6-681e39e637c4",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Your test name\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.rule.ruleLineItems[0].id).to.exist;",
													"    pm.environment.set(\"ruleLineItemId\",jsonData.rule.ruleLineItems[5].id);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/api/Rule?ruleId={{ruleId}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"Rule"
											],
											"query": [
												{
													"key": "ruleId",
													"value": "{{ruleId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[341]Trigger RuleExecuteEvent",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "24ac8dfd-18cf-476f-8c08-1bd93aad7e83",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Is Rule Executed\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.eql(true);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/api/RuleExecution?ruleId={{ruleId}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"RuleExecution"
											],
											"query": [
												{
													"key": "ruleId",
													"value": "{{ruleId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[342]TriggerExecuteNotificationMessage",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "24ac8dfd-18cf-476f-8c08-1bd93aad7e83",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Your test name\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.isExecuted).to.eql(true);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/api/JobExecution?jobId=15",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"JobExecution"
											],
											"query": [
												{
													"key": "jobId",
													"value": "15"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[343]SearchMessageSentViaRule",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "24ac8dfd-18cf-476f-8c08-1bd93aad7e83",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"to check notifications exist\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.notifications).to.exist;",
													"    var size1 = jsonData.notifications.length;",
													"    console.log( \"notifications array size : \"+size1);",
													"    ",
													"    var array=JSON.parse(pm.environment.get(\"ruleLineItemId\"));",
													"    ",
													"     pm.expect((jsonData.notifications[0].ruleLineItemId)).to.eql(array);",
													"",
													"    pm.environment.set(\"TotalNudgesenttoentity\",size1);",
													"  ",
													"   console.log( \" [PRE-NAT] Third nudge of entity is associated with  rulelineitemId : \"+pm.variables.get(\"ruleLineItemId\") );",
													"    ",
													"",
													"",
													"});",
													"",
													"pm.test(\"Nudge delivery Verification\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.notifications[0].messageContent).to.eql(\"\");",
													"    pm.expect(jsonData.notifications[0].mobileNumber).to.eql(\"\");",
													"    ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/api/NotificationMessageProcessor/SearchMessageSentViaRule?entityId={{entityId}}&ruleId={{ruleId}}&ruleLineItemId={{ruleLineItemId}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"NotificationMessageProcessor",
												"SearchMessageSentViaRule"
											],
											"query": [
												{
													"key": "entityId",
													"value": "{{entityId}}"
												},
												{
													"key": "ruleId",
													"value": "{{ruleId}}"
												},
												{
													"key": "ruleLineItemId",
													"value": "{{ruleLineItemId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[345] 7th change last nudge sent date",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "a66f8df1-605f-4640-aa35-cd0d72b96dff",
												"exec": [
													"var moment = require('moment');",
													"pm.environment.set(\"pickUpTime\", moment().subtract(2, 'days').format(\"YYYY-MM-DDThh:mm:ss.SSS\")) ;",
													"console.log(pm.variables.get(\"pickUpTime\"));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "8e5a4bf6-25c0-402b-9cea-5fbbd2dfd8cc",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Your test name\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.id).to.exist;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"entityId\": {{entityId}},\r\n  \"ruleId\": {{ruleId}},\r\n  \"ruleLineItemId\": {{ruleLineItemId}},\r\n  \"createdDate\": \"{{pickUpTime}}\"\r\n}"
										},
										"url": {
											"raw": "{{url}}/api/Rule/UpdateEntityRuleMapping",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"Rule",
												"UpdateEntityRuleMapping"
											]
										}
									},
									"response": []
								},
								{
									"name": "[346]read Rule By Rule ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b21dfda3-5d01-4762-bed6-681e39e637c4",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Your test name\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.rule.ruleLineItems[0].id).to.exist;",
													"    pm.environment.set(\"ruleLineItemId\",jsonData.rule.ruleLineItems[6].id);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/api/Rule?ruleId={{ruleId}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"Rule"
											],
											"query": [
												{
													"key": "ruleId",
													"value": "{{ruleId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[347]Trigger RuleExecuteEvent",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "24ac8dfd-18cf-476f-8c08-1bd93aad7e83",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Is Rule Executed\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.eql(true);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/api/RuleExecution?ruleId={{ruleId}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"RuleExecution"
											],
											"query": [
												{
													"key": "ruleId",
													"value": "{{ruleId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[348]TriggerExecuteNotificationMessage",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "24ac8dfd-18cf-476f-8c08-1bd93aad7e83",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Your test name\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.isExecuted).to.eql(true);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/api/JobExecution?jobId=15",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"JobExecution"
											],
											"query": [
												{
													"key": "jobId",
													"value": "15"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[349]4 SearchMessageSentViaRule",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "24ac8dfd-18cf-476f-8c08-1bd93aad7e83",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"to check notifications exist\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.notifications).to.exist;",
													"    var size1 = jsonData.notifications.length;",
													"    console.log( \"notifications array size : \"+size1);",
													"    ",
													"    var array=JSON.parse(pm.environment.get(\"ruleLineItemId\"));",
													"    ",
													"     pm.expect((jsonData.notifications[0].ruleLineItemId)).to.eql(array);",
													"",
													"    pm.environment.set(\"TotalNudgesenttoentity\",size1);",
													"  ",
													"   ",
													"    ",
													"",
													"",
													"});",
													"pm.test(\"Nudge delivery Verification\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.notifications[0].messageContent).to.eql(\"\");",
													"    pm.expect(jsonData.notifications[0].mobileNumber).to.eql(\"\");",
													"    ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/api/NotificationMessageProcessor/SearchMessageSentViaRule?entityId={{entityId}}&ruleId={{ruleId}}&ruleLineItemId={{ruleLineItemId}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"NotificationMessageProcessor",
												"SearchMessageSentViaRule"
											],
											"query": [
												{
													"key": "entityId",
													"value": "{{entityId}}"
												},
												{
													"key": "ruleId",
													"value": "{{ruleId}}"
												},
												{
													"key": "ruleLineItemId",
													"value": "{{ruleLineItemId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[351]4 SearchMessageSentViaRule (count total nudge to entity)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "24ac8dfd-18cf-476f-8c08-1bd93aad7e83",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"to check notifications exist\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.notifications).to.exist;",
													"    var size1 = jsonData.notifications.length;",
													"    console.log( \"total nudges sent to entity : \"+size1);",
													"     ",
													"    pm.environment.set(\"TotalNudgesenttoentity\",size1);",
													"    pm.expect(pm.variables.get(\"TotalNudgesenttoentity\")).to.eql(7);",
													"",
													"    //var count=0;",
													"    pm.test(\"ruleLineItemId\", function () {",
													"     for ( var i=0;i<pm.variables.get(\"TotalNudgesenttoentity\");i++){",
													"",
													"   if((jsonData.notifications[i].ruleLineItemId)==(pm.environment.get(\"ruleLineItemId\"))){",
													"  ",
													"    console.log( \"[PRE-NAT]last nudge of entity is associated with  rulelineitemId : \"+pm.variables.get(\"ruleLineItemId\") );",
													"",
													"}",
													"    }",
													"   ",
													"    ",
													"    ",
													"    });",
													"    ",
													"    ",
													"",
													"",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/api/NotificationMessageProcessor/SearchMessageSentViaRule?entityId={{entityId}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"NotificationMessageProcessor",
												"SearchMessageSentViaRule"
											],
											"query": [
												{
													"key": "entityId",
													"value": "{{entityId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[352]notificationMessageProcessorHistory",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "24ac8dfd-18cf-476f-8c08-1bd93aad7e83",
												"exec": [
													"pm.test(\"status code 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    ",
													"",
													"    ",
													"});",
													"",
													"pm.test(\"extract message\", function () {",
													"    ",
													"    console.log(\"Nudge Details:\");",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.notificationMessageProcessorHistoryRecords).to.exist;",
													"    var size = jsonData.notificationMessageProcessorHistoryRecords.length;",
													"    pm.environment.set(\"messageContent\",jsonData.notificationMessageProcessorHistoryRecords[0].messageContent);",
													"    ",
													"    var count=0;",
													"     for ( var i=0;i<size;i++){",
													"   if((jsonData.notificationMessageProcessorHistoryRecords[i].mobileNumber)==(pm.environment.get(\"MobileNuber\"))){",
													"  ",
													"   count++;",
													"   ",
													"pm.environment.set(\"TotalNudgesenttoMobilenum\",count );",
													"   ",
													"// pm.environment.set(\"messageContent\",jsonData.notificationMessageProcessorHistoryRecords[0].messageContent);",
													"",
													"pm.environment.set(\"NudgeReceivedVia_NotificationChannelType\",jsonData.notificationMessageProcessorHistoryRecords[i].notificationChannelTypeId);",
													"console.log(\"nudgeNudgeReceivedVia_NotificationChannelType :\" +pm.variables.get(\"NudgeReceivedVia_NotificationChannelType\"));",
													"",
													"}",
													"   ",
													"    }",
													"    console.log(\"Number of nudges sent to mobile num  : \"+pm.variables.get(\"TotalNudgesenttoMobilenum\"));",
													"",
													"});",
													"",
													"pm.test(\"extract bitly url\",function(){",
													"",
													"var string = pm.variables.get(\"messageContent\");",
													"var bitly = string.match(/\\bhttps?:\\/\\/\\S+/gi);",
													"pm.environment.set(\"bitly\",bitly);",
													"console.log(bitly);",
													" ",
													"",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "308a3958-7fc4-4416-b794-eac8c0849b9e",
												"exec": [
													"pm.environment.set(\"TotalNudgesenttoMobilenum\",0);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/api/NotificationMessageProcessedHistory",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"NotificationMessageProcessedHistory"
											]
										}
									},
									"response": []
								},
								{
									"name": "[353] 7th change last nudge sent date",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "a66f8df1-605f-4640-aa35-cd0d72b96dff",
												"exec": [
													"var moment = require('moment');",
													"pm.environment.set(\"pickUpTime\", moment().subtract(2, 'days').format(\"YYYY-MM-DDThh:mm:ss.SSS\")) ;",
													"console.log(pm.variables.get(\"pickUpTime\"));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "8e5a4bf6-25c0-402b-9cea-5fbbd2dfd8cc",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Your test name\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.id).to.exist;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"entityId\": {{entityId}},\r\n  \"ruleId\": {{ruleId}},\r\n  \"ruleLineItemId\": {{ruleLineItemId}},\r\n  \"createdDate\": \"{{pickUpTime}}\"\r\n}"
										},
										"url": {
											"raw": "{{url}}/api/Rule/UpdateEntityRuleMapping",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"Rule",
												"UpdateEntityRuleMapping"
											]
										}
									},
									"response": []
								},
								{
									"name": "[354]read Rule By Rule ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b21dfda3-5d01-4762-bed6-681e39e637c4",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Your test name\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.rule.ruleLineItems[0].id).to.exist;",
													"    pm.environment.set(\"ruleLineItemId\",jsonData.rule.ruleLineItems[7].id);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/api/Rule?ruleId={{ruleId}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"Rule"
											],
											"query": [
												{
													"key": "ruleId",
													"value": "{{ruleId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[355]Trigger RuleExecuteEvent",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "24ac8dfd-18cf-476f-8c08-1bd93aad7e83",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Is Rule Executed\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.eql(true);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/api/RuleExecution?ruleId={{ruleId}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"RuleExecution"
											],
											"query": [
												{
													"key": "ruleId",
													"value": "{{ruleId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[356]4 SearchMessageSentViaRule",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "24ac8dfd-18cf-476f-8c08-1bd93aad7e83",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"to check notifications exist\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.notifications).to.exist;",
													"    var size1 = jsonData.notifications.length;",
													"    console.log( \"notifications array size : \"+size1);",
													"    ",
													"    var array=JSON.parse(pm.environment.get(\"ruleLineItemId\"));",
													"    ",
													"     pm.expect((jsonData.notifications[0].ruleLineItemId)).to.eql(array);",
													"",
													"    pm.environment.set(\"TotalNudgesenttoentity\",size1);",
													"  ",
													"   ",
													"    ",
													"",
													"",
													"});",
													"pm.test(\"Nudge delivery Verification\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.notifications[0].messageContent).to.eql(\"\");",
													"    pm.expect(jsonData.notifications[0].mobileNumber).to.eql(\"\");",
													"    ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/api/NotificationMessageProcessor/SearchMessageSentViaRule?entityId={{entityId}}&ruleId={{ruleId}}&ruleLineItemId={{ruleLineItemId}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"NotificationMessageProcessor",
												"SearchMessageSentViaRule"
											],
											"query": [
												{
													"key": "entityId",
													"value": "{{entityId}}"
												},
												{
													"key": "ruleId",
													"value": "{{ruleId}}"
												},
												{
													"key": "ruleLineItemId",
													"value": "{{ruleLineItemId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[357] SearchMessageSentViaRule (count total nudge to entity)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "24ac8dfd-18cf-476f-8c08-1bd93aad7e83",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"to check notifications exist\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.notifications).to.exist;",
													"    var size1 = jsonData.notifications.length;",
													"    console.log( \"total nudges sent to entity : \"+size1);",
													"     ",
													"    pm.environment.set(\"TotalNudgesenttoentity\",size1);",
													"    pm.expect(pm.variables.get(\"TotalNudgesenttoentity\")).to.eql(8);",
													"",
													"    //var count=0;",
													"    pm.test(\"ruleLineItemId\", function () {",
													"     for ( var i=0;i<pm.variables.get(\"TotalNudgesenttoentity\");i++){",
													"",
													"   if((jsonData.notifications[i].ruleLineItemId)==(pm.environment.get(\"ruleLineItemId\"))){",
													"  ",
													"    console.log( \"[PRE-NAT]last nudge of entity is associated with  rulelineitemId : \"+pm.variables.get(\"ruleLineItemId\") );",
													"",
													"}",
													"    }",
													"   ",
													"    ",
													"    ",
													"    });",
													"    ",
													"    ",
													"",
													"",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/api/NotificationMessageProcessor/SearchMessageSentViaRule?entityId={{entityId}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"NotificationMessageProcessor",
												"SearchMessageSentViaRule"
											],
											"query": [
												{
													"key": "entityId",
													"value": "{{entityId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[358]notificationMessageProcessorHistory",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "24ac8dfd-18cf-476f-8c08-1bd93aad7e83",
												"exec": [
													"pm.test(\"status code 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    ",
													"",
													"    ",
													"});",
													"",
													"pm.test(\"extract message\", function () {",
													"    ",
													"    console.log(\"Nudge Details:\");",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.notificationMessageProcessorHistoryRecords).to.exist;",
													"    var size = jsonData.notificationMessageProcessorHistoryRecords.length;",
													"    pm.environment.set(\"messageContent\",jsonData.notificationMessageProcessorHistoryRecords[0].messageContent);",
													"    ",
													"    var count=0;",
													"     for ( var i=0;i<size;i++){",
													"   if((jsonData.notificationMessageProcessorHistoryRecords[i].mobileNumber)==(pm.environment.get(\"MobileNuber\"))){",
													"  ",
													"   count++;",
													"   ",
													"pm.environment.set(\"TotalNudgesenttoMobilenum\",count );",
													"   ",
													"// pm.environment.set(\"messageContent\",jsonData.notificationMessageProcessorHistoryRecords[0].messageContent);",
													"",
													"pm.environment.set(\"NudgeReceivedVia_NotificationChannelType\",jsonData.notificationMessageProcessorHistoryRecords[i].notificationChannelTypeId);",
													"console.log(\"nudgeNudgeReceivedVia_NotificationChannelType :\" +pm.variables.get(\"NudgeReceivedVia_NotificationChannelType\"));",
													"",
													"}",
													"   ",
													"    }",
													"    console.log(\"Number of nudges sent to mobile num  : \"+pm.variables.get(\"TotalNudgesenttoMobilenum\"));",
													"",
													"});",
													"",
													"pm.test(\"extract bitly url\",function(){",
													"",
													"var string = pm.variables.get(\"messageContent\");",
													"var bitly = string.match(/\\bhttps?:\\/\\/\\S+/gi);",
													"pm.environment.set(\"bitly\",bitly);",
													"console.log(bitly);",
													" ",
													"",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "308a3958-7fc4-4416-b794-eac8c0849b9e",
												"exec": [
													"pm.environment.set(\"TotalNudgesenttoMobilenum\",0);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/api/NotificationMessageProcessedHistory",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"NotificationMessageProcessedHistory"
											]
										}
									},
									"response": []
								},
								{
									"name": "[359]click on bitly link",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "24ac8dfd-18cf-476f-8c08-1bd93aad7e83",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{bitly}}",
											"host": [
												"{{bitly}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "[360]Trigger NudgeInteractionAnalytics",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "24ac8dfd-18cf-476f-8c08-1bd93aad7e83",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Trigger Nudgeinteraction\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.isExecuted).to.eql(true);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/api/JobExecution?jobId=17",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"JobExecution"
											],
											"query": [
												{
													"key": "jobId",
													"value": "17"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[361]read data like URL is clicked (true)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0822a3c8-02fb-46f7-a903-c7a96a6fe942",
												"exec": [
													"pm.test(\"Status code 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Bitly  is  clicked \", function () {",
													"    var jsonData = pm.response.json();",
													"    var X = JSON.parse(jsonData.nudgeInteractionDetails[0].entityId);",
													"    pm.expect(jsonData.nudgeInteractionDetails[0].entityId).to.eql(X);",
													"    pm.expect(jsonData.nudgeInteractionDetails[0].isLinkClicked).to.eql(true);",
													"   console.log(\"Nudge System has captured Bitly analytics as TRUE \");",
													"",
													"",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/api/Entity/ReadNudgeInteraction?entitySourceSystemId={{entitySourceSystemId}}&entityCode={{entityCode}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"Entity",
												"ReadNudgeInteraction"
											],
											"query": [
												{
													"key": "entitySourceSystemId",
													"value": "{{entitySourceSystemId}}"
												},
												{
													"key": "entityCode",
													"value": "{{entityCode}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[356]Delete Rule",
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{url}}/api/Rule?ruleId={{ruleId}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"Rule"
											],
											"query": [
												{
													"key": "ruleId",
													"value": "{{ruleId}}"
												}
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "f3db1086-b756-4b8f-a6af-069357e13c1d",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "8aff3ff8-0fef-4729-a292-eed11c5dcb57",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "33d06bd4-65b6-42eb-a396-76a07fd2de55",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "aab1cca3-0e68-4e04-8b93-8c614f4a6180",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"_postman_isSubFolder": true
				}
			],
			"description": "This Collection Covers the End to End Flow for EntitySubState (NAT/ARF/EXAM). system will send 8 Nudges to each entity.",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "4089a3c7-195b-4138-8f17-00c6dd2c1260",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "fbf83e1d-8477-474e-9a3e-d37165f9ffed",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Segment/Zone template E2E",
			"item": [
				{
					"name": "create Rule&Template",
					"item": [
						{
							"name": "Creates Template (2)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4ce724b8-9589-4ba0-b1b3-935d6e6e46e0",
										"exec": [
											"pm.test(\"read template Id\", function () {",
											"    var jsonData = pm.response.json();",
											"    ",
											"pm.environment.set(\"notificationMessageTemplateId2\", jsonData.notificationMessageTemplateId);",
											"});",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "9b8b754b-1026-4dd1-a35c-a14f2318cc64",
										"exec": [
											"var random = _.random(100, 1000);",
											"",
											"",
											"var codeSeed = \"Temp-\";",
											"pm.environment.set(\"TemplateName\", codeSeed.concat(random));",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "text/plain, application/json, text/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n            \"name\": \"{{TemplateName}}\",\n            \"entitySourceSystemId\": {{entitySourceSystemId}},\n            \"isActive\": true,\n            \"notificationMessageTemplateLineItems\": [\n                {\n                    \"elementName\": \"English_Default\",\n                    \"templateContent\": \"Hi {1}, to know more about why you should become an agent with us,(ENGLISH-DEFAULT) please click on this link! {2}\\nProceed to our branch office for more information! You may reach out to {3} on {4} for any clarification.(Template-2)\",\n                    \"languageTypeId\": 1,\n                    \"entitySegmentTypeId\": 1,\n                    \n                    \"notificationMessageTemplateConfigurationMappings\": [\n                        {\n                            \"placeholderKey\": 1,\n                            \"notificationMessageTemplatePlaceHolderTypeId\": 1,\n                            \"value\": \"string\"\n                        },\n                        {\n                            \"placeholderKey\": 2,\n                            \"notificationMessageTemplatePlaceHolderTypeId\": 4,\n                            \"value\": \"https://www.google.com/\"\n                        },\n                        {\n                            \"placeholderKey\": 3,\n                            \"notificationMessageTemplatePlaceHolderTypeId\": 7,\n                            \"value\": \"string\"\n                        },\n                        {\n                            \"placeholderKey\": 4,\n                            \"notificationMessageTemplatePlaceHolderTypeId\": 8,\n                            \"value\": \"string\"\n                        }\n                    ]\n                },\n                {\n                    \"elementName\": \"English_Retirement\",\n                    \"templateContent\": \"Hi {1}, to know more about why you should become an agent with us,(ENGLISH-RETIREMENT) Default  please click on this link! {2}\\nProceed to our branch office for more information! You may reach out to {3} on {4} for any clarification.(Template-2)\",\n                    \"languageTypeId\": 1,\n                    \"entitySegmentTypeId\": 2,\n                    \"isDefault\":true,\n                    \"notificationMessageTemplateConfigurationMappings\": [\n                        {\n                            \"placeholderKey\": 1,\n                            \"notificationMessageTemplatePlaceHolderTypeId\": 1,\n                            \"value\": \"string\"\n                        },\n                        {\n                            \"placeholderKey\": 2,\n                            \"notificationMessageTemplatePlaceHolderTypeId\": 4,\n                            \"value\": \"https://www.google.com/\"\n                        },\n                        {\n                            \"placeholderKey\": 3,\n                            \"notificationMessageTemplatePlaceHolderTypeId\": 7,\n                            \"value\": \"string\"\n                        },\n                        {\n                            \"placeholderKey\": 4,\n                            \"notificationMessageTemplatePlaceHolderTypeId\": 8,\n                            \"value\": \"string\"\n                        }\n                    ]\n                },\n                {\n                    \"elementName\": \"English_Small_Entrepreneur\",\n                    \"templateContent\": \"Hi {1}, to know more about why you should become an agent with us,(ENGLISH-SMALLEN) please click on this link! {2}\\nProceed to our branch office for more information! You may reach out to {3} on {4} for any clarification.(Template-2)\",\n                    \"languageTypeId\": 1,\n                    \"entitySegmentTypeId\": 3,\n                    \"notificationMessageTemplateConfigurationMappings\": [\n                        {\n                            \"placeholderKey\": 1,\n                            \"notificationMessageTemplatePlaceHolderTypeId\": 1,\n                            \"value\": \"string\"\n                        },\n                        {\n                            \"placeholderKey\": 2,\n                            \"notificationMessageTemplatePlaceHolderTypeId\": 4,\n                            \"value\": \"https://www.google.com/\"\n                        },\n                        {\n                            \"placeholderKey\": 3,\n                            \"notificationMessageTemplatePlaceHolderTypeId\": 7,\n                            \"value\": \"string\"\n                        },\n                        {\n                            \"placeholderKey\": 4,\n                            \"notificationMessageTemplatePlaceHolderTypeId\": 8,\n                            \"value\": \"string\"\n                        }\n                    ]\n                },\n                {\n                    \"elementName\": \"English_Housemakers\",\n                    \"templateContent\": \"Hi {1}, to know more about why you should become an agent with us, (ENGLISH-HOUSEMAKERS) please click on this link! {2}\\nProceed to our branch office for more information! You may reach out to {3} on {4} for any clarification.(Template-2)\",\n                    \"languageTypeId\": 1,\n                    \"entitySegmentTypeId\": 4,\n                    \"notificationMessageTemplateConfigurationMappings\": [\n                        {\n                            \"placeholderKey\": 1,\n                            \"notificationMessageTemplatePlaceHolderTypeId\": 1,\n                            \"value\": \"string\"\n                        },\n                        {\n                            \"placeholderKey\": 2,\n                            \"notificationMessageTemplatePlaceHolderTypeId\": 4,\n                            \"value\": \"https://www.google.com/\"\n                        },\n                        {\n                            \"placeholderKey\": 3,\n                            \"notificationMessageTemplatePlaceHolderTypeId\": 7,\n                            \"value\": \"string\"\n                        },\n                        {\n                            \"placeholderKey\": 4,\n                            \"notificationMessageTemplatePlaceHolderTypeId\": 8,\n                            \"value\": \"string\"\n                        }\n                    ]\n                },\n                {\n                    \"elementName\": \"English_FinancialProductDistributor\",\n                    \"templateContent\": \"Hi {1}, to know more about why you should become an agent with us,(ENGLISH-FINANCIAL) please click on this link! {2}\\nProceed to our branch office for more information! You may reach out to {3} on {4} for any clarification.(Template-2)\",\n                    \"languageTypeId\": 1,\n                    \"entitySegmentTypeId\": 5,\n                    \"notificationMessageTemplateConfigurationMappings\": [\n                        {\n                            \"placeholderKey\": 4,\n                            \"notificationMessageTemplatePlaceHolderTypeId\": 8,\n                            \"value\": \"string\"\n                        },\n                        {\n                            \"placeholderKey\": 3,\n                            \"notificationMessageTemplatePlaceHolderTypeId\": 7,\n                            \"value\": \"string\"\n                        },\n                        {\n                            \"placeholderKey\": 2,\n                            \"notificationMessageTemplatePlaceHolderTypeId\": 4,\n                            \"value\": \"https://www.google.com/\"\n                        },\n                        {\n                            \"placeholderKey\": 1,\n                            \"notificationMessageTemplatePlaceHolderTypeId\": 1,\n                            \"value\": \"string\"\n                        }\n                    ]\n                },\n                {\n                    \"elementName\": \"Hindi_Retirement\",\n                    \"templateContent\": \"Hi {1}, to know more about why you should become an agent with us,(HINDI-RETIREMENT) please click on this link! {2}\\nProceed to our branch office for more information! You may reach out to {3} on {4} for any clarification.(Template-2)\",\n                    \"languageTypeId\": 2,\n                    \"entitySegmentTypeId\": 2,\n                    \"notificationMessageTemplateConfigurationMappings\": [\n                        {\n                            \"placeholderKey\": 1,\n                            \"notificationMessageTemplatePlaceHolderTypeId\": 1,\n                            \"value\": \"string\"\n                        },\n                        {\n                            \"placeholderKey\": 2,\n                            \"notificationMessageTemplatePlaceHolderTypeId\": 4,\n                            \"value\": \"https://www.google.com/\"\n                        },\n                        {\n                            \"placeholderKey\": 3,\n                            \"notificationMessageTemplatePlaceHolderTypeId\": 7,\n                            \"value\": \"string\"\n                        },\n                        {\n                            \"placeholderKey\": 4,\n                            \"notificationMessageTemplatePlaceHolderTypeId\": 8,\n                            \"value\": \"string\"\n                        }\n                    ]\n                },\n                {\n                    \"elementName\": \"Hindi_Small_Entrepreneur\",\n                    \"templateContent\": \"Hi {1}, to know more about why you should become an agent with us,(HINDI-SMALLEN) please click on this link! {2}\\nProceed to our branch office for more information! You may reach out to {3} on {4} for any clarification.(Template-2)\",\n                    \"languageTypeId\": 2,\n                    \"entitySegmentTypeId\": 3,\n                    \"notificationMessageTemplateConfigurationMappings\": [\n                        {\n                            \"placeholderKey\": 1,\n                            \"notificationMessageTemplatePlaceHolderTypeId\": 1,\n                            \"value\": \"string\"\n                        },\n                        {\n                            \"placeholderKey\": 2,\n                            \"notificationMessageTemplatePlaceHolderTypeId\": 4,\n                            \"value\": \"https://www.google.com/\"\n                        },\n                        {\n                            \"placeholderKey\": 3,\n                            \"notificationMessageTemplatePlaceHolderTypeId\": 7,\n                            \"value\": \"string\"\n                        },\n                        {\n                            \"placeholderKey\": 4,\n                            \"notificationMessageTemplatePlaceHolderTypeId\": 8,\n                            \"value\": \"string\"\n                        }\n                    ]\n                },\n                {\n                    \"elementName\": \"Hindi_Housemakers\",\n                    \"templateContent\": \"Hi {1}, to know more about why you should become an agent with us,(HINDI-HOUSEMAKERS) please click on this link! {2}\\nProceed to our branch office for more information! You may reach out to {3} on {4} for any clarification.(Template-2)\",\n                    \"languageTypeId\": 2,\n                    \"entitySegmentTypeId\": 4,\n                    \"notificationMessageTemplateConfigurationMappings\": [\n                        {\n                            \"placeholderKey\": 1,\n                            \"notificationMessageTemplatePlaceHolderTypeId\": 1,\n                            \"value\": \"string\"\n                        },\n                        {\n                            \"placeholderKey\": 2,\n                            \"notificationMessageTemplatePlaceHolderTypeId\": 4,\n                            \"value\": \"https://www.google.com/\"\n                        },\n                        {\n                            \"placeholderKey\": 3,\n                            \"notificationMessageTemplatePlaceHolderTypeId\": 7,\n                            \"value\": \"string\"\n                        },\n                        {\n                            \"placeholderKey\": 4,\n                            \"notificationMessageTemplatePlaceHolderTypeId\": 8,\n                            \"value\": \"string\"\n                        }\n                    ]\n                },\n                {\n                    \"elementName\": \"Hindi_Financial_Product_Distributor\",\n                    \"templateContent\": \"Hi {1}, to know more about why you should become an agent with us,(HINDI-FINANCIAL) please click on this link! {2}\\nProceed to our branch office for more information! You may reach out to {3} on {4} for any clarification.(Template-2)\",\n                    \"languageTypeId\": 2,\n                    \"entitySegmentTypeId\": 5,\n                    \"notificationMessageTemplateConfigurationMappings\": [\n                        {\n                            \"placeholderKey\": 1,\n                            \"notificationMessageTemplatePlaceHolderTypeId\": 1,\n                            \"value\": \"string\"\n                        },\n                        {\n                            \"placeholderKey\": 2,\n                            \"notificationMessageTemplatePlaceHolderTypeId\": 4,\n                            \"value\": \"https://www.google.com/\"\n                        },\n                        {\n                            \"placeholderKey\": 3,\n                            \"notificationMessageTemplatePlaceHolderTypeId\": 7,\n                            \"value\": \"string\"\n                        },\n                        {\n                            \"placeholderKey\": 4,\n                            \"notificationMessageTemplatePlaceHolderTypeId\": 8,\n                            \"value\": \"string\"\n                        }\n                    ]\n                }\n            ]\n    \n}"
								},
								"url": {
									"raw": "{{url}}/api/NotificationMessageTemplate",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"NotificationMessageTemplate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Creates Template(1)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4ce724b8-9589-4ba0-b1b3-935d6e6e46e0",
										"exec": [
											"pm.test(\"read template Id\", function () {",
											"    var jsonData = pm.response.json();",
											"    ",
											"pm.environment.set(\"notificationMessageTemplateId1\", jsonData.notificationMessageTemplateId);",
											"});",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "9b8b754b-1026-4dd1-a35c-a14f2318cc64",
										"exec": [
											"var random = _.random(100, 1000);",
											"",
											"",
											"var codeSeed = \"Temp-\";",
											"pm.environment.set(\"TemplateName\", codeSeed.concat(random));",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "text/plain, application/json, text/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n            \"name\": \"{{TemplateName}}\",\n            \"entitySourceSystemId\": {{entitySourceSystemId}},\n            \"isActive\": true,\n            \"notificationMessageTemplateLineItems\": [\n                {\n                    \"elementName\": \"English_Default\",\n                    \"templateContent\": \"Hi {1}, to know more about why you should become an agent with us, (ENGLISH-DEFAULT) please click on this link! {2}\\nProceed to our branch office for more information! You may reach out to {3} on {4} for any clarification.(Template-1)\",\n                    \"languageTypeId\": 1,\n                    \"entitySegmentTypeId\": 1,\n                    \"isDefault\":true,\n                    \"notificationMessageTemplateConfigurationMappings\": [\n                        {\n                            \"placeholderKey\": 1,\n                            \"notificationMessageTemplatePlaceHolderTypeId\": 1,\n                            \"value\": \"string\"\n                        },\n                        {\n                            \"placeholderKey\": 2,\n                            \"notificationMessageTemplatePlaceHolderTypeId\": 4,\n                            \"value\": \"https://www.google.com/\"\n                        },\n                        {\n                            \"placeholderKey\": 3,\n                            \"notificationMessageTemplatePlaceHolderTypeId\": 7,\n                            \"value\": \"string\"\n                        },\n                        {\n                            \"placeholderKey\": 4,\n                            \"notificationMessageTemplatePlaceHolderTypeId\": 8,\n                            \"value\": \"string\"\n                        }\n                    ]\n                },\n                {\n                    \"elementName\": \"English_Retirement\",\n                    \"templateContent\": \"Hi {1}, to know more about why you should become an agent with us,  (ENGLISH-RETIREMENT) please click on this link! {2}\\nProceed to our branch office for more information! You may reach out to {3} on {4} for any clarification.(Template-1)\",\n                    \"languageTypeId\": 1,\n                    \"entitySegmentTypeId\": 2,\n                    \"notificationMessageTemplateConfigurationMappings\": [\n                        {\n                            \"placeholderKey\": 1,\n                            \"notificationMessageTemplatePlaceHolderTypeId\": 1,\n                            \"value\": \"string\"\n                        },\n                        {\n                            \"placeholderKey\": 2,\n                            \"notificationMessageTemplatePlaceHolderTypeId\": 4,\n                            \"value\": \"https://www.google.com/\"\n                        },\n                        {\n                            \"placeholderKey\": 3,\n                            \"notificationMessageTemplatePlaceHolderTypeId\": 7,\n                            \"value\": \"string\"\n                        },\n                        {\n                            \"placeholderKey\": 4,\n                            \"notificationMessageTemplatePlaceHolderTypeId\": 8,\n                            \"value\": \"string\"\n                        }\n                    ]\n                },\n                {\n                    \"elementName\": \"English_Small_Entrepreneur\",\n                    \"templateContent\": \"Hi {1}, to know more about why you should become an agent with us,  (ENGLISH-SMALLEN) please click on this link! {2}\\nProceed to our branch office for more information! You may reach out to {3} on {4} for any clarification.(Template-1)\",\n                    \"languageTypeId\": 1,\n                    \"entitySegmentTypeId\": 3,\n                    \"notificationMessageTemplateConfigurationMappings\": [\n                        {\n                            \"placeholderKey\": 1,\n                            \"notificationMessageTemplatePlaceHolderTypeId\": 1,\n                            \"value\": \"string\"\n                        },\n                        {\n                            \"placeholderKey\": 2,\n                            \"notificationMessageTemplatePlaceHolderTypeId\": 4,\n                            \"value\": \"https://www.google.com/\"\n                        },\n                        {\n                            \"placeholderKey\": 3,\n                            \"notificationMessageTemplatePlaceHolderTypeId\": 7,\n                            \"value\": \"string\"\n                        },\n                        {\n                            \"placeholderKey\": 4,\n                            \"notificationMessageTemplatePlaceHolderTypeId\": 8,\n                            \"value\": \"string\"\n                        }\n                    ]\n                },\n                {\n                    \"elementName\": \"English_Housemakers\",\n                    \"templateContent\": \"Hi {1}, to know more about why you should become an agent with us, (ENGLISH-HOUSEMAKERS) please click on this link! {2}\\nProceed to our branch office for more information! You may reach out to {3} on {4} for any clarification.(Template-1)\",\n                    \"languageTypeId\": 1,\n                    \"entitySegmentTypeId\": 4,\n                    \"notificationMessageTemplateConfigurationMappings\": [\n                        {\n                            \"placeholderKey\": 1,\n                            \"notificationMessageTemplatePlaceHolderTypeId\": 1,\n                            \"value\": \"string\"\n                        },\n                        {\n                            \"placeholderKey\": 2,\n                            \"notificationMessageTemplatePlaceHolderTypeId\": 4,\n                            \"value\": \"https://www.google.com/\"\n                        },\n                        {\n                            \"placeholderKey\": 3,\n                            \"notificationMessageTemplatePlaceHolderTypeId\": 7,\n                            \"value\": \"string\"\n                        },\n                        {\n                            \"placeholderKey\": 4,\n                            \"notificationMessageTemplatePlaceHolderTypeId\": 8,\n                            \"value\": \"string\"\n                        }\n                    ]\n                },\n                {\n                    \"elementName\": \"English_FinancialProductDistributor\",\n                    \"templateContent\": \"Hi {1}, to know more about why you should become an agent with us,  (ENGLISH-FINANCIAL) please click on this link! {2}\\nProceed to our branch office for more information! You may reach out to {3} on {4} for any clarification.(Template-1)\",\n                    \"languageTypeId\": 1,\n                    \"entitySegmentTypeId\": 5,\n                    \"notificationMessageTemplateConfigurationMappings\": [\n                        {\n                            \"placeholderKey\": 4,\n                            \"notificationMessageTemplatePlaceHolderTypeId\": 8,\n                            \"value\": \"string\"\n                        },\n                        {\n                            \"placeholderKey\": 3,\n                            \"notificationMessageTemplatePlaceHolderTypeId\": 7,\n                            \"value\": \"string\"\n                        },\n                        {\n                            \"placeholderKey\": 2,\n                            \"notificationMessageTemplatePlaceHolderTypeId\": 4,\n                            \"value\": \"https://www.google.com/\"\n                        },\n                        {\n                            \"placeholderKey\": 1,\n                            \"notificationMessageTemplatePlaceHolderTypeId\": 1,\n                            \"value\": \"string\"\n                        }\n                    ]\n                },\n                {\n                    \"elementName\": \"Hindi_Retirement\",\n                    \"templateContent\": \"Hi {1}, to know more about why you should become an agent with us,  (HINDI-RETIREMENT) please click on this link! {2}\\nProceed to our branch office for more information! You may reach out to {3} on {4} for any clarification.(Template-1)\",\n                    \"languageTypeId\": 2,\n                    \"entitySegmentTypeId\": 2,\n                    \"notificationMessageTemplateConfigurationMappings\": [\n                        {\n                            \"placeholderKey\": 1,\n                            \"notificationMessageTemplatePlaceHolderTypeId\": 1,\n                            \"value\": \"string\"\n                        },\n                        {\n                            \"placeholderKey\": 2,\n                            \"notificationMessageTemplatePlaceHolderTypeId\": 4,\n                            \"value\": \"https://www.google.com/\"\n                        },\n                        {\n                            \"placeholderKey\": 3,\n                            \"notificationMessageTemplatePlaceHolderTypeId\": 7,\n                            \"value\": \"string\"\n                        },\n                        {\n                            \"placeholderKey\": 4,\n                            \"notificationMessageTemplatePlaceHolderTypeId\": 8,\n                            \"value\": \"string\"\n                        }\n                    ]\n                },\n                {\n                    \"elementName\": \"Hindi_Small_Entrepreneur\",\n                    \"templateContent\": \"Hi {1}, to know more about why you should become an agent with us, (HINDI-SMALLEN) please click on this link! {2}\\nProceed to our branch office for more information! You may reach out to {3} on {4} for any clarification.(Template-1)\",\n                    \"languageTypeId\": 2,\n                    \"entitySegmentTypeId\": 3,\n                    \"notificationMessageTemplateConfigurationMappings\": [\n                        {\n                            \"placeholderKey\": 1,\n                            \"notificationMessageTemplatePlaceHolderTypeId\": 1,\n                            \"value\": \"string\"\n                        },\n                        {\n                            \"placeholderKey\": 2,\n                            \"notificationMessageTemplatePlaceHolderTypeId\": 4,\n                            \"value\": \"https://www.google.com/\"\n                        },\n                        {\n                            \"placeholderKey\": 3,\n                            \"notificationMessageTemplatePlaceHolderTypeId\": 7,\n                            \"value\": \"string\"\n                        },\n                        {\n                            \"placeholderKey\": 4,\n                            \"notificationMessageTemplatePlaceHolderTypeId\": 8,\n                            \"value\": \"string\"\n                        }\n                    ]\n                },\n                {\n                    \"elementName\": \"Hindi_Housemakers\",\n                    \"templateContent\": \"Hi {1}, to know more about why you should become an agent with us, (HINDI-HOUSEMAKERS)please click on this link! {2}\\nProceed to our branch office for more information! You may reach out to {3} on {4} for any clarification.(Template-1)\",\n                    \"languageTypeId\": 2,\n                    \"entitySegmentTypeId\": 4,\n                    \"notificationMessageTemplateConfigurationMappings\": [\n                        {\n                            \"placeholderKey\": 1,\n                            \"notificationMessageTemplatePlaceHolderTypeId\": 1,\n                            \"value\": \"string\"\n                        },\n                        {\n                            \"placeholderKey\": 2,\n                            \"notificationMessageTemplatePlaceHolderTypeId\": 4,\n                            \"value\": \"https://www.google.com/\"\n                        },\n                        {\n                            \"placeholderKey\": 3,\n                            \"notificationMessageTemplatePlaceHolderTypeId\": 7,\n                            \"value\": \"string\"\n                        },\n                        {\n                            \"placeholderKey\": 4,\n                            \"notificationMessageTemplatePlaceHolderTypeId\": 8,\n                            \"value\": \"string\"\n                        }\n                    ]\n                },\n                {\n                    \"elementName\": \"Hindi_Financial_Product_Distributor\",\n                    \"templateContent\": \"Hi {1}, to know more about why you should become an agent with us,(HINDI-FINANCIAL) please click on this link! {2}\\nProceed to our branch office for more information! You may reach out to {3} on {4} for any clarification.(Template-1)\",\n                    \"languageTypeId\": 2,\n                    \"entitySegmentTypeId\": 5,\n                    \"notificationMessageTemplateConfigurationMappings\": [\n                        {\n                            \"placeholderKey\": 1,\n                            \"notificationMessageTemplatePlaceHolderTypeId\": 1,\n                            \"value\": \"string\"\n                        },\n                        {\n                            \"placeholderKey\": 2,\n                            \"notificationMessageTemplatePlaceHolderTypeId\": 4,\n                            \"value\": \"https://www.google.com/\"\n                        },\n                        {\n                            \"placeholderKey\": 3,\n                            \"notificationMessageTemplatePlaceHolderTypeId\": 7,\n                            \"value\": \"string\"\n                        },\n                        {\n                            \"placeholderKey\": 4,\n                            \"notificationMessageTemplatePlaceHolderTypeId\": 8,\n                            \"value\": \"string\"\n                        }\n                    ]\n                }\n            ]\n    \n}"
								},
								"url": {
									"raw": "{{url}}/api/NotificationMessageTemplate",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"NotificationMessageTemplate"
									]
								}
							},
							"response": []
						},
						{
							"name": "[101] [PWT NAT ZONE_SEGMENT] craete Rule#########",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9b7b9e2e-8674-4d11-b9c2-de3b5c25dc3f",
										"exec": [
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(201);",
											"     var jsonData = pm.response.json();",
											"     pm.environment.set(\"ruleId\", jsonData.ruleId);",
											"     ",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e9f50de3-c2ed-4ae5-88af-5fa1255fd65b",
										"exec": [
											"pm.environment.set(\"entitySourceSystemId\",1);",
											"pm.environment.set(\"entityStateType\",1);",
											"pm.environment.set(\"entitySubStateType\",1);",
											"",
											"console.log(\"STARTED: ***********Segment Template End to End/********************************\");",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"rule\": {\r\n    \"id\": 0,\r\n    \"name\": \" PWT Stage \",\r\n    \"description\": \"Prospect_Warming_tool pre NAT \",\r\n    \"ruleType\": 2,\r\n    \"frequencyType\": 1,\r\n    \"entitySourceSystemId\": {{entitySourceSystemId}},\r\n    \"entityStateType\": {{entityStateType}},\r\n    \"entitySubStateType\": {{entitySubStateType}},\r\n     \"ruleFrequencies\": [\r\n      {\r\n        \"id\": 0,\r\n        \"hour\": 0,\r\n        \"minute\": 15\r\n      }\r\n    ],\r\n    \"ruleLineItems\": [\r\n       {\r\n        \"id\": 0,\r\n        \"ruleLineItemType\": 1,\r\n        \"name\": \"PreNAT_ 1st nudge\",\r\n        \"parentId\": \"0\",\r\n        \"sequence\": 1,\r\n        \"sendToPrimary\": true,\r\n        \"intendedPositiveOutput\": \"1st Nudge\",\r\n        \"ruleLineItemConditions\": [\r\n          {\r\n            \"value\": \"2\",\r\n            \"logicalOperatorType\": 1,\r\n            \"sequence\": 1,\r\n            \"ruleCategoryId\": 10,\r\n            \"mathOperatorOnValue\": 1\r\n          }\r\n        ],\r\n        \"ruleLineItemResults\": [\r\n          {\r\n            \"notificationChannelType\": 2,\r\n            \"notificationMessageTemplateId\":{{notificationMessageTemplateId1}},\r\n            \"isSMSAsFallBack\": true\r\n          }\r\n        ]\r\n      },\r\n\t   {\r\n        \"id\": 0,\r\n        \"ruleLineItemType\": 1,\r\n        \"name\": \"PreNAT_ 2nd nudge\",\r\n        \"parentId\": \"0\",\r\n        \"sequence\": 2,\r\n        \"sendToPrimary\": true,\r\n        \"intendedPositiveOutput\": \"2nd Nudge\",\r\n        \"ruleLineItemConditions\": [\r\n          {\r\n            \"value\": \"2\",\r\n            \"logicalOperatorType\": 1,\r\n            \"sequence\": 1,\r\n            \"ruleCategoryId\": 11,\r\n            \"mathOperatorOnValue\": 1\r\n          }\r\n        ],\r\n        \"ruleLineItemResults\": [\r\n          {\r\n            \"notificationChannelType\": 2,\r\n            \"notificationMessageTemplateId\":{{notificationMessageTemplateId2}},\r\n            \"isSMSAsFallBack\": true\r\n          }\r\n        ]\r\n      },\r\n\t   {\r\n        \"id\": 0,\r\n        \"ruleLineItemType\": 3,\r\n        \"name\": \"PreNAT_ end line\",\r\n        \"parentId\": \"0\",\r\n        \"sequence\": 9,\r\n        \"sendToPrimary\": true,\r\n        \"intendedPositiveOutput\": \"End line item\",\r\n        \"ruleLineItemConditions\": [\r\n          {\r\n            \"value\": \"2\",\r\n            \"logicalOperatorType\": 1,\r\n            \"sequence\": 1,\r\n            \"ruleCategoryId\": 11,\r\n            \"mathOperatorOnValue\": 1\r\n          }\r\n        ],\r\n        \"ruleLineItemResults\": [\r\n          {\r\n            \"notificationChannelType\": 2,\r\n            \"notificationMessageTemplateId\": 9,\r\n            \"isSMSAsFallBack\": true\r\n          }\r\n        ]\r\n      }\r\n    ]\r\n  }\r\n}"
								},
								"url": {
									"raw": "{{url}}/api/Rule",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"Rule"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Nudge Receiver Entity",
					"item": [
						{
							"name": "EN-Default",
							"item": [
								{
									"name": "[102]read Rule By Rule ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b21dfda3-5d01-4762-bed6-681e39e637c4",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Your test name\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.rule.ruleLineItems[0].id).to.exist;",
													"    pm.environment.set(\"ruleLineItemId\",jsonData.rule.ruleLineItems[0].id);",
													"    var size = jsonData.rule.ruleLineItems.length;",
													"    pm.environment.set(\"totalrulelineitems\",size-1);",
													"    ",
													"     pm.environment.set(\"TemplateName\",jsonData.rule.ruleLineItems[0].ruleLineItemResults[0].notificationMessageTemplateName);",
													"    ",
													"",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "c13a064e-a99f-4a04-b367-3b06ffed2c2a",
												"exec": [
													"console.log(\"STARTED: ***********EN-Default********************************\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/api/Rule?ruleId={{ruleId}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"Rule"
											],
											"query": [
												{
													"key": "ruleId",
													"value": "{{ruleId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[103][EN-DEFAULT]create entity*************",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b45ca225-09f2-4fd4-a05e-4c3d13a6dbf0",
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"   ",
													"    let EntityJSON = pm.response.json();",
													"    pm.expect(EntityJSON.entityId).to.exist;",
													"    pm.expect(EntityJSON.isSaved).to.equal(true);",
													"     pm.environment.set(\"entityId\", EntityJSON.entityId);",
													"    console.log(EntityJSON);",
													"});",
													"",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "0e9b9ca9-9c49-46e8-ac8c-768fb21ce4b8",
												"exec": [
													"var milliseconds = new Date().getTime();",
													"var codeSeed = \"Auto-\";",
													"pm.environment.set(\"entityCode\", codeSeed.concat(milliseconds));",
													"",
													"",
													"var codeSeed = \"Auto2nd-\";",
													"pm.environment.set(\"secondaryEntityCode\", codeSeed.concat(milliseconds));",
													"",
													"var moment = require('moment');",
													"pm.environment.set(\"timestamp\", moment().format(\"YYYY-MM-DDThh:mm:ss.SSS\"))   ;",
													"console.log(pm.variables.get(\"timestamp\"));",
													"",
													"",
													"var moment = require('moment');",
													"pm.environment.set(\"pickUpTime\", moment().subtract(2, 'days').format(\"YYYY-MM-DDThh:mm:ss.SSS\")) ;",
													"console.log(pm.variables.get(\"pickUpTime\"));",
													"",
													"let ran =  _.random(1111111111, 9999999999);",
													"pm.environment.set(\"mobileNumberNAT\",ran);",
													"",
													"pm.environment.set(\"entitySegmentTypeId\", 1);",
													"pm.environment.set(\"languageTypeId\", 1);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"id\": 0,\r\n  \"entityCode\": \"{{entityCode}}\",\r\n  \"name\": \"PreNAT-{{name}}\",\r\n  \"mobileNumber\": {{mobileNumberNAT}},\r\n  \"entityCreationDate\": \"{{timestamp}}\",\r\n  \"entitySourceSystemId\": {{entitySourceSystemId}},\r\n  \"entityStateDate\": \"{{pickUpTime}}\",\r\n  \"entityStateType\": {{entityStateType}},\r\n  \"entitySubStateType\":{{entitySubStateType}},\r\n  \"entityStateValue\": \" {{entityStateValue}} \",\r\n  \"secondaryEntityCode\": \"{{secondaryEntityCode}}\",\r\n  \"secondaryName\": \"{{secondaryName}}\",\r\n  \"secondaryMobileNumber\": {{secondaryMobileNumber}},\r\n  \"customField1\":\"location-pune\",\r\n  \"customField2\":\"state-MH\",\r\n  \"customFieldUrl\":\"https://www.w3schools.com/xml/xpath_nodes.asp\",\r\n  \"entitySegmentTypeId\": {{entitySegmentTypeId}},\r\n  \"languageTypeId\": {{languageTypeId}}\r\n}\r\n"
										},
										"url": {
											"raw": "{{url}}/api/Entity",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"Entity"
											]
										}
									},
									"response": []
								},
								{
									"name": "[104]read entity by entityId",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "24ac8dfd-18cf-476f-8c08-1bd93aad7e83",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"verify mobile number\", function () {",
													"    var jsonData = pm.response.json();",
													"    ",
													"    // let Z = JSON.parse(jsonData.mobileNumber);",
													"    // pm.expect(Z).to.eql(pm.variables.get(\"mobileNumberNAT\"));",
													"    pm.environment.set(\"mobileNumber\",jsonData.mobileNumber);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/api/Entity?entityId={{entityId}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"Entity"
											],
											"query": [
												{
													"key": "entityId",
													"value": "{{entityId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[105]Trigger RuleExecuteEvent",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "24ac8dfd-18cf-476f-8c08-1bd93aad7e83",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"RuleExecution\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.eql(true);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/api/RuleExecution?ruleId={{ruleId}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"RuleExecution"
											],
											"query": [
												{
													"key": "ruleId",
													"value": "{{ruleId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[106]TriggerExecuteNotificationMessage",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "24ac8dfd-18cf-476f-8c08-1bd93aad7e83",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Your test name\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.isExecuted).to.eql(true);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/api/JobExecution?jobId=15",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"JobExecution"
											],
											"query": [
												{
													"key": "jobId",
													"value": "15"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[107]SearchMessageSentViaRule",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "24ac8dfd-18cf-476f-8c08-1bd93aad7e83",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"to check notifications exist\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.notifications).to.exist;",
													"    var size1 = jsonData.notifications.length;",
													"    console.log(\"Size: \",size1);",
													"    ",
													"    var array=JSON.parse(pm.environment.get(\"ruleLineItemId\"));",
													"    ",
													"     pm.expect((jsonData.notifications[0].ruleLineItemId)).to.eql(array);",
													"",
													"    pm.environment.set(\"TotalNudgesenttoentity\",size1);",
													"  ",
													"    console.log( \"[PRE-NAT]first nudge of entity is associated with  rulelineitemId : \"+pm.variables.get(\"ruleLineItemId\") );",
													"",
													"    ",
													"",
													"",
													"});",
													"pm.test(\"Nudge delivery Verification\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.notifications[0].messageContent).to.eql(\"\");",
													"    pm.expect(jsonData.notifications[0].mobileNumber).to.eql(\"\");",
													"    ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/api/NotificationMessageProcessor/SearchMessageSentViaRule?entityId={{entityId}}&ruleId={{ruleId}}&ruleLineItemId={{ruleLineItemId}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"NotificationMessageProcessor",
												"SearchMessageSentViaRule"
											],
											"query": [
												{
													"key": "entityId",
													"value": "{{entityId}}"
												},
												{
													"key": "ruleId",
													"value": "{{ruleId}}"
												},
												{
													"key": "ruleLineItemId",
													"value": "{{ruleLineItemId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "read template",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5f00d9c5-a80b-4f94-9b62-c4c9847be638",
												"exec": [
													"pm.test(\"extract Template Content\", function () {\r",
													"\r",
													" var jsonData = pm.response.json();\r",
													" var size = jsonData.notificationMessageTemplates[0].notificationMessageTemplateLineItems.length;\r",
													"\r",
													" console.log(size);\r",
													"\r",
													" for (let i=0; i<size; i++)\r",
													"\r",
													" {\r",
													"\r",
													"    let X =JSON.parse(jsonData.notificationMessageTemplates[0].notificationMessageTemplateLineItems[i].languageTypeId);\r",
													"\r",
													"    let Y =jsonData.notificationMessageTemplates[0].notificationMessageTemplateLineItems[i].entitySegmentTypeId;\r",
													"\r",
													"    if( X==pm.environment.get(\"languageTypeId\") & Y==pm.environment.get(\"entitySegmentTypeId\"))\r",
													"\r",
													"    {\r",
													"\r",
													"         console.log(\"TemplateContent retrived for: \");\r",
													"\r",
													"         console.log(\"Segmet:\"       +Y);\r",
													"\r",
													"         console.log(\"lanaguage:\"    +X);\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"         pm.environment.set(\"TemplateContent\",jsonData.notificationMessageTemplates[0].notificationMessageTemplateLineItems[i].templateContent);\r",
													"        break;\r",
													"     }\r",
													"\r",
													"    else{\r",
													"        \r",
													"        pm.environment.set(\"TemplateContent\", \"Template Not Found!\");\r",
													"    }\r",
													"\r",
													" }\r",
													"});\r",
													"\r",
													" "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/api/NotificationMessageTemplate/Search?templateName={{TemplateName}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"NotificationMessageTemplate",
												"Search"
											],
											"query": [
												{
													"key": "templateName",
													"value": "{{TemplateName}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[126]notificationMessageProcessorHistory Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "24ac8dfd-18cf-476f-8c08-1bd93aad7e83",
												"exec": [
													"pm.test(\"status code 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    ",
													"",
													"    ",
													"});",
													"",
													"pm.test(\"extract message\", function () {",
													"    ",
													"    console.log(\"Nudge Details:\");",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.notificationMessageProcessorHistoryRecords).to.exist;",
													"    var size = jsonData.notificationMessageProcessorHistoryRecords.length;",
													"    ",
													"    var count=0;",
													"     for ( var i=0;i<size;i++){",
													"   if((jsonData.notificationMessageProcessorHistoryRecords[i].mobileNumber)==(pm.environment.get(\"MobileNuber\"))){",
													"  ",
													"   count++;",
													"   ",
													"pm.environment.set(\"TotalNudgesenttoMobilenum\",count );",
													"   ",
													"pm.environment.set(\"messageContent\",jsonData.notificationMessageProcessorHistoryRecords[0].messageContent);",
													"",
													"pm.environment.set(\"NudgeReceivedVia_NotificationChannelType\",jsonData.notificationMessageProcessorHistoryRecords[i].notificationChannelTypeId);",
													"console.log(\"nudgeNudgeReceivedVia_NotificationChannelType :\" +pm.variables.get(\"NudgeReceivedVia_NotificationChannelType\"));",
													"",
													"}",
													"   ",
													"    }",
													"    console.log(\"Number of nudges sent to mobile num  : \"+pm.variables.get(\"TotalNudgesenttoMobilenum\"));",
													"",
													"});",
													"",
													"pm.test(\"extract bitly url\",function(){",
													"",
													"var string = pm.variables.get(\"messageContent\");",
													"var bitly = string.match(/\\bhttps?:\\/\\/\\S+/gi);",
													"pm.environment.set(\"bitly\",bitly);",
													"console.log(bitly);",
													" ",
													"",
													"});",
													"",
													"",
													"",
													"",
													"pm.test(\"Verify MessageConent with TemplateContent \", function () {",
													"    pm.expect(pm.environment.get(\"messageContent\")).to.include(\"(ENGLISH-DEFAULT)\");",
													"    ",
													"    ",
													"",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/api/NotificationMessageProcessedHistory",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"NotificationMessageProcessedHistory"
											]
										}
									},
									"response": []
								},
								{
									"name": "[110]  1st change last nudge sent date",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "a66f8df1-605f-4640-aa35-cd0d72b96dff",
												"exec": [
													"var moment = require('moment');",
													"pm.environment.set(\"pickUpTime\", moment().subtract(2, 'days').format(\"YYYY-MM-DDThh:mm:ss.SSS\")) ;",
													"console.log(pm.variables.get(\"pickUpTime\"));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "23d9c19d-f037-4abd-9ce9-a7494827aacd",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Your test name\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.id).to.exist;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"entityId\": {{entityId}},\r\n  \"ruleId\": {{ruleId}},\r\n  \"ruleLineItemId\": {{ruleLineItemId}},\r\n  \"createdDate\": \"{{pickUpTime}}\"\r\n}"
										},
										"url": {
											"raw": "{{url}}/api/Rule/UpdateEntityRuleMapping",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"Rule",
												"UpdateEntityRuleMapping"
											]
										}
									},
									"response": []
								},
								{
									"name": "[111]read Rule By Rule ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b21dfda3-5d01-4762-bed6-681e39e637c4",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Your test name\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.rule.ruleLineItems[0].id).to.exist;",
													"    pm.environment.set(\"ruleLineItemId\",jsonData.rule.ruleLineItems[1].id);",
													"    ",
													"    pm.environment.set(\"TemplateName\",jsonData.rule.ruleLineItems[1].ruleLineItemResults[0].notificationMessageTemplateName);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/api/Rule?ruleId={{ruleId}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"Rule"
											],
											"query": [
												{
													"key": "ruleId",
													"value": "{{ruleId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "read template Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5f00d9c5-a80b-4f94-9b62-c4c9847be638",
												"exec": [
													"pm.test(\"extract Template Content\", function () {\r",
													"\r",
													" var jsonData = pm.response.json();\r",
													" var size = jsonData.notificationMessageTemplates[0].notificationMessageTemplateLineItems.length;\r",
													"\r",
													" console.log(size);\r",
													"\r",
													" for (let i=0; i<size; i++)\r",
													"\r",
													" {\r",
													"\r",
													"    let X =JSON.parse(jsonData.notificationMessageTemplates[0].notificationMessageTemplateLineItems[i].languageTypeId);\r",
													"\r",
													"    let Y =jsonData.notificationMessageTemplates[0].notificationMessageTemplateLineItems[i].entitySegmentTypeId;\r",
													"\r",
													"    if( X==pm.environment.get(\"languageTypeId\") & Y==pm.environment.get(\"entitySegmentTypeId\"))\r",
													"\r",
													"    {\r",
													"\r",
													"         console.log(\"TemplateContent retrived for: \");\r",
													"\r",
													"         console.log(\"Segmet:\"       +Y);\r",
													"\r",
													"         console.log(\"lanaguage:\"    +X);\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"         pm.environment.set(\"TemplateContent\",jsonData.notificationMessageTemplates[0].notificationMessageTemplateLineItems[i].templateContent);\r",
													"        break;\r",
													"     }\r",
													"\r",
													"    else{\r",
													"        \r",
													"        pm.environment.set(\"TemplateContent\", \"Template Not Found!\");\r",
													"    }\r",
													"\r",
													" }\r",
													"});\r",
													"\r",
													" "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/api/NotificationMessageTemplate/Search?templateName={{TemplateName}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"NotificationMessageTemplate",
												"Search"
											],
											"query": [
												{
													"key": "templateName",
													"value": "{{TemplateName}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[112]Trigger RuleExecuteEvent",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "24ac8dfd-18cf-476f-8c08-1bd93aad7e83",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"RuleExecution\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.eql(true);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/api/RuleExecution?ruleId={{ruleId}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"RuleExecution"
											],
											"query": [
												{
													"key": "ruleId",
													"value": "{{ruleId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[113]TriggerExecuteNotificationMessage",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "24ac8dfd-18cf-476f-8c08-1bd93aad7e83",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Your test name\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.isExecuted).to.eql(true);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/api/JobExecution?jobId=15",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"JobExecution"
											],
											"query": [
												{
													"key": "jobId",
													"value": "15"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[107]SearchMessageSentViaRule Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "24ac8dfd-18cf-476f-8c08-1bd93aad7e83",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"to check notifications exist\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.notifications).to.exist;",
													"    var size1 = jsonData.notifications.length;",
													"  ",
													"    ",
													"    var array=JSON.parse(pm.environment.get(\"ruleLineItemId\"));",
													"    ",
													"     pm.expect((jsonData.notifications[0].ruleLineItemId)).to.eql(array);",
													"",
													"    pm.environment.set(\"TotalNudgesenttoentity\",size1);",
													"  ",
													"    console.log( \"[PRE-NAT]first nudge of entity is associated with  rulelineitemId : \"+pm.variables.get(\"ruleLineItemId\") );",
													"",
													"    ",
													"",
													"",
													"});",
													"pm.test(\"Nudge delivery Verification\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.notifications[0].messageContent).to.eql(\"\");",
													"    pm.expect(jsonData.notifications[0].mobileNumber).to.eql(\"\");",
													"    ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/api/NotificationMessageProcessor/SearchMessageSentViaRule?entityId={{entityId}}&ruleId={{ruleId}}&ruleLineItemId={{ruleLineItemId}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"NotificationMessageProcessor",
												"SearchMessageSentViaRule"
											],
											"query": [
												{
													"key": "entityId",
													"value": "{{entityId}}"
												},
												{
													"key": "ruleId",
													"value": "{{ruleId}}"
												},
												{
													"key": "ruleLineItemId",
													"value": "{{ruleLineItemId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[126]notificationMessageProcessorHistory",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "24ac8dfd-18cf-476f-8c08-1bd93aad7e83",
												"exec": [
													"pm.test(\"status code 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    ",
													"",
													"    ",
													"});",
													"",
													"pm.test(\"extract message\", function () {",
													"    ",
													"    console.log(\"Nudge Details:\");",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.notificationMessageProcessorHistoryRecords).to.exist;",
													"    var size = jsonData.notificationMessageProcessorHistoryRecords.length;",
													"    ",
													"    var count=0;",
													"     for ( var i=0;i<size;i++){",
													"   if((jsonData.notificationMessageProcessorHistoryRecords[i].mobileNumber)==(pm.environment.get(\"MobileNuber\"))){",
													"  ",
													"   count++;",
													"   ",
													"pm.environment.set(\"TotalNudgesenttoMobilenum\",count );",
													"   ",
													"pm.environment.set(\"messageContent\",jsonData.notificationMessageProcessorHistoryRecords[0].messageContent);",
													"",
													"pm.environment.set(\"NudgeReceivedVia_NotificationChannelType\",jsonData.notificationMessageProcessorHistoryRecords[i].notificationChannelTypeId);",
													"console.log(\"nudgeNudgeReceivedVia_NotificationChannelType :\" +pm.variables.get(\"NudgeReceivedVia_NotificationChannelType\"));",
													"",
													"}",
													"   ",
													"    }",
													"    console.log(\"Number of nudges sent to mobile num  : \"+pm.variables.get(\"TotalNudgesenttoMobilenum\"));",
													"",
													"});",
													"",
													"pm.test(\"extract bitly url\",function(){",
													"",
													"var string = pm.variables.get(\"messageContent\");",
													"var bitly = string.match(/\\bhttps?:\\/\\/\\S+/gi);",
													"pm.environment.set(\"bitly\",bitly);",
													"console.log(bitly);",
													" ",
													"",
													"});",
													"",
													"",
													"",
													"",
													"pm.test(\"Verify MessageConent with TemplateContent \", function () {",
													"    pm.expect(pm.environment.get(\"messageContent\")).to.include(\"(ENGLISH-DEFAULT)\");",
													"    ",
													"    ",
													"",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/api/NotificationMessageProcessedHistory",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"NotificationMessageProcessedHistory"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "ecabcb97-e1be-4b36-acb8-c5c7001e9fdd",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "a112bef0-a995-4d6e-9822-736feabfcfd0",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "EN/Hi-retirement",
							"item": [
								{
									"name": "EN-RETIREMENT",
									"item": [
										{
											"name": "[102]read Rule By Rule ID",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "b21dfda3-5d01-4762-bed6-681e39e637c4",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"pm.test(\"Your test name\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.rule.ruleLineItems[0].id).to.exist;",
															"    pm.environment.set(\"ruleLineItemId\",jsonData.rule.ruleLineItems[0].id);",
															"    var size = jsonData.rule.ruleLineItems.length;",
															"    pm.environment.set(\"totalrulelineitems\",size-1);",
															"    ",
															"     pm.environment.set(\"TemplateName\",jsonData.rule.ruleLineItems[0].ruleLineItemResults[0].notificationMessageTemplateName);",
															"    ",
															"",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "678c31b4-fbd1-4e9b-b1b2-cfc412182115",
														"exec": [
															"console.log(\"STARTED: **************[EN-retirement]********************************\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{url}}/api/Rule?ruleId={{ruleId}}",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"Rule"
													],
													"query": [
														{
															"key": "ruleId",
															"value": "{{ruleId}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "[103] [EN-RETIREMENT] create entity*************",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "b45ca225-09f2-4fd4-a05e-4c3d13a6dbf0",
														"exec": [
															"pm.test(\"Status code is 201\", function () {",
															"    pm.response.to.have.status(201);",
															"   ",
															"    let EntityJSON = pm.response.json();",
															"    pm.expect(EntityJSON.entityId).to.exist;",
															"    pm.expect(EntityJSON.isSaved).to.equal(true);",
															"     pm.environment.set(\"entityId\", EntityJSON.entityId);",
															"    console.log(EntityJSON);",
															"});",
															"",
															"",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "0e9b9ca9-9c49-46e8-ac8c-768fb21ce4b8",
														"exec": [
															"var milliseconds = new Date().getTime();",
															"var codeSeed = \"Auto-\";",
															"pm.environment.set(\"entityCode\", codeSeed.concat(milliseconds));",
															"",
															"",
															"var codeSeed = \"Auto2nd-\";",
															"pm.environment.set(\"secondaryEntityCode\", codeSeed.concat(milliseconds));",
															"",
															"var moment = require('moment');",
															"pm.environment.set(\"timestamp\", moment().format(\"YYYY-MM-DDThh:mm:ss.SSS\"))   ;",
															"console.log(pm.variables.get(\"timestamp\"));",
															"",
															"",
															"var moment = require('moment');",
															"pm.environment.set(\"pickUpTime\", moment().subtract(2, 'days').format(\"YYYY-MM-DDThh:mm:ss.SSS\")) ;",
															"console.log(pm.variables.get(\"pickUpTime\"));",
															"",
															"let ran =  _.random(1111111111, 9999999999);",
															"pm.environment.set(\"mobileNumberNAT\",ran);",
															"",
															"pm.environment.set(\"entitySegmentTypeId\", 2);",
															"pm.environment.set(\"languageTypeId\", 1);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"id\": 0,\r\n  \"entityCode\": \"{{entityCode}}\",\r\n  \"name\": \"PreNAT-{{name}}\",\r\n  \"mobileNumber\": {{mobileNumberNAT}},\r\n  \"entityCreationDate\": \"{{timestamp}}\",\r\n  \"entitySourceSystemId\": {{entitySourceSystemId}},\r\n  \"entityStateDate\": \"{{pickUpTime}}\",\r\n  \"entityStateType\": {{entityStateType}},\r\n  \"entitySubStateType\":{{entitySubStateType}},\r\n  \"entityStateValue\": \" {{entityStateValue}} \",\r\n  \"secondaryEntityCode\": \"{{secondaryEntityCode}}\",\r\n  \"secondaryName\": \"{{secondaryName}}\",\r\n  \"secondaryMobileNumber\": {{secondaryMobileNumber}},\r\n  \"customField1\":\"location-pune\",\r\n  \"customField2\":\"state-MH\",\r\n  \"customFieldUrl\":\"https://www.w3schools.com/xml/xpath_nodes.asp\",\r\n  \"entitySegmentTypeId\": {{entitySegmentTypeId}},\r\n  \"languageTypeId\": {{languageTypeId}}\r\n}\r\n"
												},
												"url": {
													"raw": "{{url}}/api/Entity",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"Entity"
													]
												}
											},
											"response": []
										},
										{
											"name": "[104]read entity by entityId",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "24ac8dfd-18cf-476f-8c08-1bd93aad7e83",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"pm.test(\"verify mobile number\", function () {",
															"    var jsonData = pm.response.json();",
															"    //  let Z = JSON.parse(jsonData.mobileNumber);",
															"    // pm.expect(Z).to.eql(pm.variables.get(\"mobileNumberNAT\"));",
															"    pm.environment.set(\"mobileNumber\",jsonData.mobileNumber);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{url}}/api/Entity?entityId={{entityId}}",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"Entity"
													],
													"query": [
														{
															"key": "entityId",
															"value": "{{entityId}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "[105]Trigger RuleExecuteEvent",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "24ac8dfd-18cf-476f-8c08-1bd93aad7e83",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"is rule executed\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData).to.eql(true);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{url}}/api/RuleExecution?ruleId={{ruleId}}",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"RuleExecution"
													],
													"query": [
														{
															"key": "ruleId",
															"value": "{{ruleId}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "[106]TriggerExecuteNotificationMessage",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "24ac8dfd-18cf-476f-8c08-1bd93aad7e83",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Your test name\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.isExecuted).to.eql(true);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{url}}/api/JobExecution?jobId=15",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"JobExecution"
													],
													"query": [
														{
															"key": "jobId",
															"value": "15"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "[107]SearchMessageSentViaRule",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "24ac8dfd-18cf-476f-8c08-1bd93aad7e83",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"to check notifications exist\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.notifications).to.exist;",
															"    var size1 = jsonData.notifications.length;",
															"  ",
															"    ",
															"    var array=JSON.parse(pm.environment.get(\"ruleLineItemId\"));",
															"    ",
															"     pm.expect((jsonData.notifications[0].ruleLineItemId)).to.eql(array);",
															"",
															"    pm.environment.set(\"TotalNudgesenttoentity\",size1);",
															"  ",
															"    console.log( \"[PRE-NAT]first nudge of entity is associated with  rulelineitemId : \"+pm.variables.get(\"ruleLineItemId\") );",
															"",
															"    ",
															"",
															"",
															"});",
															"pm.test(\"Nudge delivery Verification\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.notifications[0].messageContent).to.eql(\"\");",
															"    pm.expect(jsonData.notifications[0].mobileNumber).to.eql(\"\");",
															"    ",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{url}}/api/NotificationMessageProcessor/SearchMessageSentViaRule?entityId={{entityId}}&ruleId={{ruleId}}&ruleLineItemId={{ruleLineItemId}}",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"NotificationMessageProcessor",
														"SearchMessageSentViaRule"
													],
													"query": [
														{
															"key": "entityId",
															"value": "{{entityId}}"
														},
														{
															"key": "ruleId",
															"value": "{{ruleId}}"
														},
														{
															"key": "ruleLineItemId",
															"value": "{{ruleLineItemId}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "read notification msg template  Copy",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "5f00d9c5-a80b-4f94-9b62-c4c9847be638",
														"exec": [
															"pm.test(\"extract Template Content\", function () {\r",
															"\r",
															" var jsonData = pm.response.json();\r",
															" var size = jsonData.notificationMessageTemplates[0].notificationMessageTemplateLineItems.length;\r",
															"\r",
															" console.log(size);\r",
															"\r",
															" for (let i=0; i<size; i++)\r",
															"\r",
															" {\r",
															"\r",
															"    let X =JSON.parse(jsonData.notificationMessageTemplates[0].notificationMessageTemplateLineItems[i].languageTypeId);\r",
															"\r",
															"    let Y =jsonData.notificationMessageTemplates[0].notificationMessageTemplateLineItems[i].entitySegmentTypeId;\r",
															"\r",
															"    if( X==pm.environment.get(\"languageTypeId\") & Y==pm.environment.get(\"entitySegmentTypeId\"))\r",
															"\r",
															"    {\r",
															"\r",
															"         console.log(\"TemplateContent retrived for: \");\r",
															"\r",
															"         console.log(\"Segmet:\"       +Y);\r",
															"\r",
															"         console.log(\"lanaguage:\"    +X);\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"         pm.environment.set(\"TemplateContent\",jsonData.notificationMessageTemplates[0].notificationMessageTemplateLineItems[i].templateContent);\r",
															"        break;\r",
															"     }\r",
															"\r",
															"    else{\r",
															"        \r",
															"        pm.environment.set(\"TemplateContent\", \"Template Not Found!\");\r",
															"    }\r",
															"\r",
															" }\r",
															"});\r",
															"\r",
															" "
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{url}}/api/NotificationMessageTemplate/Search?templateName={{TemplateName}}",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"NotificationMessageTemplate",
														"Search"
													],
													"query": [
														{
															"key": "templateName",
															"value": "{{TemplateName}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "[126]notificationMessageProcessorHistory",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "24ac8dfd-18cf-476f-8c08-1bd93aad7e83",
														"exec": [
															"pm.test(\"status code 200\", function () {",
															"    pm.response.to.have.status(200);",
															"    ",
															"",
															"    ",
															"});",
															"",
															"pm.test(\"extract message\", function () {",
															"    ",
															"    console.log(\"Nudge Details:\");",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.notificationMessageProcessorHistoryRecords).to.exist;",
															"    var size = jsonData.notificationMessageProcessorHistoryRecords.length;",
															"    ",
															"    var count=0;",
															"     for ( var i=0;i<size;i++){",
															"   if((jsonData.notificationMessageProcessorHistoryRecords[i].mobileNumber)==(pm.environment.get(\"MobileNuber\"))){",
															"  ",
															"   count++;",
															"   ",
															"pm.environment.set(\"TotalNudgesenttoMobilenum\",count );",
															"   ",
															"pm.environment.set(\"messageContent\",jsonData.notificationMessageProcessorHistoryRecords[0].messageContent);",
															"",
															"pm.environment.set(\"NudgeReceivedVia_NotificationChannelType\",jsonData.notificationMessageProcessorHistoryRecords[i].notificationChannelTypeId);",
															"console.log(\"nudgeNudgeReceivedVia_NotificationChannelType :\" +pm.variables.get(\"NudgeReceivedVia_NotificationChannelType\"));",
															"",
															"}",
															"   ",
															"    }",
															"    console.log(\"Number of nudges sent to mobile num  : \"+pm.variables.get(\"TotalNudgesenttoMobilenum\"));",
															"",
															"});",
															"",
															"pm.test(\"extract bitly url\",function(){",
															"",
															"var string = pm.variables.get(\"messageContent\");",
															"var bitly = string.match(/\\bhttps?:\\/\\/\\S+/gi);",
															"pm.environment.set(\"bitly\",bitly);",
															"console.log(bitly);",
															" ",
															"",
															"});",
															"",
															"",
															"",
															"",
															"pm.test(\"Verify MessageConent with TemplateContent \", function () {",
															"    pm.expect(pm.environment.get(\"messageContent\")).to.include(\"(ENGLISH-RETIREMENT)\");",
															"    ",
															"    ",
															"",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{url}}/api/NotificationMessageProcessedHistory",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"NotificationMessageProcessedHistory"
													]
												}
											},
											"response": []
										},
										{
											"name": "[110]  1st change last nudge sent date",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "a66f8df1-605f-4640-aa35-cd0d72b96dff",
														"exec": [
															"var moment = require('moment');",
															"pm.environment.set(\"pickUpTime\", moment().subtract(2, 'days').format(\"YYYY-MM-DDThh:mm:ss.SSS\")) ;",
															"console.log(pm.variables.get(\"pickUpTime\"));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "23d9c19d-f037-4abd-9ce9-a7494827aacd",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Your test name\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.id).to.exist;",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"entityId\": {{entityId}},\r\n  \"ruleId\": {{ruleId}},\r\n  \"ruleLineItemId\": {{ruleLineItemId}},\r\n  \"createdDate\": \"{{pickUpTime}}\"\r\n}"
												},
												"url": {
													"raw": "{{url}}/api/Rule/UpdateEntityRuleMapping",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"Rule",
														"UpdateEntityRuleMapping"
													]
												}
											},
											"response": []
										},
										{
											"name": "[111]read Rule By Rule ID",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "b21dfda3-5d01-4762-bed6-681e39e637c4",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"pm.test(\"Your test name\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.rule.ruleLineItems[0].id).to.exist;",
															"    pm.environment.set(\"ruleLineItemId\",jsonData.rule.ruleLineItems[1].id);",
															"    ",
															"    pm.environment.set(\"TemplateName\",jsonData.rule.ruleLineItems[1].ruleLineItemResults[0].notificationMessageTemplateName);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{url}}/api/Rule?ruleId={{ruleId}}",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"Rule"
													],
													"query": [
														{
															"key": "ruleId",
															"value": "{{ruleId}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "[112]Trigger RuleExecuteEvent",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "24ac8dfd-18cf-476f-8c08-1bd93aad7e83",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"rule executed \", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData).to.eql(true);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{url}}/api/RuleExecution?ruleId={{ruleId}}",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"RuleExecution"
													],
													"query": [
														{
															"key": "ruleId",
															"value": "{{ruleId}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "[113]TriggerExecuteNotificationMessage",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "24ac8dfd-18cf-476f-8c08-1bd93aad7e83",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Your test name\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.isExecuted).to.eql(true);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{url}}/api/JobExecution?jobId=15",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"JobExecution"
													],
													"query": [
														{
															"key": "jobId",
															"value": "15"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "[107]SearchMessageSentViaRule Copy",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "24ac8dfd-18cf-476f-8c08-1bd93aad7e83",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"to check notifications exist\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.notifications).to.exist;",
															"    var size1 = jsonData.notifications.length;",
															"  ",
															"    ",
															"    var array=JSON.parse(pm.environment.get(\"ruleLineItemId\"));",
															"    ",
															"     pm.expect((jsonData.notifications[0].ruleLineItemId)).to.eql(array);",
															"",
															"    pm.environment.set(\"TotalNudgesenttoentity\",size1);",
															"  ",
															"    console.log( \"[PRE-NAT]first nudge of entity is associated with  rulelineitemId : \"+pm.variables.get(\"ruleLineItemId\") );",
															"",
															"    ",
															"",
															"",
															"});",
															"pm.test(\"Nudge delivery Verification\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.notifications[0].messageContent).to.eql(\"\");",
															"    pm.expect(jsonData.notifications[0].mobileNumber).to.eql(\"\");",
															"    ",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{url}}/api/NotificationMessageProcessor/SearchMessageSentViaRule?entityId={{entityId}}&ruleId={{ruleId}}&ruleLineItemId={{ruleLineItemId}}",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"NotificationMessageProcessor",
														"SearchMessageSentViaRule"
													],
													"query": [
														{
															"key": "entityId",
															"value": "{{entityId}}"
														},
														{
															"key": "ruleId",
															"value": "{{ruleId}}"
														},
														{
															"key": "ruleLineItemId",
															"value": "{{ruleLineItemId}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "read notification msg template  Copy Copy",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "5f00d9c5-a80b-4f94-9b62-c4c9847be638",
														"exec": [
															"pm.test(\"extract Template Content\", function () {\r",
															"\r",
															" var jsonData = pm.response.json();\r",
															" var size = jsonData.notificationMessageTemplates[0].notificationMessageTemplateLineItems.length;\r",
															"\r",
															" console.log(size);\r",
															"\r",
															" for (let i=0; i<size; i++)\r",
															"\r",
															" {\r",
															"\r",
															"    let X =JSON.parse(jsonData.notificationMessageTemplates[0].notificationMessageTemplateLineItems[i].languageTypeId);\r",
															"\r",
															"    let Y =jsonData.notificationMessageTemplates[0].notificationMessageTemplateLineItems[i].entitySegmentTypeId;\r",
															"\r",
															"    if( X==pm.environment.get(\"languageTypeId\") & Y==pm.environment.get(\"entitySegmentTypeId\"))\r",
															"\r",
															"    {\r",
															"\r",
															"         console.log(\"TemplateContent retrived for: \");\r",
															"\r",
															"         console.log(\"Segmet:\"       +Y);\r",
															"\r",
															"         console.log(\"lanaguage:\"    +X);\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"         pm.environment.set(\"TemplateContent\",jsonData.notificationMessageTemplates[0].notificationMessageTemplateLineItems[i].templateContent);\r",
															"        break;\r",
															"     }\r",
															"\r",
															"    else{\r",
															"        \r",
															"        pm.environment.set(\"TemplateContent\", \"Template Not Found!\");\r",
															"    }\r",
															"\r",
															" }\r",
															"});\r",
															"\r",
															" "
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{url}}/api/NotificationMessageTemplate/Search?templateName={{TemplateName}}",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"NotificationMessageTemplate",
														"Search"
													],
													"query": [
														{
															"key": "templateName",
															"value": "{{TemplateName}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "[126]notificationMessageProcessorHistory",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "24ac8dfd-18cf-476f-8c08-1bd93aad7e83",
														"exec": [
															"pm.test(\"status code 200\", function () {",
															"    pm.response.to.have.status(200);",
															"    ",
															"",
															"    ",
															"});",
															"",
															"pm.test(\"extract message\", function () {",
															"    ",
															"    console.log(\"Nudge Details:\");",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.notificationMessageProcessorHistoryRecords).to.exist;",
															"    var size = jsonData.notificationMessageProcessorHistoryRecords.length;",
															"    ",
															"    var count=0;",
															"     for ( var i=0;i<size;i++){",
															"   if((jsonData.notificationMessageProcessorHistoryRecords[i].mobileNumber)==(pm.environment.get(\"MobileNuber\"))){",
															"  ",
															"   count++;",
															"   ",
															"pm.environment.set(\"TotalNudgesenttoMobilenum\",count );",
															"   ",
															"pm.environment.set(\"messageContent\",jsonData.notificationMessageProcessorHistoryRecords[0].messageContent);",
															"",
															"pm.environment.set(\"NudgeReceivedVia_NotificationChannelType\",jsonData.notificationMessageProcessorHistoryRecords[i].notificationChannelTypeId);",
															"console.log(\"nudgeNudgeReceivedVia_NotificationChannelType :\" +pm.variables.get(\"NudgeReceivedVia_NotificationChannelType\"));",
															"",
															"}",
															"   ",
															"    }",
															"    console.log(\"Number of nudges sent to mobile num  : \"+pm.variables.get(\"TotalNudgesenttoMobilenum\"));",
															"",
															"});",
															"",
															"pm.test(\"extract bitly url\",function(){",
															"",
															"var string = pm.variables.get(\"messageContent\");",
															"var bitly = string.match(/\\bhttps?:\\/\\/\\S+/gi);",
															"pm.environment.set(\"bitly\",bitly);",
															"console.log(bitly);",
															" ",
															"",
															"});",
															"",
															"",
															"",
															"",
															"pm.test(\"Verify MessageConent with TemplateContent \", function () {",
															"    pm.expect(pm.environment.get(\"messageContent\")).to.include(\"(ENGLISH-RETIREMENT)\");",
															"    ",
															"    ",
															"",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{url}}/api/NotificationMessageProcessedHistory",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"NotificationMessageProcessedHistory"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "ecabcb97-e1be-4b36-acb8-c5c7001e9fdd",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "a112bef0-a995-4d6e-9822-736feabfcfd0",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"_postman_isSubFolder": true
								},
								{
									"name": "HI-RETIREMENT ",
									"item": [
										{
											"name": "[102]read Rule By Rule ID",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "b21dfda3-5d01-4762-bed6-681e39e637c4",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"pm.test(\"Your test name\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.rule.ruleLineItems[0].id).to.exist;",
															"    pm.environment.set(\"ruleLineItemId\",jsonData.rule.ruleLineItems[0].id);",
															"    var size = jsonData.rule.ruleLineItems.length;",
															"    pm.environment.set(\"totalrulelineitems\",size-1);",
															"    ",
															"     pm.environment.set(\"TemplateName\",jsonData.rule.ruleLineItems[0].ruleLineItemResults[0].notificationMessageTemplateName);",
															"    ",
															"",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "3d257f88-90fa-4100-8287-f1788e721f04",
														"exec": [
															"console.log(\"STARTED: **************[Hi-retirement]********************************\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{url}}/api/Rule?ruleId={{ruleId}}",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"Rule"
													],
													"query": [
														{
															"key": "ruleId",
															"value": "{{ruleId}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "[103][HI-RETIREMENT]create entity*****************",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "b45ca225-09f2-4fd4-a05e-4c3d13a6dbf0",
														"exec": [
															"pm.test(\"Status code is 201\", function () {",
															"    pm.response.to.have.status(201);",
															"   ",
															"    let EntityJSON = pm.response.json();",
															"    pm.expect(EntityJSON.entityId).to.exist;",
															"    pm.expect(EntityJSON.isSaved).to.equal(true);",
															"     pm.environment.set(\"entityId\", EntityJSON.entityId);",
															"    console.log(EntityJSON);",
															"});",
															"",
															"",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "0e9b9ca9-9c49-46e8-ac8c-768fb21ce4b8",
														"exec": [
															"var milliseconds = new Date().getTime();",
															"var codeSeed = \"Auto-\";",
															"pm.environment.set(\"entityCode\", codeSeed.concat(milliseconds));",
															"",
															"",
															"var codeSeed = \"Auto2nd-\";",
															"pm.environment.set(\"secondaryEntityCode\", codeSeed.concat(milliseconds));",
															"",
															"var moment = require('moment');",
															"pm.environment.set(\"timestamp\", moment().format(\"YYYY-MM-DDThh:mm:ss.SSS\"))   ;",
															"console.log(pm.variables.get(\"timestamp\"));",
															"",
															"",
															"var moment = require('moment');",
															"pm.environment.set(\"pickUpTime\", moment().subtract(2, 'days').format(\"YYYY-MM-DDThh:mm:ss.SSS\")) ;",
															"console.log(pm.variables.get(\"pickUpTime\"));",
															"",
															"let ran =  _.random(1111111111, 9999999999);",
															"pm.environment.set(\"mobileNumberNAT\",ran);",
															"",
															"pm.environment.set(\"entitySegmentTypeId\", 2);",
															"pm.environment.set(\"languageTypeId\", 2);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"id\": 0,\r\n  \"entityCode\": \"{{entityCode}}\",\r\n  \"name\": \"PreNAT-{{name}}\",\r\n  \"mobileNumber\": {{mobileNumberNAT}},\r\n  \"entityCreationDate\": \"{{timestamp}}\",\r\n  \"entitySourceSystemId\": {{entitySourceSystemId}},\r\n  \"entityStateDate\": \"{{pickUpTime}}\",\r\n  \"entityStateType\": {{entityStateType}},\r\n  \"entitySubStateType\":{{entitySubStateType}},\r\n  \"entityStateValue\": \" {{entityStateValue}} \",\r\n  \"secondaryEntityCode\": \"{{secondaryEntityCode}}\",\r\n  \"secondaryName\": \"{{secondaryName}}\",\r\n  \"secondaryMobileNumber\": {{secondaryMobileNumber}},\r\n  \"customField1\":\"location-pune\",\r\n  \"customField2\":\"state-MH\",\r\n  \"customFieldUrl\":\"https://www.w3schools.com/xml/xpath_nodes.asp\",\r\n  \"entitySegmentTypeId\": {{entitySegmentTypeId}},\r\n  \"languageTypeId\": {{languageTypeId}}\r\n}\r\n"
												},
												"url": {
													"raw": "{{url}}/api/Entity",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"Entity"
													]
												}
											},
											"response": []
										},
										{
											"name": "[104]read entity by entityId",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "24ac8dfd-18cf-476f-8c08-1bd93aad7e83",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"pm.test(\"verify mobile number\", function () {",
															"    var jsonData = pm.response.json();",
															"    ",
															"//  let Z = JSON.parse(jsonData.mobileNumber);",
															"//     pm.expect(Z).to.eql(pm.variables.get(\"mobileNumberNAT\"));",
															"    pm.environment.set(\"mobileNumber\",jsonData.mobileNumber);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{url}}/api/Entity?entityId={{entityId}}",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"Entity"
													],
													"query": [
														{
															"key": "entityId",
															"value": "{{entityId}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "[105]Trigger RuleExecuteEvent",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "24ac8dfd-18cf-476f-8c08-1bd93aad7e83",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"RuleExecution\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData).to.eql(true);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{url}}/api/RuleExecution?ruleId={{ruleId}}",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"RuleExecution"
													],
													"query": [
														{
															"key": "ruleId",
															"value": "{{ruleId}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "[106]TriggerExecuteNotificationMessage",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "24ac8dfd-18cf-476f-8c08-1bd93aad7e83",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Your test name\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.isExecuted).to.eql(true);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{url}}/api/JobExecution?jobId=15",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"JobExecution"
													],
													"query": [
														{
															"key": "jobId",
															"value": "15"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "[107]SearchMessageSentViaRule",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "24ac8dfd-18cf-476f-8c08-1bd93aad7e83",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"to check notifications exist\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.notifications).to.exist;",
															"    var size1 = jsonData.notifications.length;",
															"  ",
															"    ",
															"    var array=JSON.parse(pm.environment.get(\"ruleLineItemId\"));",
															"    ",
															"     pm.expect((jsonData.notifications[0].ruleLineItemId)).to.eql(array);",
															"",
															"    pm.environment.set(\"TotalNudgesenttoentity\",size1);",
															"  ",
															"    console.log( \"[PRE-NAT]first nudge of entity is associated with  rulelineitemId : \"+pm.variables.get(\"ruleLineItemId\") );",
															"",
															"    ",
															"",
															"",
															"});",
															"pm.test(\"Nudge delivery Verification\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.notifications[0].messageContent).to.eql(\"\");",
															"    pm.expect(jsonData.notifications[0].mobileNumber).to.eql(\"\");",
															"    ",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{url}}/api/NotificationMessageProcessor/SearchMessageSentViaRule?entityId={{entityId}}&ruleId={{ruleId}}&ruleLineItemId={{ruleLineItemId}}",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"NotificationMessageProcessor",
														"SearchMessageSentViaRule"
													],
													"query": [
														{
															"key": "entityId",
															"value": "{{entityId}}"
														},
														{
															"key": "ruleId",
															"value": "{{ruleId}}"
														},
														{
															"key": "ruleLineItemId",
															"value": "{{ruleLineItemId}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "read notification msg template  Copy",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "5f00d9c5-a80b-4f94-9b62-c4c9847be638",
														"exec": [
															"pm.test(\"extract Template Content\", function () {\r",
															"\r",
															" var jsonData = pm.response.json();\r",
															" var size = jsonData.notificationMessageTemplates[0].notificationMessageTemplateLineItems.length;\r",
															"\r",
															" console.log(size);\r",
															"\r",
															" for (let i=0; i<size; i++)\r",
															"\r",
															" {\r",
															"\r",
															"    let X =JSON.parse(jsonData.notificationMessageTemplates[0].notificationMessageTemplateLineItems[i].languageTypeId);\r",
															"\r",
															"    let Y =jsonData.notificationMessageTemplates[0].notificationMessageTemplateLineItems[i].entitySegmentTypeId;\r",
															"\r",
															"    if( X==pm.environment.get(\"languageTypeId\") & Y==pm.environment.get(\"entitySegmentTypeId\"))\r",
															"\r",
															"    {\r",
															"\r",
															"         console.log(\"TemplateContent retrived for: \");\r",
															"\r",
															"         console.log(\"Segmet:\"       +Y);\r",
															"\r",
															"         console.log(\"lanaguage:\"    +X);\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"         pm.environment.set(\"TemplateContent\",jsonData.notificationMessageTemplates[0].notificationMessageTemplateLineItems[i].templateContent);\r",
															"        break;\r",
															"     }\r",
															"\r",
															"    else{\r",
															"        \r",
															"        pm.environment.set(\"TemplateContent\", \"Template Not Found!\");\r",
															"    }\r",
															"\r",
															" }\r",
															"});\r",
															"\r",
															" "
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{url}}/api/NotificationMessageTemplate/Search?templateName={{TemplateName}}",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"NotificationMessageTemplate",
														"Search"
													],
													"query": [
														{
															"key": "templateName",
															"value": "{{TemplateName}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "[126]notificationMessageProcessorHistory Copy",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "24ac8dfd-18cf-476f-8c08-1bd93aad7e83",
														"exec": [
															"pm.test(\"status code 200\", function () {",
															"    pm.response.to.have.status(200);",
															"    ",
															"",
															"    ",
															"});",
															"",
															"pm.test(\"extract message\", function () {",
															"    ",
															"    console.log(\"Nudge Details:\");",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.notificationMessageProcessorHistoryRecords).to.exist;",
															"    var size = jsonData.notificationMessageProcessorHistoryRecords.length;",
															"    ",
															"    var count=0;",
															"     for ( var i=0;i<size;i++){",
															"   if((jsonData.notificationMessageProcessorHistoryRecords[i].mobileNumber)==(pm.environment.get(\"MobileNuber\"))){",
															"  ",
															"   count++;",
															"   ",
															"pm.environment.set(\"TotalNudgesenttoMobilenum\",count );",
															"   ",
															"pm.environment.set(\"messageContent\",jsonData.notificationMessageProcessorHistoryRecords[0].messageContent);",
															"",
															"pm.environment.set(\"NudgeReceivedVia_NotificationChannelType\",jsonData.notificationMessageProcessorHistoryRecords[i].notificationChannelTypeId);",
															"console.log(\"nudgeNudgeReceivedVia_NotificationChannelType :\" +pm.variables.get(\"NudgeReceivedVia_NotificationChannelType\"));",
															"",
															"}",
															"   ",
															"    }",
															"    console.log(\"Number of nudges sent to mobile num  : \"+pm.variables.get(\"TotalNudgesenttoMobilenum\"));",
															"",
															"});",
															"",
															"pm.test(\"extract bitly url\",function(){",
															"",
															"var string = pm.variables.get(\"messageContent\");",
															"var bitly = string.match(/\\bhttps?:\\/\\/\\S+/gi);",
															"pm.environment.set(\"bitly\",bitly);",
															"console.log(bitly);",
															" ",
															"",
															"});",
															"",
															"",
															"",
															"",
															"pm.test(\"Verify MessageConent with TemplateContent \", function () {",
															"    pm.expect(pm.environment.get(\"messageContent\")).to.include(\"(HINDI-RETIREMENT)\");",
															"    ",
															"    ",
															"",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{url}}/api/NotificationMessageProcessedHistory",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"NotificationMessageProcessedHistory"
													]
												}
											},
											"response": []
										},
										{
											"name": "[110]  1st change last nudge sent date",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "a66f8df1-605f-4640-aa35-cd0d72b96dff",
														"exec": [
															"var moment = require('moment');",
															"pm.environment.set(\"pickUpTime\", moment().subtract(2, 'days').format(\"YYYY-MM-DDThh:mm:ss.SSS\")) ;",
															"console.log(pm.variables.get(\"pickUpTime\"));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "23d9c19d-f037-4abd-9ce9-a7494827aacd",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Your test name\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.id).to.exist;",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"entityId\": {{entityId}},\r\n  \"ruleId\": {{ruleId}},\r\n  \"ruleLineItemId\": {{ruleLineItemId}},\r\n  \"createdDate\": \"{{pickUpTime}}\"\r\n}"
												},
												"url": {
													"raw": "{{url}}/api/Rule/UpdateEntityRuleMapping",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"Rule",
														"UpdateEntityRuleMapping"
													]
												}
											},
											"response": []
										},
										{
											"name": "[111]read Rule By Rule ID",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "b21dfda3-5d01-4762-bed6-681e39e637c4",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"pm.test(\"Your test name\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.rule.ruleLineItems[0].id).to.exist;",
															"    pm.environment.set(\"ruleLineItemId\",jsonData.rule.ruleLineItems[1].id);",
															"    ",
															"    pm.environment.set(\"TemplateName\",jsonData.rule.ruleLineItems[1].ruleLineItemResults[0].notificationMessageTemplateName);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{url}}/api/Rule?ruleId={{ruleId}}",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"Rule"
													],
													"query": [
														{
															"key": "ruleId",
															"value": "{{ruleId}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "[112]Trigger RuleExecuteEvent",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "24ac8dfd-18cf-476f-8c08-1bd93aad7e83",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"RuleExecution\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData).to.eql(true);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{url}}/api/RuleExecution?ruleId={{ruleId}}",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"RuleExecution"
													],
													"query": [
														{
															"key": "ruleId",
															"value": "{{ruleId}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "[113]TriggerExecuteNotificationMessage",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "24ac8dfd-18cf-476f-8c08-1bd93aad7e83",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Your test name\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.isExecuted).to.eql(true);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{url}}/api/JobExecution?jobId=15",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"JobExecution"
													],
													"query": [
														{
															"key": "jobId",
															"value": "15"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "[107]SearchMessageSentViaRule Copy",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "24ac8dfd-18cf-476f-8c08-1bd93aad7e83",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"to check notifications exist\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.notifications).to.exist;",
															"    var size1 = jsonData.notifications.length;",
															"  ",
															"    ",
															"    var array=JSON.parse(pm.environment.get(\"ruleLineItemId\"));",
															"    ",
															"     pm.expect((jsonData.notifications[0].ruleLineItemId)).to.eql(array);",
															"",
															"    pm.environment.set(\"TotalNudgesenttoentity\",size1);",
															"  ",
															"    console.log( \"[PRE-NAT]first nudge of entity is associated with  rulelineitemId : \"+pm.variables.get(\"ruleLineItemId\") );",
															"",
															"    ",
															"",
															"",
															"});",
															"pm.test(\"Nudge delivery Verification\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.notifications[0].messageContent).to.eql(\"\");",
															"    pm.expect(jsonData.notifications[0].mobileNumber).to.eql(\"\");",
															"    ",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{url}}/api/NotificationMessageProcessor/SearchMessageSentViaRule?entityId={{entityId}}&ruleId={{ruleId}}&ruleLineItemId={{ruleLineItemId}}",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"NotificationMessageProcessor",
														"SearchMessageSentViaRule"
													],
													"query": [
														{
															"key": "entityId",
															"value": "{{entityId}}"
														},
														{
															"key": "ruleId",
															"value": "{{ruleId}}"
														},
														{
															"key": "ruleLineItemId",
															"value": "{{ruleLineItemId}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "read notification msg template  Copy Copy",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "5f00d9c5-a80b-4f94-9b62-c4c9847be638",
														"exec": [
															"pm.test(\"extract Template Content\", function () {\r",
															"\r",
															" var jsonData = pm.response.json();\r",
															" var size = jsonData.notificationMessageTemplates[0].notificationMessageTemplateLineItems.length;\r",
															"\r",
															" console.log(size);\r",
															"\r",
															" for (let i=0; i<size; i++)\r",
															"\r",
															" {\r",
															"\r",
															"    let X =JSON.parse(jsonData.notificationMessageTemplates[0].notificationMessageTemplateLineItems[i].languageTypeId);\r",
															"\r",
															"    let Y =jsonData.notificationMessageTemplates[0].notificationMessageTemplateLineItems[i].entitySegmentTypeId;\r",
															"\r",
															"    if( X==pm.environment.get(\"languageTypeId\") & Y==pm.environment.get(\"entitySegmentTypeId\"))\r",
															"\r",
															"    {\r",
															"\r",
															"         console.log(\"TemplateContent retrived for: \");\r",
															"\r",
															"         console.log(\"Segmet:\"       +Y);\r",
															"\r",
															"         console.log(\"lanaguage:\"    +X);\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"         pm.environment.set(\"TemplateContent\",jsonData.notificationMessageTemplates[0].notificationMessageTemplateLineItems[i].templateContent);\r",
															"        break;\r",
															"     }\r",
															"\r",
															"    else{\r",
															"        \r",
															"        pm.environment.set(\"TemplateContent\", \"Template Not Found!\");\r",
															"    }\r",
															"\r",
															" }\r",
															"});\r",
															"\r",
															" "
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{url}}/api/NotificationMessageTemplate/Search?templateName={{TemplateName}}",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"NotificationMessageTemplate",
														"Search"
													],
													"query": [
														{
															"key": "templateName",
															"value": "{{TemplateName}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "[126]notificationMessageProcessorHistory",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "24ac8dfd-18cf-476f-8c08-1bd93aad7e83",
														"exec": [
															"pm.test(\"status code 200\", function () {",
															"    pm.response.to.have.status(200);",
															"    ",
															"",
															"    ",
															"});",
															"",
															"pm.test(\"extract message\", function () {",
															"    ",
															"    console.log(\"Nudge Details:\");",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.notificationMessageProcessorHistoryRecords).to.exist;",
															"    var size = jsonData.notificationMessageProcessorHistoryRecords.length;",
															"    ",
															"    var count=0;",
															"     for ( var i=0;i<size;i++){",
															"   if((jsonData.notificationMessageProcessorHistoryRecords[i].mobileNumber)==(pm.environment.get(\"MobileNuber\"))){",
															"  ",
															"   count++;",
															"   ",
															"pm.environment.set(\"TotalNudgesenttoMobilenum\",count );",
															"   ",
															"pm.environment.set(\"messageContent\",jsonData.notificationMessageProcessorHistoryRecords[0].messageContent);",
															"",
															"pm.environment.set(\"NudgeReceivedVia_NotificationChannelType\",jsonData.notificationMessageProcessorHistoryRecords[i].notificationChannelTypeId);",
															"console.log(\"nudgeNudgeReceivedVia_NotificationChannelType :\" +pm.variables.get(\"NudgeReceivedVia_NotificationChannelType\"));",
															"",
															"}",
															"   ",
															"    }",
															"    console.log(\"Number of nudges sent to mobile num  : \"+pm.variables.get(\"TotalNudgesenttoMobilenum\"));",
															"",
															"});",
															"",
															"pm.test(\"extract bitly url\",function(){",
															"",
															"var string = pm.variables.get(\"messageContent\");",
															"var bitly = string.match(/\\bhttps?:\\/\\/\\S+/gi);",
															"pm.environment.set(\"bitly\",bitly);",
															"console.log(bitly);",
															" ",
															"",
															"});",
															"",
															"",
															"",
															"",
															"pm.test(\"Verify MessageConent with TemplateContent \", function () {",
															"    pm.expect(pm.environment.get(\"messageContent\")).to.include(\"(HINDI-RETIREMENT)\");",
															"    ",
															"    ",
															"",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{url}}/api/NotificationMessageProcessedHistory",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"NotificationMessageProcessedHistory"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "ecabcb97-e1be-4b36-acb8-c5c7001e9fdd",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "a112bef0-a995-4d6e-9822-736feabfcfd0",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"_postman_isSubFolder": true
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "374074ab-3278-4fb3-920b-6d70730a2463",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "8276e431-869f-4067-97e6-c612edcd6881",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "EN/Hi-SmallEN",
							"item": [
								{
									"name": "EN-SmallEn",
									"item": [
										{
											"name": "[102]read Rule By Rule ID",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "b21dfda3-5d01-4762-bed6-681e39e637c4",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"pm.test(\"Your test name\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.rule.ruleLineItems[0].id).to.exist;",
															"    pm.environment.set(\"ruleLineItemId\",jsonData.rule.ruleLineItems[0].id);",
															"    var size = jsonData.rule.ruleLineItems.length;",
															"    pm.environment.set(\"totalrulelineitems\",size-1);",
															"    ",
															"     pm.environment.set(\"TemplateName\",jsonData.rule.ruleLineItems[0].ruleLineItemResults[0].notificationMessageTemplateName);",
															"    ",
															"",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "363553a3-7b5a-4f55-8fd8-12e59858ad58",
														"exec": [
															"console.log(\"STARTED: **************[EN-SmallEn]********************************\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{url}}/api/Rule?ruleId={{ruleId}}",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"Rule"
													],
													"query": [
														{
															"key": "ruleId",
															"value": "{{ruleId}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "[103] [EN-SMALLEN] create entity***********",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "b45ca225-09f2-4fd4-a05e-4c3d13a6dbf0",
														"exec": [
															"pm.test(\"Status code is 201\", function () {",
															"    pm.response.to.have.status(201);",
															"   ",
															"    let EntityJSON = pm.response.json();",
															"    pm.expect(EntityJSON.entityId).to.exist;",
															"    pm.expect(EntityJSON.isSaved).to.equal(true);",
															"     pm.environment.set(\"entityId\", EntityJSON.entityId);",
															"    console.log(EntityJSON);",
															"});",
															"",
															"",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "0e9b9ca9-9c49-46e8-ac8c-768fb21ce4b8",
														"exec": [
															"var milliseconds = new Date().getTime();",
															"var codeSeed = \"Auto-\";",
															"pm.environment.set(\"entityCode\", codeSeed.concat(milliseconds));",
															"",
															"",
															"var codeSeed = \"Auto2nd-\";",
															"pm.environment.set(\"secondaryEntityCode\", codeSeed.concat(milliseconds));",
															"",
															"var moment = require('moment');",
															"pm.environment.set(\"timestamp\", moment().format(\"YYYY-MM-DDThh:mm:ss.SSS\"))   ;",
															"console.log(pm.variables.get(\"timestamp\"));",
															"",
															"",
															"var moment = require('moment');",
															"pm.environment.set(\"pickUpTime\", moment().subtract(2, 'days').format(\"YYYY-MM-DDThh:mm:ss.SSS\")) ;",
															"console.log(pm.variables.get(\"pickUpTime\"));",
															"",
															"let ran =  _.random(1111111111, 9999999999);",
															"pm.environment.set(\"mobileNumberNAT\",ran);",
															"",
															"pm.environment.set(\"entitySegmentTypeId\", 3);",
															"pm.environment.set(\"languageTypeId\", 1);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"id\": 0,\r\n  \"entityCode\": \"{{entityCode}}\",\r\n  \"name\": \"PreNAT-{{name}}\",\r\n  \"mobileNumber\": {{mobileNumberNAT}},\r\n  \"entityCreationDate\": \"{{timestamp}}\",\r\n  \"entitySourceSystemId\": {{entitySourceSystemId}},\r\n  \"entityStateDate\": \"{{pickUpTime}}\",\r\n  \"entityStateType\": {{entityStateType}},\r\n  \"entitySubStateType\":{{entitySubStateType}},\r\n  \"entityStateValue\": \" {{entityStateValue}} \",\r\n  \"secondaryEntityCode\": \"{{secondaryEntityCode}}\",\r\n  \"secondaryName\": \"{{secondaryName}}\",\r\n  \"secondaryMobileNumber\": {{secondaryMobileNumber}},\r\n  \"customField1\":\"location-pune\",\r\n  \"customField2\":\"state-MH\",\r\n  \"customFieldUrl\":\"https://www.w3schools.com/xml/xpath_nodes.asp\",\r\n  \"entitySegmentTypeId\": {{entitySegmentTypeId}},\r\n  \"languageTypeId\": {{languageTypeId}}\r\n}\r\n"
												},
												"url": {
													"raw": "{{url}}/api/Entity",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"Entity"
													]
												}
											},
											"response": []
										},
										{
											"name": "[104]read entity by entityId",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "24ac8dfd-18cf-476f-8c08-1bd93aad7e83",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"pm.test(\"verify mobile number\", function () {",
															"    var jsonData = pm.response.json();",
															"//  let Z = JSON.parse(jsonData.mobileNumber);",
															"//     pm.expect(Z).to.eql(pm.variables.get(\"mobileNumberNAT\"));",
															"    pm.environment.set(\"mobileNumber\",jsonData.mobileNumber);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{url}}/api/Entity?entityId={{entityId}}",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"Entity"
													],
													"query": [
														{
															"key": "entityId",
															"value": "{{entityId}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "[105]Trigger RuleExecuteEvent",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "24ac8dfd-18cf-476f-8c08-1bd93aad7e83",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"RuleExecution\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData).to.eql(true);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{url}}/api/RuleExecution?ruleId={{ruleId}}",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"RuleExecution"
													],
													"query": [
														{
															"key": "ruleId",
															"value": "{{ruleId}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "[106]TriggerExecuteNotificationMessage",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "24ac8dfd-18cf-476f-8c08-1bd93aad7e83",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Your test name\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.isExecuted).to.eql(true);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{url}}/api/JobExecution?jobId=15",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"JobExecution"
													],
													"query": [
														{
															"key": "jobId",
															"value": "15"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "[107]SearchMessageSentViaRule",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "24ac8dfd-18cf-476f-8c08-1bd93aad7e83",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"to check notifications exist\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.notifications).to.exist;",
															"    var size1 = jsonData.notifications.length;",
															"  ",
															"    ",
															"    var array=JSON.parse(pm.environment.get(\"ruleLineItemId\"));",
															"    ",
															"     pm.expect((jsonData.notifications[0].ruleLineItemId)).to.eql(array);",
															"",
															"    pm.environment.set(\"TotalNudgesenttoentity\",size1);",
															"  ",
															"    console.log( \"[PRE-NAT]first nudge of entity is associated with  rulelineitemId : \"+pm.variables.get(\"ruleLineItemId\") );",
															"",
															"    ",
															"",
															"",
															"});",
															"pm.test(\"Nudge delivery Verification\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.notifications[0].messageContent).to.eql(\"\");",
															"    pm.expect(jsonData.notifications[0].mobileNumber).to.eql(\"\");",
															"    ",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{url}}/api/NotificationMessageProcessor/SearchMessageSentViaRule?entityId={{entityId}}&ruleId={{ruleId}}&ruleLineItemId={{ruleLineItemId}}",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"NotificationMessageProcessor",
														"SearchMessageSentViaRule"
													],
													"query": [
														{
															"key": "entityId",
															"value": "{{entityId}}"
														},
														{
															"key": "ruleId",
															"value": "{{ruleId}}"
														},
														{
															"key": "ruleLineItemId",
															"value": "{{ruleLineItemId}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "read notification msg template  Copy",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "5f00d9c5-a80b-4f94-9b62-c4c9847be638",
														"exec": [
															"pm.test(\"extract Template Content\", function () {\r",
															"\r",
															" var jsonData = pm.response.json();\r",
															" var size = jsonData.notificationMessageTemplates[0].notificationMessageTemplateLineItems.length;\r",
															"\r",
															" console.log(size);\r",
															"\r",
															" for (let i=0; i<size; i++)\r",
															"\r",
															" {\r",
															"\r",
															"    let X =JSON.parse(jsonData.notificationMessageTemplates[0].notificationMessageTemplateLineItems[i].languageTypeId);\r",
															"\r",
															"    let Y =jsonData.notificationMessageTemplates[0].notificationMessageTemplateLineItems[i].entitySegmentTypeId;\r",
															"\r",
															"    if( X==pm.environment.get(\"languageTypeId\") & Y==pm.environment.get(\"entitySegmentTypeId\"))\r",
															"\r",
															"    {\r",
															"\r",
															"         console.log(\"TemplateContent retrived for: \");\r",
															"\r",
															"         console.log(\"Segmet:\"       +Y);\r",
															"\r",
															"         console.log(\"lanaguage:\"    +X);\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"         pm.environment.set(\"TemplateContent\",jsonData.notificationMessageTemplates[0].notificationMessageTemplateLineItems[i].templateContent);\r",
															"        break;\r",
															"     }\r",
															"\r",
															"    else{\r",
															"        \r",
															"        pm.environment.set(\"TemplateContent\", \"Template Not Found!\");\r",
															"    }\r",
															"\r",
															" }\r",
															"});\r",
															"\r",
															" "
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{url}}/api/NotificationMessageTemplate/Search?templateName={{TemplateName}}",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"NotificationMessageTemplate",
														"Search"
													],
													"query": [
														{
															"key": "templateName",
															"value": "{{TemplateName}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "[126]notificationMessageProcessorHistory Copy",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "24ac8dfd-18cf-476f-8c08-1bd93aad7e83",
														"exec": [
															"pm.test(\"status code 200\", function () {",
															"    pm.response.to.have.status(200);",
															"    ",
															"",
															"    ",
															"});",
															"",
															"pm.test(\"extract message\", function () {",
															"    ",
															"    console.log(\"Nudge Details:\");",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.notificationMessageProcessorHistoryRecords).to.exist;",
															"    var size = jsonData.notificationMessageProcessorHistoryRecords.length;",
															"    ",
															"    var count=0;",
															"     for ( var i=0;i<size;i++){",
															"   if((jsonData.notificationMessageProcessorHistoryRecords[i].mobileNumber)==(pm.environment.get(\"MobileNuber\"))){",
															"  ",
															"   count++;",
															"   ",
															"pm.environment.set(\"TotalNudgesenttoMobilenum\",count );",
															"   ",
															"pm.environment.set(\"messageContent\",jsonData.notificationMessageProcessorHistoryRecords[0].messageContent);",
															"",
															"pm.environment.set(\"NudgeReceivedVia_NotificationChannelType\",jsonData.notificationMessageProcessorHistoryRecords[i].notificationChannelTypeId);",
															"console.log(\"nudgeNudgeReceivedVia_NotificationChannelType :\" +pm.variables.get(\"NudgeReceivedVia_NotificationChannelType\"));",
															"",
															"}",
															"   ",
															"    }",
															"    console.log(\"Number of nudges sent to mobile num  : \"+pm.variables.get(\"TotalNudgesenttoMobilenum\"));",
															"",
															"});",
															"",
															"pm.test(\"extract bitly url\",function(){",
															"",
															"var string = pm.variables.get(\"messageContent\");",
															"var bitly = string.match(/\\bhttps?:\\/\\/\\S+/gi);",
															"pm.environment.set(\"bitly\",bitly);",
															"console.log(bitly);",
															" ",
															"",
															"});",
															"",
															"",
															"",
															"",
															"pm.test(\"Verify MessageConent with TemplateContent \", function () {",
															"    pm.expect(pm.environment.get(\"messageContent\")).to.include(\"(ENGLISH-SMALLEN)\");",
															"    ",
															"    ",
															"",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{url}}/api/NotificationMessageProcessedHistory",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"NotificationMessageProcessedHistory"
													]
												}
											},
											"response": []
										},
										{
											"name": "[110]  1st change last nudge sent date",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "a66f8df1-605f-4640-aa35-cd0d72b96dff",
														"exec": [
															"var moment = require('moment');",
															"pm.environment.set(\"pickUpTime\", moment().subtract(2, 'days').format(\"YYYY-MM-DDThh:mm:ss.SSS\")) ;",
															"console.log(pm.variables.get(\"pickUpTime\"));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "23d9c19d-f037-4abd-9ce9-a7494827aacd",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Your test name\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.id).to.exist;",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"entityId\": {{entityId}},\r\n  \"ruleId\": {{ruleId}},\r\n  \"ruleLineItemId\": {{ruleLineItemId}},\r\n  \"createdDate\": \"{{pickUpTime}}\"\r\n}"
												},
												"url": {
													"raw": "{{url}}/api/Rule/UpdateEntityRuleMapping",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"Rule",
														"UpdateEntityRuleMapping"
													]
												}
											},
											"response": []
										},
										{
											"name": "[111]read Rule By Rule ID",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "b21dfda3-5d01-4762-bed6-681e39e637c4",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"pm.test(\"Your test name\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.rule.ruleLineItems[0].id).to.exist;",
															"    pm.environment.set(\"ruleLineItemId\",jsonData.rule.ruleLineItems[1].id);",
															"    ",
															"        pm.environment.set(\"TemplateName\",jsonData.rule.ruleLineItems[1].ruleLineItemResults[0].notificationMessageTemplateName);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{url}}/api/Rule?ruleId={{ruleId}}",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"Rule"
													],
													"query": [
														{
															"key": "ruleId",
															"value": "{{ruleId}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "[112]Trigger RuleExecuteEvent",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "24ac8dfd-18cf-476f-8c08-1bd93aad7e83",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"RuleExecution\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData).to.eql(true);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{url}}/api/RuleExecution?ruleId={{ruleId}}",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"RuleExecution"
													],
													"query": [
														{
															"key": "ruleId",
															"value": "{{ruleId}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "[113]TriggerExecuteNotificationMessage",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "24ac8dfd-18cf-476f-8c08-1bd93aad7e83",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Your test name\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.isExecuted).to.eql(true);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{url}}/api/JobExecution?jobId=15",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"JobExecution"
													],
													"query": [
														{
															"key": "jobId",
															"value": "15"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "[107]SearchMessageSentViaRule Copy",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "24ac8dfd-18cf-476f-8c08-1bd93aad7e83",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"to check notifications exist\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.notifications).to.exist;",
															"    var size1 = jsonData.notifications.length;",
															"  ",
															"    ",
															"    var array=JSON.parse(pm.environment.get(\"ruleLineItemId\"));",
															"    ",
															"     pm.expect((jsonData.notifications[0].ruleLineItemId)).to.eql(array);",
															"",
															"    pm.environment.set(\"TotalNudgesenttoentity\",size1);",
															"  ",
															"    console.log( \"[PRE-NAT]first nudge of entity is associated with  rulelineitemId : \"+pm.variables.get(\"ruleLineItemId\") );",
															"",
															"    ",
															"",
															"",
															"});",
															"pm.test(\"Nudge delivery Verification\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.notifications[0].messageContent).to.eql(\"\");",
															"    pm.expect(jsonData.notifications[0].mobileNumber).to.eql(\"\");",
															"    ",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{url}}/api/NotificationMessageProcessor/SearchMessageSentViaRule?entityId={{entityId}}&ruleId={{ruleId}}&ruleLineItemId={{ruleLineItemId}}",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"NotificationMessageProcessor",
														"SearchMessageSentViaRule"
													],
													"query": [
														{
															"key": "entityId",
															"value": "{{entityId}}"
														},
														{
															"key": "ruleId",
															"value": "{{ruleId}}"
														},
														{
															"key": "ruleLineItemId",
															"value": "{{ruleLineItemId}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "read notification msg template  Copy Copy",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "5f00d9c5-a80b-4f94-9b62-c4c9847be638",
														"exec": [
															"pm.test(\"extract Template Content\", function () {\r",
															"\r",
															" var jsonData = pm.response.json();\r",
															" var size = jsonData.notificationMessageTemplates[0].notificationMessageTemplateLineItems.length;\r",
															"\r",
															" console.log(size);\r",
															"\r",
															" for (let i=0; i<size; i++)\r",
															"\r",
															" {\r",
															"\r",
															"    let X =JSON.parse(jsonData.notificationMessageTemplates[0].notificationMessageTemplateLineItems[i].languageTypeId);\r",
															"\r",
															"    let Y =jsonData.notificationMessageTemplates[0].notificationMessageTemplateLineItems[i].entitySegmentTypeId;\r",
															"\r",
															"    if( X==pm.environment.get(\"languageTypeId\") & Y==pm.environment.get(\"entitySegmentTypeId\"))\r",
															"\r",
															"    {\r",
															"\r",
															"         console.log(\"TemplateContent retrived for: \");\r",
															"\r",
															"         console.log(\"Segmet:\"       +Y);\r",
															"\r",
															"         console.log(\"lanaguage:\"    +X);\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"         pm.environment.set(\"TemplateContent\",jsonData.notificationMessageTemplates[0].notificationMessageTemplateLineItems[i].templateContent);\r",
															"        break;\r",
															"     }\r",
															"\r",
															"    else{\r",
															"        \r",
															"        pm.environment.set(\"TemplateContent\", \"Template Not Found!\");\r",
															"    }\r",
															"\r",
															" }\r",
															"});\r",
															"\r",
															" "
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{url}}/api/NotificationMessageTemplate/Search?templateName={{TemplateName}}",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"NotificationMessageTemplate",
														"Search"
													],
													"query": [
														{
															"key": "templateName",
															"value": "{{TemplateName}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "[126]notificationMessageProcessorHistory",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "24ac8dfd-18cf-476f-8c08-1bd93aad7e83",
														"exec": [
															"pm.test(\"status code 200\", function () {",
															"    pm.response.to.have.status(200);",
															"    ",
															"",
															"    ",
															"});",
															"",
															"pm.test(\"extract message\", function () {",
															"    ",
															"    console.log(\"Nudge Details:\");",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.notificationMessageProcessorHistoryRecords).to.exist;",
															"    var size = jsonData.notificationMessageProcessorHistoryRecords.length;",
															"    ",
															"    var count=0;",
															"     for ( var i=0;i<size;i++){",
															"   if((jsonData.notificationMessageProcessorHistoryRecords[i].mobileNumber)==(pm.environment.get(\"MobileNuber\"))){",
															"  ",
															"   count++;",
															"   ",
															"pm.environment.set(\"TotalNudgesenttoMobilenum\",count );",
															"   ",
															"pm.environment.set(\"messageContent\",jsonData.notificationMessageProcessorHistoryRecords[0].messageContent);",
															"",
															"pm.environment.set(\"NudgeReceivedVia_NotificationChannelType\",jsonData.notificationMessageProcessorHistoryRecords[i].notificationChannelTypeId);",
															"console.log(\"nudgeNudgeReceivedVia_NotificationChannelType :\" +pm.variables.get(\"NudgeReceivedVia_NotificationChannelType\"));",
															"",
															"}",
															"   ",
															"    }",
															"    console.log(\"Number of nudges sent to mobile num  : \"+pm.variables.get(\"TotalNudgesenttoMobilenum\"));",
															"",
															"});",
															"",
															"pm.test(\"extract bitly url\",function(){",
															"",
															"var string = pm.variables.get(\"messageContent\");",
															"var bitly = string.match(/\\bhttps?:\\/\\/\\S+/gi);",
															"pm.environment.set(\"bitly\",bitly);",
															"console.log(bitly);",
															" ",
															"",
															"});",
															"",
															"",
															"",
															"",
															"pm.test(\"Verify MessageConent with TemplateContent \", function () {",
															"    pm.expect(pm.environment.get(\"messageContent\")).to.include(\"(ENGLISH-SMALLEN)\");",
															"    ",
															"    ",
															"",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{url}}/api/NotificationMessageProcessedHistory",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"NotificationMessageProcessedHistory"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "ecabcb97-e1be-4b36-acb8-c5c7001e9fdd",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "a112bef0-a995-4d6e-9822-736feabfcfd0",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"_postman_isSubFolder": true
								},
								{
									"name": "HI-SMALLEN",
									"item": [
										{
											"name": "[102]read Rule By Rule ID",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "b21dfda3-5d01-4762-bed6-681e39e637c4",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"pm.test(\"Your test name\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.rule.ruleLineItems[0].id).to.exist;",
															"    pm.environment.set(\"ruleLineItemId\",jsonData.rule.ruleLineItems[0].id);",
															"    var size = jsonData.rule.ruleLineItems.length;",
															"    pm.environment.set(\"totalrulelineitems\",size-1);",
															"    ",
															"     pm.environment.set(\"TemplateName\",jsonData.rule.ruleLineItems[0].ruleLineItemResults[0].notificationMessageTemplateName);",
															"    ",
															"",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "505a09cc-7c73-4482-bf0d-a166fbd52bd6",
														"exec": [
															"console.log(\"STARTED: **************[Hi-SmallEn]********************************\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{url}}/api/Rule?ruleId={{ruleId}}",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"Rule"
													],
													"query": [
														{
															"key": "ruleId",
															"value": "{{ruleId}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "[103] [EN-SMALLEN] create entity**********",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "b45ca225-09f2-4fd4-a05e-4c3d13a6dbf0",
														"exec": [
															"pm.test(\"Status code is 201\", function () {",
															"    pm.response.to.have.status(201);",
															"   ",
															"    let EntityJSON = pm.response.json();",
															"    pm.expect(EntityJSON.entityId).to.exist;",
															"    pm.expect(EntityJSON.isSaved).to.equal(true);",
															"     pm.environment.set(\"entityId\", EntityJSON.entityId);",
															"    console.log(EntityJSON);",
															"});",
															"",
															"",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "0e9b9ca9-9c49-46e8-ac8c-768fb21ce4b8",
														"exec": [
															"var milliseconds = new Date().getTime();",
															"var codeSeed = \"Auto-\";",
															"pm.environment.set(\"entityCode\", codeSeed.concat(milliseconds));",
															"",
															"",
															"var codeSeed = \"Auto2nd-\";",
															"pm.environment.set(\"secondaryEntityCode\", codeSeed.concat(milliseconds));",
															"",
															"var moment = require('moment');",
															"pm.environment.set(\"timestamp\", moment().format(\"YYYY-MM-DDThh:mm:ss.SSS\"))   ;",
															"console.log(pm.variables.get(\"timestamp\"));",
															"",
															"",
															"var moment = require('moment');",
															"pm.environment.set(\"pickUpTime\", moment().subtract(2, 'days').format(\"YYYY-MM-DDThh:mm:ss.SSS\")) ;",
															"console.log(pm.variables.get(\"pickUpTime\"));",
															"",
															"",
															"let ran =  _.random(1111111111, 9999999999);",
															"pm.environment.set(\"mobileNumberNAT\",ran);",
															"",
															"pm.environment.set(\"entitySegmentTypeId\", 3);",
															"pm.environment.set(\"languageTypeId\", 2);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"id\": 0,\r\n  \"entityCode\": \"{{entityCode}}\",\r\n  \"name\": \"PreNAT-{{name}}\",\r\n  \"mobileNumber\": {{mobileNumberNAT}},\r\n  \"entityCreationDate\": \"{{timestamp}}\",\r\n  \"entitySourceSystemId\": {{entitySourceSystemId}},\r\n  \"entityStateDate\": \"{{pickUpTime}}\",\r\n  \"entityStateType\": {{entityStateType}},\r\n  \"entitySubStateType\":{{entitySubStateType}},\r\n  \"entityStateValue\": \" {{entityStateValue}} \",\r\n  \"secondaryEntityCode\": \"{{secondaryEntityCode}}\",\r\n  \"secondaryName\": \"{{secondaryName}}\",\r\n  \"secondaryMobileNumber\": {{secondaryMobileNumber}},\r\n  \"customField1\":\"location-pune\",\r\n  \"customField2\":\"state-MH\",\r\n  \"customFieldUrl\":\"https://www.w3schools.com/xml/xpath_nodes.asp\",\r\n  \"entitySegmentTypeId\": {{entitySegmentTypeId}},\r\n  \"languageTypeId\": {{languageTypeId}}\r\n}\r\n"
												},
												"url": {
													"raw": "{{url}}/api/Entity",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"Entity"
													]
												}
											},
											"response": []
										},
										{
											"name": "[104]read entity by entityId",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "24ac8dfd-18cf-476f-8c08-1bd93aad7e83",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"pm.test(\"verify mobile number\", function () {",
															"    var jsonData = pm.response.json();",
															"//  let Z = JSON.parse(jsonData.mobileNumber);",
															"//     pm.expect(Z).to.eql(pm.variables.get(\"mobileNumberNAT\"));",
															"    pm.environment.set(\"mobileNumber\",jsonData.mobileNumber);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{url}}/api/Entity?entityId={{entityId}}",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"Entity"
													],
													"query": [
														{
															"key": "entityId",
															"value": "{{entityId}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "[105]Trigger RuleExecuteEvent",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "24ac8dfd-18cf-476f-8c08-1bd93aad7e83",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"RuleExecution\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData).to.eql(true);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{url}}/api/RuleExecution?ruleId={{ruleId}}",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"RuleExecution"
													],
													"query": [
														{
															"key": "ruleId",
															"value": "{{ruleId}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "[106]TriggerExecuteNotificationMessage",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "24ac8dfd-18cf-476f-8c08-1bd93aad7e83",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Your test name\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.isExecuted).to.eql(true);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{url}}/api/JobExecution?jobId=15",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"JobExecution"
													],
													"query": [
														{
															"key": "jobId",
															"value": "15"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "[107]SearchMessageSentViaRule",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "24ac8dfd-18cf-476f-8c08-1bd93aad7e83",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"to check notifications exist\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.notifications).to.exist;",
															"    var size1 = jsonData.notifications.length;",
															"  ",
															"    ",
															"    var array=JSON.parse(pm.environment.get(\"ruleLineItemId\"));",
															"    ",
															"     pm.expect((jsonData.notifications[0].ruleLineItemId)).to.eql(array);",
															"",
															"    pm.environment.set(\"TotalNudgesenttoentity\",size1);",
															"  ",
															"    console.log( \"[PRE-NAT]first nudge of entity is associated with  rulelineitemId : \"+pm.variables.get(\"ruleLineItemId\") );",
															"",
															"    ",
															"",
															"",
															"});",
															"pm.test(\"Nudge delivery Verification\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.notifications[0].messageContent).to.eql(\"\");",
															"    pm.expect(jsonData.notifications[0].mobileNumber).to.eql(\"\");",
															"    ",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{url}}/api/NotificationMessageProcessor/SearchMessageSentViaRule?entityId={{entityId}}&ruleId={{ruleId}}&ruleLineItemId={{ruleLineItemId}}",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"NotificationMessageProcessor",
														"SearchMessageSentViaRule"
													],
													"query": [
														{
															"key": "entityId",
															"value": "{{entityId}}"
														},
														{
															"key": "ruleId",
															"value": "{{ruleId}}"
														},
														{
															"key": "ruleLineItemId",
															"value": "{{ruleLineItemId}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "read notification msg template  Copy",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "5f00d9c5-a80b-4f94-9b62-c4c9847be638",
														"exec": [
															"pm.test(\"extract Template Content\", function () {\r",
															"\r",
															" var jsonData = pm.response.json();\r",
															" var size = jsonData.notificationMessageTemplates[0].notificationMessageTemplateLineItems.length;\r",
															"\r",
															" console.log(size);\r",
															"\r",
															" for (let i=0; i<size; i++)\r",
															"\r",
															" {\r",
															"\r",
															"    let X =JSON.parse(jsonData.notificationMessageTemplates[0].notificationMessageTemplateLineItems[i].languageTypeId);\r",
															"\r",
															"    let Y =jsonData.notificationMessageTemplates[0].notificationMessageTemplateLineItems[i].entitySegmentTypeId;\r",
															"\r",
															"    if( X==pm.environment.get(\"languageTypeId\") & Y==pm.environment.get(\"entitySegmentTypeId\"))\r",
															"\r",
															"    {\r",
															"\r",
															"         console.log(\"TemplateContent retrived for: \");\r",
															"\r",
															"         console.log(\"Segmet:\"       +Y);\r",
															"\r",
															"         console.log(\"lanaguage:\"    +X);\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"         pm.environment.set(\"TemplateContent\",jsonData.notificationMessageTemplates[0].notificationMessageTemplateLineItems[i].templateContent);\r",
															"        break;\r",
															"     }\r",
															"\r",
															"    else{\r",
															"        \r",
															"        pm.environment.set(\"TemplateContent\", \"Template Not Found!\");\r",
															"    }\r",
															"\r",
															" }\r",
															"});\r",
															"\r",
															" "
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{url}}/api/NotificationMessageTemplate/Search?templateName={{TemplateName}}",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"NotificationMessageTemplate",
														"Search"
													],
													"query": [
														{
															"key": "templateName",
															"value": "{{TemplateName}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "[126]notificationMessageProcessorHistory Copy",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "24ac8dfd-18cf-476f-8c08-1bd93aad7e83",
														"exec": [
															"pm.test(\"status code 200\", function () {",
															"    pm.response.to.have.status(200);",
															"    ",
															"",
															"    ",
															"});",
															"",
															"pm.test(\"extract message\", function () {",
															"    ",
															"    console.log(\"Nudge Details:\");",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.notificationMessageProcessorHistoryRecords).to.exist;",
															"    var size = jsonData.notificationMessageProcessorHistoryRecords.length;",
															"    ",
															"    var count=0;",
															"     for ( var i=0;i<size;i++){",
															"   if((jsonData.notificationMessageProcessorHistoryRecords[i].mobileNumber)==(pm.environment.get(\"MobileNuber\"))){",
															"  ",
															"   count++;",
															"   ",
															"pm.environment.set(\"TotalNudgesenttoMobilenum\",count );",
															"   ",
															"pm.environment.set(\"messageContent\",jsonData.notificationMessageProcessorHistoryRecords[0].messageContent);",
															"",
															"pm.environment.set(\"NudgeReceivedVia_NotificationChannelType\",jsonData.notificationMessageProcessorHistoryRecords[i].notificationChannelTypeId);",
															"console.log(\"nudgeNudgeReceivedVia_NotificationChannelType :\" +pm.variables.get(\"NudgeReceivedVia_NotificationChannelType\"));",
															"",
															"}",
															"   ",
															"    }",
															"    console.log(\"Number of nudges sent to mobile num  : \"+pm.variables.get(\"TotalNudgesenttoMobilenum\"));",
															"",
															"});",
															"",
															"pm.test(\"extract bitly url\",function(){",
															"",
															"var string = pm.variables.get(\"messageContent\");",
															"var bitly = string.match(/\\bhttps?:\\/\\/\\S+/gi);",
															"pm.environment.set(\"bitly\",bitly);",
															"console.log(bitly);",
															" ",
															"",
															"});",
															"",
															"",
															"",
															"",
															"pm.test(\"Verify MessageConent with TemplateContent \", function () {",
															"    pm.expect(pm.environment.get(\"messageContent\")).to.include(\"(HINDI-SMALLEN)\");",
															"    ",
															"    ",
															"",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{url}}/api/NotificationMessageProcessedHistory",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"NotificationMessageProcessedHistory"
													]
												}
											},
											"response": []
										},
										{
											"name": "[110]  1st change last nudge sent date",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "a66f8df1-605f-4640-aa35-cd0d72b96dff",
														"exec": [
															"var moment = require('moment');",
															"pm.environment.set(\"pickUpTime\", moment().subtract(2, 'days').format(\"YYYY-MM-DDThh:mm:ss.SSS\")) ;",
															"console.log(pm.variables.get(\"pickUpTime\"));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "23d9c19d-f037-4abd-9ce9-a7494827aacd",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Your test name\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.id).to.exist;",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"entityId\": {{entityId}},\r\n  \"ruleId\": {{ruleId}},\r\n  \"ruleLineItemId\": {{ruleLineItemId}},\r\n  \"createdDate\": \"{{pickUpTime}}\"\r\n}"
												},
												"url": {
													"raw": "{{url}}/api/Rule/UpdateEntityRuleMapping",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"Rule",
														"UpdateEntityRuleMapping"
													]
												}
											},
											"response": []
										},
										{
											"name": "[111]read Rule By Rule ID",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "b21dfda3-5d01-4762-bed6-681e39e637c4",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"pm.test(\"Your test name\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.rule.ruleLineItems[0].id).to.exist;",
															"    pm.environment.set(\"ruleLineItemId\",jsonData.rule.ruleLineItems[1].id);",
															"    ",
															"            pm.environment.set(\"TemplateName\",jsonData.rule.ruleLineItems[1].ruleLineItemResults[0].notificationMessageTemplateName);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{url}}/api/Rule?ruleId={{ruleId}}",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"Rule"
													],
													"query": [
														{
															"key": "ruleId",
															"value": "{{ruleId}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "[112]Trigger RuleExecuteEvent",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "24ac8dfd-18cf-476f-8c08-1bd93aad7e83",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"RuleExecution\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData).to.eql(true);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{url}}/api/RuleExecution?ruleId={{ruleId}}",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"RuleExecution"
													],
													"query": [
														{
															"key": "ruleId",
															"value": "{{ruleId}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "[113]TriggerExecuteNotificationMessage",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "24ac8dfd-18cf-476f-8c08-1bd93aad7e83",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Your test name\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.isExecuted).to.eql(true);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{url}}/api/JobExecution?jobId=15",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"JobExecution"
													],
													"query": [
														{
															"key": "jobId",
															"value": "15"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "[107]SearchMessageSentViaRule Copy",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "24ac8dfd-18cf-476f-8c08-1bd93aad7e83",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"to check notifications exist\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.notifications).to.exist;",
															"    var size1 = jsonData.notifications.length;",
															"  ",
															"    ",
															"    var array=JSON.parse(pm.environment.get(\"ruleLineItemId\"));",
															"    ",
															"     pm.expect((jsonData.notifications[0].ruleLineItemId)).to.eql(array);",
															"",
															"    pm.environment.set(\"TotalNudgesenttoentity\",size1);",
															"  ",
															"    console.log( \"[PRE-NAT]first nudge of entity is associated with  rulelineitemId : \"+pm.variables.get(\"ruleLineItemId\") );",
															"",
															"    ",
															"",
															"",
															"});",
															"pm.test(\"Nudge delivery Verification\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.notifications[0].messageContent).to.eql(\"\");",
															"    pm.expect(jsonData.notifications[0].mobileNumber).to.eql(\"\");",
															"    ",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{url}}/api/NotificationMessageProcessor/SearchMessageSentViaRule?entityId={{entityId}}&ruleId={{ruleId}}&ruleLineItemId={{ruleLineItemId}}",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"NotificationMessageProcessor",
														"SearchMessageSentViaRule"
													],
													"query": [
														{
															"key": "entityId",
															"value": "{{entityId}}"
														},
														{
															"key": "ruleId",
															"value": "{{ruleId}}"
														},
														{
															"key": "ruleLineItemId",
															"value": "{{ruleLineItemId}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "read notification msg template  Copy Copy",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "5f00d9c5-a80b-4f94-9b62-c4c9847be638",
														"exec": [
															"pm.test(\"extract Template Content\", function () {\r",
															"\r",
															" var jsonData = pm.response.json();\r",
															" var size = jsonData.notificationMessageTemplates[0].notificationMessageTemplateLineItems.length;\r",
															"\r",
															" console.log(size);\r",
															"\r",
															" for (let i=0; i<size; i++)\r",
															"\r",
															" {\r",
															"\r",
															"    let X =JSON.parse(jsonData.notificationMessageTemplates[0].notificationMessageTemplateLineItems[i].languageTypeId);\r",
															"\r",
															"    let Y =jsonData.notificationMessageTemplates[0].notificationMessageTemplateLineItems[i].entitySegmentTypeId;\r",
															"\r",
															"    if( X==pm.environment.get(\"languageTypeId\") & Y==pm.environment.get(\"entitySegmentTypeId\"))\r",
															"\r",
															"    {\r",
															"\r",
															"         console.log(\"TemplateContent retrived for: \");\r",
															"\r",
															"         console.log(\"Segmet:\"       +Y);\r",
															"\r",
															"         console.log(\"lanaguage:\"    +X);\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"         pm.environment.set(\"TemplateContent\",jsonData.notificationMessageTemplates[0].notificationMessageTemplateLineItems[i].templateContent);\r",
															"        break;\r",
															"     }\r",
															"\r",
															"    else{\r",
															"        \r",
															"        pm.environment.set(\"TemplateContent\", \"Template Not Found!\");\r",
															"    }\r",
															"\r",
															" }\r",
															"});\r",
															"\r",
															" "
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{url}}/api/NotificationMessageTemplate/Search?templateName={{TemplateName}}",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"NotificationMessageTemplate",
														"Search"
													],
													"query": [
														{
															"key": "templateName",
															"value": "{{TemplateName}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "[126]notificationMessageProcessorHistory",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "24ac8dfd-18cf-476f-8c08-1bd93aad7e83",
														"exec": [
															"pm.test(\"status code 200\", function () {",
															"    pm.response.to.have.status(200);",
															"    ",
															"",
															"    ",
															"});",
															"",
															"pm.test(\"extract message\", function () {",
															"    ",
															"    console.log(\"Nudge Details:\");",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.notificationMessageProcessorHistoryRecords).to.exist;",
															"    var size = jsonData.notificationMessageProcessorHistoryRecords.length;",
															"    ",
															"    var count=0;",
															"     for ( var i=0;i<size;i++){",
															"   if((jsonData.notificationMessageProcessorHistoryRecords[i].mobileNumber)==(pm.environment.get(\"MobileNuber\"))){",
															"  ",
															"   count++;",
															"   ",
															"pm.environment.set(\"TotalNudgesenttoMobilenum\",count );",
															"   ",
															"pm.environment.set(\"messageContent\",jsonData.notificationMessageProcessorHistoryRecords[0].messageContent);",
															"",
															"pm.environment.set(\"NudgeReceivedVia_NotificationChannelType\",jsonData.notificationMessageProcessorHistoryRecords[i].notificationChannelTypeId);",
															"console.log(\"nudgeNudgeReceivedVia_NotificationChannelType :\" +pm.variables.get(\"NudgeReceivedVia_NotificationChannelType\"));",
															"",
															"}",
															"   ",
															"    }",
															"    console.log(\"Number of nudges sent to mobile num  : \"+pm.variables.get(\"TotalNudgesenttoMobilenum\"));",
															"",
															"});",
															"",
															"pm.test(\"extract bitly url\",function(){",
															"",
															"var string = pm.variables.get(\"messageContent\");",
															"var bitly = string.match(/\\bhttps?:\\/\\/\\S+/gi);",
															"pm.environment.set(\"bitly\",bitly);",
															"console.log(bitly);",
															" ",
															"",
															"});",
															"",
															"",
															"",
															"",
															"pm.test(\"Verify MessageConent with TemplateContent \", function () {",
															"    pm.expect(pm.environment.get(\"messageContent\")).to.include(\"(HINDI-SMALLEN)\");",
															"    ",
															"    ",
															"",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{url}}/api/NotificationMessageProcessedHistory",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"NotificationMessageProcessedHistory"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "ecabcb97-e1be-4b36-acb8-c5c7001e9fdd",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "a112bef0-a995-4d6e-9822-736feabfcfd0",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"_postman_isSubFolder": true
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "374074ab-3278-4fb3-920b-6d70730a2463",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "8276e431-869f-4067-97e6-c612edcd6881",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "EN/Hi-HouseMakers",
							"item": [
								{
									"name": "EN-HOUSEMAKERS",
									"item": [
										{
											"name": "[102]read Rule By Rule ID",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "b21dfda3-5d01-4762-bed6-681e39e637c4",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"pm.test(\"Your test name\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.rule.ruleLineItems[0].id).to.exist;",
															"    pm.environment.set(\"ruleLineItemId\",jsonData.rule.ruleLineItems[0].id);",
															"    var size = jsonData.rule.ruleLineItems.length;",
															"    pm.environment.set(\"totalrulelineitems\",size-1);",
															"    ",
															"     pm.environment.set(\"TemplateName\",jsonData.rule.ruleLineItems[0].ruleLineItemResults[0].notificationMessageTemplateName);",
															"    ",
															"",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "f83ec8ad-5dfb-460e-83c3-ed970a1563dd",
														"exec": [
															"console.log(\"STARTED: **************[EN-HOUSEMAKERS]********************************\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{url}}/api/Rule?ruleId={{ruleId}}",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"Rule"
													],
													"query": [
														{
															"key": "ruleId",
															"value": "{{ruleId}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "[103][EN-HOUSEMAKERS] create entity**********",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "b45ca225-09f2-4fd4-a05e-4c3d13a6dbf0",
														"exec": [
															"pm.test(\"Status code is 201\", function () {",
															"    pm.response.to.have.status(201);",
															"   ",
															"    let EntityJSON = pm.response.json();",
															"    pm.expect(EntityJSON.entityId).to.exist;",
															"    pm.expect(EntityJSON.isSaved).to.equal(true);",
															"     pm.environment.set(\"entityId\", EntityJSON.entityId);",
															"    console.log(EntityJSON);",
															"});",
															"",
															"",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "0e9b9ca9-9c49-46e8-ac8c-768fb21ce4b8",
														"exec": [
															"var milliseconds = new Date().getTime();",
															"var codeSeed = \"Auto-\";",
															"pm.environment.set(\"entityCode\", codeSeed.concat(milliseconds));",
															"",
															"",
															"var codeSeed = \"Auto2nd-\";",
															"pm.environment.set(\"secondaryEntityCode\", codeSeed.concat(milliseconds));",
															"",
															"var moment = require('moment');",
															"pm.environment.set(\"timestamp\", moment().format(\"YYYY-MM-DDThh:mm:ss.SSS\"))   ;",
															"console.log(pm.variables.get(\"timestamp\"));",
															"",
															"",
															"var moment = require('moment');",
															"pm.environment.set(\"pickUpTime\", moment().subtract(2, 'days').format(\"YYYY-MM-DDThh:mm:ss.SSS\")) ;",
															"console.log(pm.variables.get(\"pickUpTime\"));",
															"",
															"let ran =  _.random(1111111111, 9999999999);",
															"pm.environment.set(\"mobileNumberNAT\",ran);",
															"",
															"pm.environment.set(\"entitySegmentTypeId\", 4);",
															"pm.environment.set(\"languageTypeId\", 1);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"id\": 0,\r\n  \"entityCode\": \"{{entityCode}}\",\r\n  \"name\": \"PreNAT-{{name}}\",\r\n  \"mobileNumber\": {{mobileNumberNAT}},\r\n  \"entityCreationDate\": \"{{timestamp}}\",\r\n  \"entitySourceSystemId\": {{entitySourceSystemId}},\r\n  \"entityStateDate\": \"{{pickUpTime}}\",\r\n  \"entityStateType\": {{entityStateType}},\r\n  \"entitySubStateType\":{{entitySubStateType}},\r\n  \"entityStateValue\": \" {{entityStateValue}} \",\r\n  \"secondaryEntityCode\": \"{{secondaryEntityCode}}\",\r\n  \"secondaryName\": \"{{secondaryName}}\",\r\n  \"secondaryMobileNumber\": {{secondaryMobileNumber}},\r\n  \"customField1\":\"location-pune\",\r\n  \"customField2\":\"state-MH\",\r\n  \"customFieldUrl\":\"https://www.w3schools.com/xml/xpath_nodes.asp\",\r\n  \"entitySegmentTypeId\": {{entitySegmentTypeId}},\r\n  \"languageTypeId\": {{languageTypeId}}\r\n}\r\n"
												},
												"url": {
													"raw": "{{url}}/api/Entity",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"Entity"
													]
												}
											},
											"response": []
										},
										{
											"name": "[104]read entity by entityId",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "24ac8dfd-18cf-476f-8c08-1bd93aad7e83",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"pm.test(\"verify mobile number\", function () {",
															"    var jsonData = pm.response.json();",
															"//  let Z = JSON.parse(jsonData.mobileNumber);",
															"//     pm.expect(Z).to.eql(pm.variables.get(\"mobileNumberNAT\"));",
															"    pm.environment.set(\"mobileNumber\",jsonData.mobileNumber);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{url}}/api/Entity?entityId={{entityId}}",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"Entity"
													],
													"query": [
														{
															"key": "entityId",
															"value": "{{entityId}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "[105]Trigger RuleExecuteEvent",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "24ac8dfd-18cf-476f-8c08-1bd93aad7e83",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"RuleExecution\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData).to.eql(true);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{url}}/api/RuleExecution?ruleId={{ruleId}}",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"RuleExecution"
													],
													"query": [
														{
															"key": "ruleId",
															"value": "{{ruleId}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "[106]TriggerExecuteNotificationMessage",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "24ac8dfd-18cf-476f-8c08-1bd93aad7e83",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"RuleExecution\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData).to.eql(true);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{url}}/api/RuleExecution?ruleId={{ruleId}}",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"RuleExecution"
													],
													"query": [
														{
															"key": "ruleId",
															"value": "{{ruleId}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "[107]SearchMessageSentViaRule",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "24ac8dfd-18cf-476f-8c08-1bd93aad7e83",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"to check notifications exist\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.notifications).to.exist;",
															"    var size1 = jsonData.notifications.length;",
															"  ",
															"    ",
															"    var array=JSON.parse(pm.environment.get(\"ruleLineItemId\"));",
															"    ",
															"     pm.expect((jsonData.notifications[0].ruleLineItemId)).to.eql(array);",
															"",
															"    pm.environment.set(\"TotalNudgesenttoentity\",size1);",
															"  ",
															"    console.log( \"[PRE-NAT]first nudge of entity is associated with  rulelineitemId : \"+pm.variables.get(\"ruleLineItemId\") );",
															"",
															"    ",
															"",
															"",
															"});",
															"pm.test(\"Nudge delivery Verification\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.notifications[0].messageContent).to.eql(\"\");",
															"    pm.expect(jsonData.notifications[0].mobileNumber).to.eql(\"\");",
															"    ",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{url}}/api/NotificationMessageProcessor/SearchMessageSentViaRule?entityId={{entityId}}&ruleId={{ruleId}}&ruleLineItemId={{ruleLineItemId}}",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"NotificationMessageProcessor",
														"SearchMessageSentViaRule"
													],
													"query": [
														{
															"key": "entityId",
															"value": "{{entityId}}"
														},
														{
															"key": "ruleId",
															"value": "{{ruleId}}"
														},
														{
															"key": "ruleLineItemId",
															"value": "{{ruleLineItemId}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "read notification msg template  Copy",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "5f00d9c5-a80b-4f94-9b62-c4c9847be638",
														"exec": [
															"pm.test(\"extract Template Content\", function () {\r",
															"\r",
															" var jsonData = pm.response.json();\r",
															" var size = jsonData.notificationMessageTemplates[0].notificationMessageTemplateLineItems.length;\r",
															"\r",
															" console.log(size);\r",
															"\r",
															" for (let i=0; i<size; i++)\r",
															"\r",
															" {\r",
															"\r",
															"    let X =JSON.parse(jsonData.notificationMessageTemplates[0].notificationMessageTemplateLineItems[i].languageTypeId);\r",
															"\r",
															"    let Y =jsonData.notificationMessageTemplates[0].notificationMessageTemplateLineItems[i].entitySegmentTypeId;\r",
															"\r",
															"    if( X==pm.environment.get(\"languageTypeId\") & Y==pm.environment.get(\"entitySegmentTypeId\"))\r",
															"\r",
															"    {\r",
															"\r",
															"         console.log(\"TemplateContent retrived for: \");\r",
															"\r",
															"         console.log(\"Segmet:\"       +Y);\r",
															"\r",
															"         console.log(\"lanaguage:\"    +X);\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"         pm.environment.set(\"TemplateContent\",jsonData.notificationMessageTemplates[0].notificationMessageTemplateLineItems[i].templateContent);\r",
															"        break;\r",
															"     }\r",
															"\r",
															"    else{\r",
															"        \r",
															"        pm.environment.set(\"TemplateContent\", \"Template Not Found!\");\r",
															"    }\r",
															"\r",
															" }\r",
															"});\r",
															"\r",
															" "
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{url}}/api/NotificationMessageTemplate/Search?templateName={{TemplateName}}",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"NotificationMessageTemplate",
														"Search"
													],
													"query": [
														{
															"key": "templateName",
															"value": "{{TemplateName}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "[126]notificationMessageProcessorHistory Copy",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "24ac8dfd-18cf-476f-8c08-1bd93aad7e83",
														"exec": [
															"pm.test(\"status code 200\", function () {",
															"    pm.response.to.have.status(200);",
															"    ",
															"",
															"    ",
															"});",
															"",
															"pm.test(\"extract message\", function () {",
															"    ",
															"    console.log(\"Nudge Details:\");",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.notificationMessageProcessorHistoryRecords).to.exist;",
															"    var size = jsonData.notificationMessageProcessorHistoryRecords.length;",
															"    ",
															"    var count=0;",
															"     for ( var i=0;i<size;i++){",
															"   if((jsonData.notificationMessageProcessorHistoryRecords[i].mobileNumber)==(pm.environment.get(\"MobileNuber\"))){",
															"  ",
															"   count++;",
															"   ",
															"pm.environment.set(\"TotalNudgesenttoMobilenum\",count );",
															"   ",
															"pm.environment.set(\"messageContent\",jsonData.notificationMessageProcessorHistoryRecords[0].messageContent);",
															"",
															"pm.environment.set(\"NudgeReceivedVia_NotificationChannelType\",jsonData.notificationMessageProcessorHistoryRecords[i].notificationChannelTypeId);",
															"console.log(\"nudgeNudgeReceivedVia_NotificationChannelType :\" +pm.variables.get(\"NudgeReceivedVia_NotificationChannelType\"));",
															"",
															"}",
															"   ",
															"    }",
															"    console.log(\"Number of nudges sent to mobile num  : \"+pm.variables.get(\"TotalNudgesenttoMobilenum\"));",
															"",
															"});",
															"",
															"pm.test(\"extract bitly url\",function(){",
															"",
															"var string = pm.variables.get(\"messageContent\");",
															"var bitly = string.match(/\\bhttps?:\\/\\/\\S+/gi);",
															"pm.environment.set(\"bitly\",bitly);",
															"console.log(bitly);",
															" ",
															"",
															"});",
															"",
															"",
															"",
															"",
															"pm.test(\"Verify MessageConent with TemplateContent \", function () {",
															"    pm.expect(pm.environment.get(\"messageContent\")).to.include(\"(ENGLISH-HOUSEMAKERS)\");",
															"    ",
															"    ",
															"",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{url}}/api/NotificationMessageProcessedHistory",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"NotificationMessageProcessedHistory"
													]
												}
											},
											"response": []
										},
										{
											"name": "[110]  1st change last nudge sent date",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "a66f8df1-605f-4640-aa35-cd0d72b96dff",
														"exec": [
															"var moment = require('moment');",
															"pm.environment.set(\"pickUpTime\", moment().subtract(2, 'days').format(\"YYYY-MM-DDThh:mm:ss.SSS\")) ;",
															"console.log(pm.variables.get(\"pickUpTime\"));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "23d9c19d-f037-4abd-9ce9-a7494827aacd",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Your test name\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.id).to.exist;",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"entityId\": {{entityId}},\r\n  \"ruleId\": {{ruleId}},\r\n  \"ruleLineItemId\": {{ruleLineItemId}},\r\n  \"createdDate\": \"{{pickUpTime}}\"\r\n}"
												},
												"url": {
													"raw": "{{url}}/api/Rule/UpdateEntityRuleMapping",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"Rule",
														"UpdateEntityRuleMapping"
													]
												}
											},
											"response": []
										},
										{
											"name": "[111]read Rule By Rule ID",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "b21dfda3-5d01-4762-bed6-681e39e637c4",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"pm.test(\"Your test name\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.rule.ruleLineItems[0].id).to.exist;",
															"    pm.environment.set(\"ruleLineItemId\",jsonData.rule.ruleLineItems[1].id);",
															"    ",
															"            pm.environment.set(\"TemplateName\",jsonData.rule.ruleLineItems[1].ruleLineItemResults[0].notificationMessageTemplateName);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{url}}/api/Rule?ruleId={{ruleId}}",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"Rule"
													],
													"query": [
														{
															"key": "ruleId",
															"value": "{{ruleId}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "[112]Trigger RuleExecuteEvent",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "24ac8dfd-18cf-476f-8c08-1bd93aad7e83",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"RuleExecution\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData).to.eql(true);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{url}}/api/RuleExecution?ruleId={{ruleId}}",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"RuleExecution"
													],
													"query": [
														{
															"key": "ruleId",
															"value": "{{ruleId}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "[113]TriggerExecuteNotificationMessage",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "24ac8dfd-18cf-476f-8c08-1bd93aad7e83",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Your test name\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.isExecuted).to.eql(true);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{url}}/api/JobExecution?jobId=15",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"JobExecution"
													],
													"query": [
														{
															"key": "jobId",
															"value": "15"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "[107]SearchMessageSentViaRule Copy",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "24ac8dfd-18cf-476f-8c08-1bd93aad7e83",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"to check notifications exist\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.notifications).to.exist;",
															"    var size1 = jsonData.notifications.length;",
															"  ",
															"    ",
															"    var array=JSON.parse(pm.environment.get(\"ruleLineItemId\"));",
															"    ",
															"     pm.expect((jsonData.notifications[0].ruleLineItemId)).to.eql(array);",
															"",
															"    pm.environment.set(\"TotalNudgesenttoentity\",size1);",
															"  ",
															"    console.log( \"[PRE-NAT]first nudge of entity is associated with  rulelineitemId : \"+pm.variables.get(\"ruleLineItemId\") );",
															"",
															"    ",
															"",
															"",
															"});",
															"pm.test(\"Nudge delivery Verification\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.notifications[0].messageContent).to.eql(\"\");",
															"    pm.expect(jsonData.notifications[0].mobileNumber).to.eql(\"\");",
															"    ",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{url}}/api/NotificationMessageProcessor/SearchMessageSentViaRule?entityId={{entityId}}&ruleId={{ruleId}}&ruleLineItemId={{ruleLineItemId}}",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"NotificationMessageProcessor",
														"SearchMessageSentViaRule"
													],
													"query": [
														{
															"key": "entityId",
															"value": "{{entityId}}"
														},
														{
															"key": "ruleId",
															"value": "{{ruleId}}"
														},
														{
															"key": "ruleLineItemId",
															"value": "{{ruleLineItemId}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "read notification msg template  Copy Copy",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "5f00d9c5-a80b-4f94-9b62-c4c9847be638",
														"exec": [
															"pm.test(\"extract Template Content\", function () {\r",
															"\r",
															" var jsonData = pm.response.json();\r",
															" var size = jsonData.notificationMessageTemplates[0].notificationMessageTemplateLineItems.length;\r",
															"\r",
															" console.log(size);\r",
															"\r",
															" for (let i=0; i<size; i++)\r",
															"\r",
															" {\r",
															"\r",
															"    let X =JSON.parse(jsonData.notificationMessageTemplates[0].notificationMessageTemplateLineItems[i].languageTypeId);\r",
															"\r",
															"    let Y =jsonData.notificationMessageTemplates[0].notificationMessageTemplateLineItems[i].entitySegmentTypeId;\r",
															"\r",
															"    if( X==pm.environment.get(\"languageTypeId\") & Y==pm.environment.get(\"entitySegmentTypeId\"))\r",
															"\r",
															"    {\r",
															"\r",
															"         console.log(\"TemplateContent retrived for: \");\r",
															"\r",
															"         console.log(\"Segmet:\"       +Y);\r",
															"\r",
															"         console.log(\"lanaguage:\"    +X);\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"         pm.environment.set(\"TemplateContent\",jsonData.notificationMessageTemplates[0].notificationMessageTemplateLineItems[i].templateContent);\r",
															"        break;\r",
															"     }\r",
															"\r",
															"    else{\r",
															"        \r",
															"        pm.environment.set(\"TemplateContent\", \"Template Not Found!\");\r",
															"    }\r",
															"\r",
															" }\r",
															"});\r",
															"\r",
															" "
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{url}}/api/NotificationMessageTemplate/Search?templateName={{TemplateName}}",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"NotificationMessageTemplate",
														"Search"
													],
													"query": [
														{
															"key": "templateName",
															"value": "{{TemplateName}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "[126]notificationMessageProcessorHistory",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "24ac8dfd-18cf-476f-8c08-1bd93aad7e83",
														"exec": [
															"pm.test(\"status code 200\", function () {",
															"    pm.response.to.have.status(200);",
															"    ",
															"",
															"    ",
															"});",
															"",
															"pm.test(\"extract message\", function () {",
															"    ",
															"    console.log(\"Nudge Details:\");",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.notificationMessageProcessorHistoryRecords).to.exist;",
															"    var size = jsonData.notificationMessageProcessorHistoryRecords.length;",
															"    ",
															"    var count=0;",
															"     for ( var i=0;i<size;i++){",
															"   if((jsonData.notificationMessageProcessorHistoryRecords[i].mobileNumber)==(pm.environment.get(\"MobileNuber\"))){",
															"  ",
															"   count++;",
															"   ",
															"pm.environment.set(\"TotalNudgesenttoMobilenum\",count );",
															"   ",
															"pm.environment.set(\"messageContent\",jsonData.notificationMessageProcessorHistoryRecords[0].messageContent);",
															"",
															"pm.environment.set(\"NudgeReceivedVia_NotificationChannelType\",jsonData.notificationMessageProcessorHistoryRecords[i].notificationChannelTypeId);",
															"console.log(\"nudgeNudgeReceivedVia_NotificationChannelType :\" +pm.variables.get(\"NudgeReceivedVia_NotificationChannelType\"));",
															"",
															"}",
															"   ",
															"    }",
															"    console.log(\"Number of nudges sent to mobile num  : \"+pm.variables.get(\"TotalNudgesenttoMobilenum\"));",
															"",
															"});",
															"",
															"pm.test(\"extract bitly url\",function(){",
															"",
															"var string = pm.variables.get(\"messageContent\");",
															"var bitly = string.match(/\\bhttps?:\\/\\/\\S+/gi);",
															"pm.environment.set(\"bitly\",bitly);",
															"console.log(bitly);",
															" ",
															"",
															"});",
															"",
															"",
															"",
															"",
															"pm.test(\"Verify MessageConent with TemplateContent \", function () {",
															"    pm.expect(pm.environment.get(\"messageContent\")).to.include(\"(ENGLISH-HOUSEMAKERS)\");",
															"    ",
															"    ",
															"",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{url}}/api/NotificationMessageProcessedHistory",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"NotificationMessageProcessedHistory"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "ecabcb97-e1be-4b36-acb8-c5c7001e9fdd",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "a112bef0-a995-4d6e-9822-736feabfcfd0",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"_postman_isSubFolder": true
								},
								{
									"name": "HI-HOUSEMAKERS",
									"item": [
										{
											"name": "[102]read Rule By Rule ID",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "b21dfda3-5d01-4762-bed6-681e39e637c4",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"pm.test(\"Your test name\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.rule.ruleLineItems[0].id).to.exist;",
															"    pm.environment.set(\"ruleLineItemId\",jsonData.rule.ruleLineItems[0].id);",
															"    var size = jsonData.rule.ruleLineItems.length;",
															"    pm.environment.set(\"totalrulelineitems\",size-1);",
															"    ",
															"     pm.environment.set(\"TemplateName\",jsonData.rule.ruleLineItems[0].ruleLineItemResults[0].notificationMessageTemplateName);",
															"    ",
															"",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "7602e758-ac2e-4969-a88a-2179c42316cd",
														"exec": [
															"console.log(\"STARTED: **************[Hi-HOUSEMAKERS]********************************\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{url}}/api/Rule?ruleId={{ruleId}}",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"Rule"
													],
													"query": [
														{
															"key": "ruleId",
															"value": "{{ruleId}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "[103][HI-HOUSEMAKERS]create entity***********",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "b45ca225-09f2-4fd4-a05e-4c3d13a6dbf0",
														"exec": [
															"pm.test(\"Status code is 201\", function () {",
															"    pm.response.to.have.status(201);",
															"   ",
															"    let EntityJSON = pm.response.json();",
															"    pm.expect(EntityJSON.entityId).to.exist;",
															"    pm.expect(EntityJSON.isSaved).to.equal(true);",
															"     pm.environment.set(\"entityId\", EntityJSON.entityId);",
															"    console.log(EntityJSON);",
															"});",
															"",
															"",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "0e9b9ca9-9c49-46e8-ac8c-768fb21ce4b8",
														"exec": [
															"var milliseconds = new Date().getTime();",
															"var codeSeed = \"Auto-\";",
															"pm.environment.set(\"entityCode\", codeSeed.concat(milliseconds));",
															"",
															"",
															"var codeSeed = \"Auto2nd-\";",
															"pm.environment.set(\"secondaryEntityCode\", codeSeed.concat(milliseconds));",
															"",
															"var moment = require('moment');",
															"pm.environment.set(\"timestamp\", moment().format(\"YYYY-MM-DDThh:mm:ss.SSS\"))   ;",
															"console.log(pm.variables.get(\"timestamp\"));",
															"",
															"",
															"var moment = require('moment');",
															"pm.environment.set(\"pickUpTime\", moment().subtract(2, 'days').format(\"YYYY-MM-DDThh:mm:ss.SSS\")) ;",
															"console.log(pm.variables.get(\"pickUpTime\"));",
															"",
															"let ran =  _.random(1111111111, 9999999999);",
															"pm.environment.set(\"mobileNumberNAT\",ran);",
															"",
															"pm.environment.set(\"entitySegmentTypeId\", 4);",
															"pm.environment.set(\"languageTypeId\", 2);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"id\": 0,\r\n  \"entityCode\": \"{{entityCode}}\",\r\n  \"name\": \"PreNAT-{{name}}\",\r\n  \"mobileNumber\": {{mobileNumberNAT}},\r\n  \"entityCreationDate\": \"{{timestamp}}\",\r\n  \"entitySourceSystemId\": {{entitySourceSystemId}},\r\n  \"entityStateDate\": \"{{pickUpTime}}\",\r\n  \"entityStateType\": {{entityStateType}},\r\n  \"entitySubStateType\":{{entitySubStateType}},\r\n  \"entityStateValue\": \" {{entityStateValue}} \",\r\n  \"secondaryEntityCode\": \"{{secondaryEntityCode}}\",\r\n  \"secondaryName\": \"{{secondaryName}}\",\r\n  \"secondaryMobileNumber\": {{secondaryMobileNumber}},\r\n  \"customField1\":\"location-pune\",\r\n  \"customField2\":\"state-MH\",\r\n  \"customFieldUrl\":\"https://www.w3schools.com/xml/xpath_nodes.asp\",\r\n  \"entitySegmentTypeId\": {{entitySegmentTypeId}},\r\n  \"languageTypeId\": {{languageTypeId}}\r\n}\r\n"
												},
												"url": {
													"raw": "{{url}}/api/Entity",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"Entity"
													]
												}
											},
											"response": []
										},
										{
											"name": "[104]read entity by entityId",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "24ac8dfd-18cf-476f-8c08-1bd93aad7e83",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"pm.test(\"verify mobile number\", function () {",
															"    var jsonData = pm.response.json();",
															"//  let Z = JSON.parse(jsonData.mobileNumber);",
															"//     pm.expect(Z).to.eql(pm.variables.get(\"mobileNumberNAT\"));",
															"    pm.environment.set(\"mobileNumber\",jsonData.mobileNumber);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{url}}/api/Entity?entityId={{entityId}}",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"Entity"
													],
													"query": [
														{
															"key": "entityId",
															"value": "{{entityId}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "[105]Trigger RuleExecuteEvent",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "24ac8dfd-18cf-476f-8c08-1bd93aad7e83",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"RuleExecution\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData).to.eql(true);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{url}}/api/RuleExecution?ruleId={{ruleId}}",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"RuleExecution"
													],
													"query": [
														{
															"key": "ruleId",
															"value": "{{ruleId}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "[106]TriggerExecuteNotificationMessage",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "24ac8dfd-18cf-476f-8c08-1bd93aad7e83",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Your test name\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.isExecuted).to.eql(true);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{url}}/api/JobExecution?jobId=15",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"JobExecution"
													],
													"query": [
														{
															"key": "jobId",
															"value": "15"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "[107]SearchMessageSentViaRule",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "24ac8dfd-18cf-476f-8c08-1bd93aad7e83",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"to check notifications exist\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.notifications).to.exist;",
															"    var size1 = jsonData.notifications.length;",
															"  ",
															"    ",
															"    var array=JSON.parse(pm.environment.get(\"ruleLineItemId\"));",
															"    ",
															"     pm.expect((jsonData.notifications[0].ruleLineItemId)).to.eql(array);",
															"",
															"    pm.environment.set(\"TotalNudgesenttoentity\",size1);",
															"  ",
															"    console.log( \"[PRE-NAT]first nudge of entity is associated with  rulelineitemId : \"+pm.variables.get(\"ruleLineItemId\") );",
															"",
															"    ",
															"",
															"",
															"});",
															"pm.test(\"Nudge delivery Verification\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.notifications[0].messageContent).to.eql(\"\");",
															"    pm.expect(jsonData.notifications[0].mobileNumber).to.eql(\"\");",
															"    ",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{url}}/api/NotificationMessageProcessor/SearchMessageSentViaRule?entityId={{entityId}}&ruleId={{ruleId}}&ruleLineItemId={{ruleLineItemId}}",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"NotificationMessageProcessor",
														"SearchMessageSentViaRule"
													],
													"query": [
														{
															"key": "entityId",
															"value": "{{entityId}}"
														},
														{
															"key": "ruleId",
															"value": "{{ruleId}}"
														},
														{
															"key": "ruleLineItemId",
															"value": "{{ruleLineItemId}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "read notification msg template  Copy",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "5f00d9c5-a80b-4f94-9b62-c4c9847be638",
														"exec": [
															"pm.test(\"extract Template Content\", function () {\r",
															"\r",
															" var jsonData = pm.response.json();\r",
															" var size = jsonData.notificationMessageTemplates[0].notificationMessageTemplateLineItems.length;\r",
															"\r",
															" console.log(size);\r",
															"\r",
															" for (let i=0; i<size; i++)\r",
															"\r",
															" {\r",
															"\r",
															"    let X =JSON.parse(jsonData.notificationMessageTemplates[0].notificationMessageTemplateLineItems[i].languageTypeId);\r",
															"\r",
															"    let Y =jsonData.notificationMessageTemplates[0].notificationMessageTemplateLineItems[i].entitySegmentTypeId;\r",
															"\r",
															"    if( X==pm.environment.get(\"languageTypeId\") & Y==pm.environment.get(\"entitySegmentTypeId\"))\r",
															"\r",
															"    {\r",
															"\r",
															"         console.log(\"TemplateContent retrived for: \");\r",
															"\r",
															"         console.log(\"Segmet:\"       +Y);\r",
															"\r",
															"         console.log(\"lanaguage:\"    +X);\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"         pm.environment.set(\"TemplateContent\",jsonData.notificationMessageTemplates[0].notificationMessageTemplateLineItems[i].templateContent);\r",
															"        break;\r",
															"     }\r",
															"\r",
															"    else{\r",
															"        \r",
															"        pm.environment.set(\"TemplateContent\", \"Template Not Found!\");\r",
															"    }\r",
															"\r",
															" }\r",
															"});\r",
															"\r",
															" "
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{url}}/api/NotificationMessageTemplate/Search?templateName={{TemplateName}}",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"NotificationMessageTemplate",
														"Search"
													],
													"query": [
														{
															"key": "templateName",
															"value": "{{TemplateName}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "[126]notificationMessageProcessorHistory Copy",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "24ac8dfd-18cf-476f-8c08-1bd93aad7e83",
														"exec": [
															"pm.test(\"status code 200\", function () {",
															"    pm.response.to.have.status(200);",
															"    ",
															"",
															"    ",
															"});",
															"",
															"pm.test(\"extract message\", function () {",
															"    ",
															"    console.log(\"Nudge Details:\");",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.notificationMessageProcessorHistoryRecords).to.exist;",
															"    var size = jsonData.notificationMessageProcessorHistoryRecords.length;",
															"    ",
															"    var count=0;",
															"     for ( var i=0;i<size;i++){",
															"   if((jsonData.notificationMessageProcessorHistoryRecords[i].mobileNumber)==(pm.environment.get(\"MobileNuber\"))){",
															"  ",
															"   count++;",
															"   ",
															"pm.environment.set(\"TotalNudgesenttoMobilenum\",count );",
															"   ",
															"pm.environment.set(\"messageContent\",jsonData.notificationMessageProcessorHistoryRecords[0].messageContent);",
															"",
															"pm.environment.set(\"NudgeReceivedVia_NotificationChannelType\",jsonData.notificationMessageProcessorHistoryRecords[i].notificationChannelTypeId);",
															"console.log(\"nudgeNudgeReceivedVia_NotificationChannelType :\" +pm.variables.get(\"NudgeReceivedVia_NotificationChannelType\"));",
															"",
															"}",
															"   ",
															"    }",
															"    console.log(\"Number of nudges sent to mobile num  : \"+pm.variables.get(\"TotalNudgesenttoMobilenum\"));",
															"",
															"});",
															"",
															"pm.test(\"extract bitly url\",function(){",
															"",
															"var string = pm.variables.get(\"messageContent\");",
															"var bitly = string.match(/\\bhttps?:\\/\\/\\S+/gi);",
															"pm.environment.set(\"bitly\",bitly);",
															"console.log(bitly);",
															" ",
															"",
															"});",
															"",
															"",
															"",
															"",
															"pm.test(\"Verify MessageConent with TemplateContent \", function () {",
															"    pm.expect(pm.environment.get(\"messageContent\")).to.include(\"(HINDI-HOUSEMAKERS)\");",
															"    ",
															"    ",
															"",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{url}}/api/NotificationMessageProcessedHistory",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"NotificationMessageProcessedHistory"
													]
												}
											},
											"response": []
										},
										{
											"name": "[110]  1st change last nudge sent date",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "a66f8df1-605f-4640-aa35-cd0d72b96dff",
														"exec": [
															"var moment = require('moment');",
															"pm.environment.set(\"pickUpTime\", moment().subtract(2, 'days').format(\"YYYY-MM-DDThh:mm:ss.SSS\")) ;",
															"console.log(pm.variables.get(\"pickUpTime\"));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "23d9c19d-f037-4abd-9ce9-a7494827aacd",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Your test name\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.id).to.exist;",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"entityId\": {{entityId}},\r\n  \"ruleId\": {{ruleId}},\r\n  \"ruleLineItemId\": {{ruleLineItemId}},\r\n  \"createdDate\": \"{{pickUpTime}}\"\r\n}"
												},
												"url": {
													"raw": "{{url}}/api/Rule/UpdateEntityRuleMapping",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"Rule",
														"UpdateEntityRuleMapping"
													]
												}
											},
											"response": []
										},
										{
											"name": "[111]read Rule By Rule ID",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "b21dfda3-5d01-4762-bed6-681e39e637c4",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"pm.test(\"Your test name\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.rule.ruleLineItems[0].id).to.exist;",
															"    pm.environment.set(\"ruleLineItemId\",jsonData.rule.ruleLineItems[1].id);",
															"    ",
															"            pm.environment.set(\"TemplateName\",jsonData.rule.ruleLineItems[1].ruleLineItemResults[0].notificationMessageTemplateName);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{url}}/api/Rule?ruleId={{ruleId}}",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"Rule"
													],
													"query": [
														{
															"key": "ruleId",
															"value": "{{ruleId}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "[112]Trigger RuleExecuteEvent",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "24ac8dfd-18cf-476f-8c08-1bd93aad7e83",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"RuleExecution\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData).to.eql(true);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{url}}/api/RuleExecution?ruleId={{ruleId}}",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"RuleExecution"
													],
													"query": [
														{
															"key": "ruleId",
															"value": "{{ruleId}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "[113]TriggerExecuteNotificationMessage",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "24ac8dfd-18cf-476f-8c08-1bd93aad7e83",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Your test name\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.isExecuted).to.eql(true);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{url}}/api/JobExecution?jobId=15",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"JobExecution"
													],
													"query": [
														{
															"key": "jobId",
															"value": "15"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "[107]SearchMessageSentViaRule Copy",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "24ac8dfd-18cf-476f-8c08-1bd93aad7e83",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"to check notifications exist\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.notifications).to.exist;",
															"    var size1 = jsonData.notifications.length;",
															"  ",
															"    ",
															"    var array=JSON.parse(pm.environment.get(\"ruleLineItemId\"));",
															"    ",
															"     pm.expect((jsonData.notifications[0].ruleLineItemId)).to.eql(array);",
															"",
															"    pm.environment.set(\"TotalNudgesenttoentity\",size1);",
															"  ",
															"    console.log( \"[PRE-NAT]first nudge of entity is associated with  rulelineitemId : \"+pm.variables.get(\"ruleLineItemId\") );",
															"",
															"    ",
															"",
															"",
															"});",
															"pm.test(\"Nudge delivery Verification\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.notifications[0].messageContent).to.eql(\"\");",
															"    pm.expect(jsonData.notifications[0].mobileNumber).to.eql(\"\");",
															"    ",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{url}}/api/NotificationMessageProcessor/SearchMessageSentViaRule?entityId={{entityId}}&ruleId={{ruleId}}&ruleLineItemId={{ruleLineItemId}}",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"NotificationMessageProcessor",
														"SearchMessageSentViaRule"
													],
													"query": [
														{
															"key": "entityId",
															"value": "{{entityId}}"
														},
														{
															"key": "ruleId",
															"value": "{{ruleId}}"
														},
														{
															"key": "ruleLineItemId",
															"value": "{{ruleLineItemId}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "read notification msg template  Copy Copy",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "5f00d9c5-a80b-4f94-9b62-c4c9847be638",
														"exec": [
															"pm.test(\"extract Template Content\", function () {\r",
															"\r",
															" var jsonData = pm.response.json();\r",
															" var size = jsonData.notificationMessageTemplates[0].notificationMessageTemplateLineItems.length;\r",
															"\r",
															" console.log(size);\r",
															"\r",
															" for (let i=0; i<size; i++)\r",
															"\r",
															" {\r",
															"\r",
															"    let X =JSON.parse(jsonData.notificationMessageTemplates[0].notificationMessageTemplateLineItems[i].languageTypeId);\r",
															"\r",
															"    let Y =jsonData.notificationMessageTemplates[0].notificationMessageTemplateLineItems[i].entitySegmentTypeId;\r",
															"\r",
															"    if( X==pm.environment.get(\"languageTypeId\") & Y==pm.environment.get(\"entitySegmentTypeId\"))\r",
															"\r",
															"    {\r",
															"\r",
															"         console.log(\"TemplateContent retrived for: \");\r",
															"\r",
															"         console.log(\"Segmet:\"       +Y);\r",
															"\r",
															"         console.log(\"lanaguage:\"    +X);\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"         pm.environment.set(\"TemplateContent\",jsonData.notificationMessageTemplates[0].notificationMessageTemplateLineItems[i].templateContent);\r",
															"        break;\r",
															"     }\r",
															"\r",
															"    else{\r",
															"        \r",
															"        pm.environment.set(\"TemplateContent\", \"Template Not Found!\");\r",
															"    }\r",
															"\r",
															" }\r",
															"});\r",
															"\r",
															" "
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{url}}/api/NotificationMessageTemplate/Search?templateName={{TemplateName}}",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"NotificationMessageTemplate",
														"Search"
													],
													"query": [
														{
															"key": "templateName",
															"value": "{{TemplateName}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "[126]notificationMessageProcessorHistory",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "24ac8dfd-18cf-476f-8c08-1bd93aad7e83",
														"exec": [
															"pm.test(\"status code 200\", function () {",
															"    pm.response.to.have.status(200);",
															"    ",
															"",
															"    ",
															"});",
															"",
															"pm.test(\"extract message\", function () {",
															"    ",
															"    console.log(\"Nudge Details:\");",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.notificationMessageProcessorHistoryRecords).to.exist;",
															"    var size = jsonData.notificationMessageProcessorHistoryRecords.length;",
															"    ",
															"    var count=0;",
															"     for ( var i=0;i<size;i++){",
															"   if((jsonData.notificationMessageProcessorHistoryRecords[i].mobileNumber)==(pm.environment.get(\"MobileNuber\"))){",
															"  ",
															"   count++;",
															"   ",
															"pm.environment.set(\"TotalNudgesenttoMobilenum\",count );",
															"   ",
															"pm.environment.set(\"messageContent\",jsonData.notificationMessageProcessorHistoryRecords[0].messageContent);",
															"",
															"pm.environment.set(\"NudgeReceivedVia_NotificationChannelType\",jsonData.notificationMessageProcessorHistoryRecords[i].notificationChannelTypeId);",
															"console.log(\"nudgeNudgeReceivedVia_NotificationChannelType :\" +pm.variables.get(\"NudgeReceivedVia_NotificationChannelType\"));",
															"",
															"}",
															"   ",
															"    }",
															"    console.log(\"Number of nudges sent to mobile num  : \"+pm.variables.get(\"TotalNudgesenttoMobilenum\"));",
															"",
															"});",
															"",
															"pm.test(\"extract bitly url\",function(){",
															"",
															"var string = pm.variables.get(\"messageContent\");",
															"var bitly = string.match(/\\bhttps?:\\/\\/\\S+/gi);",
															"pm.environment.set(\"bitly\",bitly);",
															"console.log(bitly);",
															" ",
															"",
															"});",
															"",
															"",
															"",
															"",
															"pm.test(\"Verify MessageConent with TemplateContent \", function () {",
															"    pm.expect(pm.environment.get(\"messageContent\")).to.include(\"(HINDI-HOUSEMAKERS)\");",
															"    ",
															"    ",
															"",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{url}}/api/NotificationMessageProcessedHistory",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"NotificationMessageProcessedHistory"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "ecabcb97-e1be-4b36-acb8-c5c7001e9fdd",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "a112bef0-a995-4d6e-9822-736feabfcfd0",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"_postman_isSubFolder": true
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "374074ab-3278-4fb3-920b-6d70730a2463",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "8276e431-869f-4067-97e6-c612edcd6881",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "EN/Hi- FINANCIAL",
							"item": [
								{
									"name": "EN-FINANCIAL",
									"item": [
										{
											"name": "[102]read Rule By Rule ID",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "b21dfda3-5d01-4762-bed6-681e39e637c4",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"pm.test(\"Your test name\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.rule.ruleLineItems[0].id).to.exist;",
															"    pm.environment.set(\"ruleLineItemId\",jsonData.rule.ruleLineItems[0].id);",
															"    var size = jsonData.rule.ruleLineItems.length;",
															"    pm.environment.set(\"totalrulelineitems\",size-1);",
															"    ",
															"     pm.environment.set(\"TemplateName\",jsonData.rule.ruleLineItems[0].ruleLineItemResults[0].notificationMessageTemplateName);",
															"    ",
															"",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "03688dad-7952-42bc-925e-bdededf2431c",
														"exec": [
															"console.log(\"STARTED: **************[EN-FINANCIAL]********************************\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{url}}/api/Rule?ruleId={{ruleId}}",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"Rule"
													],
													"query": [
														{
															"key": "ruleId",
															"value": "{{ruleId}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "[103] [EN-FINANCIAL] create entity*************",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "b45ca225-09f2-4fd4-a05e-4c3d13a6dbf0",
														"exec": [
															"pm.test(\"Status code is 201\", function () {",
															"    pm.response.to.have.status(201);",
															"   ",
															"    let EntityJSON = pm.response.json();",
															"    pm.expect(EntityJSON.entityId).to.exist;",
															"    pm.expect(EntityJSON.isSaved).to.equal(true);",
															"     pm.environment.set(\"entityId\", EntityJSON.entityId);",
															"    console.log(EntityJSON);",
															"});",
															"",
															"",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "0e9b9ca9-9c49-46e8-ac8c-768fb21ce4b8",
														"exec": [
															"var milliseconds = new Date().getTime();",
															"var codeSeed = \"Auto-\";",
															"pm.environment.set(\"entityCode\", codeSeed.concat(milliseconds));",
															"",
															"",
															"var codeSeed = \"Auto2nd-\";",
															"pm.environment.set(\"secondaryEntityCode\", codeSeed.concat(milliseconds));",
															"",
															"var moment = require('moment');",
															"pm.environment.set(\"timestamp\", moment().format(\"YYYY-MM-DDThh:mm:ss.SSS\"))   ;",
															"console.log(pm.variables.get(\"timestamp\"));",
															"",
															"",
															"var moment = require('moment');",
															"pm.environment.set(\"pickUpTime\", moment().subtract(2, 'days').format(\"YYYY-MM-DDThh:mm:ss.SSS\")) ;",
															"console.log(pm.variables.get(\"pickUpTime\"));",
															"let ran =  _.random(1111111111, 9999999999);",
															"pm.environment.set(\"mobileNumberNAT\",ran);",
															"",
															"pm.environment.set(\"entitySegmentTypeId\", 5);",
															"pm.environment.set(\"languageTypeId\", 1);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"id\": 0,\r\n  \"entityCode\": \"{{entityCode}}\",\r\n  \"name\": \"PreNAT-{{name}}\",\r\n  \"mobileNumber\": {{mobileNumberNAT}},\r\n  \"entityCreationDate\": \"{{timestamp}}\",\r\n  \"entitySourceSystemId\": {{entitySourceSystemId}},\r\n  \"entityStateDate\": \"{{pickUpTime}}\",\r\n  \"entityStateType\": {{entityStateType}},\r\n  \"entitySubStateType\":{{entitySubStateType}},\r\n  \"entityStateValue\": \" {{entityStateValue}} \",\r\n  \"secondaryEntityCode\": \"{{secondaryEntityCode}}\",\r\n  \"secondaryName\": \"{{secondaryName}}\",\r\n  \"secondaryMobileNumber\": {{secondaryMobileNumber}},\r\n  \"customField1\":\"location-pune\",\r\n  \"customField2\":\"state-MH\",\r\n  \"customFieldUrl\":\"https://www.w3schools.com/xml/xpath_nodes.asp\",\r\n  \"entitySegmentTypeId\": {{entitySegmentTypeId}},\r\n  \"languageTypeId\": {{languageTypeId}}\r\n}\r\n"
												},
												"url": {
													"raw": "{{url}}/api/Entity",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"Entity"
													]
												}
											},
											"response": []
										},
										{
											"name": "[104]read entity by entityId",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "24ac8dfd-18cf-476f-8c08-1bd93aad7e83",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"pm.test(\"verify mobile number\", function () {",
															"    var jsonData = pm.response.json();",
															"    // let X=JSON.parse(jsonData.mobileNumber);",
															"    ",
															"    // pm.expect(X).to.eql(pm.variables.get(\"mobileNumberNAT\"));",
															"    pm.environment.set(\"mobileNumber\",jsonData.mobileNumber);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{url}}/api/Entity?entityId={{entityId}}",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"Entity"
													],
													"query": [
														{
															"key": "entityId",
															"value": "{{entityId}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "[105]Trigger RuleExecuteEvent",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "24ac8dfd-18cf-476f-8c08-1bd93aad7e83",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"RuleExecution\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData).to.eql(true);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{url}}/api/RuleExecution?ruleId={{ruleId}}",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"RuleExecution"
													],
													"query": [
														{
															"key": "ruleId",
															"value": "{{ruleId}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "[106]TriggerExecuteNotificationMessage",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "24ac8dfd-18cf-476f-8c08-1bd93aad7e83",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"ExecuteNotificationMessage\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.isExecuted).to.eql(true);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{url}}/api/JobExecution?jobId=15",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"JobExecution"
													],
													"query": [
														{
															"key": "jobId",
															"value": "15"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "[107]SearchMessageSentViaRule",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "24ac8dfd-18cf-476f-8c08-1bd93aad7e83",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"to check notifications exist\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.notifications).to.exist;",
															"    var size1 = jsonData.notifications.length;",
															"  ",
															"    ",
															"    var array=JSON.parse(pm.environment.get(\"ruleLineItemId\"));",
															"    ",
															"     pm.expect((jsonData.notifications[0].ruleLineItemId)).to.eql(array);",
															"",
															"    pm.environment.set(\"TotalNudgesenttoentity\",size1);",
															"  ",
															"    console.log( \"[PRE-NAT]first nudge of entity is associated with  rulelineitemId : \"+pm.variables.get(\"ruleLineItemId\") );",
															"",
															"    ",
															"",
															"",
															"});",
															"pm.test(\"Nudge delivery Verification\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.notifications[0].messageContent).to.eql(\"\");",
															"    pm.expect(jsonData.notifications[0].mobileNumber).to.eql(\"\");",
															"    ",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{url}}/api/NotificationMessageProcessor/SearchMessageSentViaRule?entityId={{entityId}}&ruleId={{ruleId}}&ruleLineItemId={{ruleLineItemId}}",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"NotificationMessageProcessor",
														"SearchMessageSentViaRule"
													],
													"query": [
														{
															"key": "entityId",
															"value": "{{entityId}}"
														},
														{
															"key": "ruleId",
															"value": "{{ruleId}}"
														},
														{
															"key": "ruleLineItemId",
															"value": "{{ruleLineItemId}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "read notification msg template",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "5f00d9c5-a80b-4f94-9b62-c4c9847be638",
														"exec": [
															"pm.test(\"extract Template Content\", function () {\r",
															"\r",
															" var jsonData = pm.response.json();\r",
															" var size = jsonData.notificationMessageTemplates[0].notificationMessageTemplateLineItems.length;\r",
															"\r",
															" console.log(size);\r",
															"\r",
															" for (let i=0; i<size; i++)\r",
															"\r",
															" {\r",
															"\r",
															"    let X =JSON.parse(jsonData.notificationMessageTemplates[0].notificationMessageTemplateLineItems[i].languageTypeId);\r",
															"\r",
															"    let Y =jsonData.notificationMessageTemplates[0].notificationMessageTemplateLineItems[i].entitySegmentTypeId;\r",
															"\r",
															"    if( X==pm.environment.get(\"languageTypeId\") & Y==pm.environment.get(\"entitySegmentTypeId\"))\r",
															"\r",
															"    {\r",
															"\r",
															"         console.log(\"TemplateContent retrived for: \");\r",
															"\r",
															"         console.log(\"Segmet:\"       +Y);\r",
															"\r",
															"         console.log(\"lanaguage:\"    +X);\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"         pm.environment.set(\"TemplateContent\",jsonData.notificationMessageTemplates[0].notificationMessageTemplateLineItems[i].templateContent);\r",
															"        break;\r",
															"     }\r",
															"\r",
															"    else{\r",
															"        \r",
															"        pm.environment.set(\"TemplateContent\", \"Template Not Found!\");\r",
															"    }\r",
															"\r",
															" }\r",
															"});\r",
															"\r",
															" "
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{url}}/api/NotificationMessageTemplate/Search?templateName={{TemplateName}}",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"NotificationMessageTemplate",
														"Search"
													],
													"query": [
														{
															"key": "templateName",
															"value": "{{TemplateName}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "[126]notificationMessageProcessorHistory",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "24ac8dfd-18cf-476f-8c08-1bd93aad7e83",
														"exec": [
															"pm.test(\"status code 200\", function () {",
															"    pm.response.to.have.status(200);",
															"    ",
															"",
															"    ",
															"});",
															"",
															"pm.test(\"extract message\", function () {",
															"    ",
															"    console.log(\"Nudge Details:\");",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.notificationMessageProcessorHistoryRecords).to.exist;",
															"    var size = jsonData.notificationMessageProcessorHistoryRecords.length;",
															"    ",
															"    var count=0;",
															"     for ( var i=0;i<size;i++){",
															"   if((jsonData.notificationMessageProcessorHistoryRecords[i].mobileNumber)==(pm.environment.get(\"MobileNuber\"))){",
															"  ",
															"   count++;",
															"   ",
															"pm.environment.set(\"TotalNudgesenttoMobilenum\",count );",
															"   ",
															"pm.environment.set(\"messageContent\",jsonData.notificationMessageProcessorHistoryRecords[0].messageContent);",
															"",
															"pm.environment.set(\"NudgeReceivedVia_NotificationChannelType\",jsonData.notificationMessageProcessorHistoryRecords[i].notificationChannelTypeId);",
															"console.log(\"nudgeNudgeReceivedVia_NotificationChannelType :\" +pm.variables.get(\"NudgeReceivedVia_NotificationChannelType\"));",
															"",
															"}",
															"   ",
															"    }",
															"    console.log(\"Number of nudges sent to mobile num  : \"+pm.variables.get(\"TotalNudgesenttoMobilenum\"));",
															"",
															"});",
															"",
															"pm.test(\"extract bitly url\",function(){",
															"",
															"var string = pm.variables.get(\"messageContent\");",
															"var bitly = string.match(/\\bhttps?:\\/\\/\\S+/gi);",
															"pm.environment.set(\"bitly\",bitly);",
															"console.log(bitly);",
															" ",
															"",
															"});",
															"",
															"",
															"",
															"",
															"pm.test(\"Verify MessageConent with TemplateContent \", function () {",
															"    pm.expect(pm.environment.get(\"messageContent\")).to.include(\"(ENGLISH-FINANCIAL)\");",
															"    ",
															"    ",
															"",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{url}}/api/NotificationMessageProcessedHistory",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"NotificationMessageProcessedHistory"
													]
												}
											},
											"response": []
										},
										{
											"name": "[110]  1st change last nudge sent date",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "a66f8df1-605f-4640-aa35-cd0d72b96dff",
														"exec": [
															"var moment = require('moment');",
															"pm.environment.set(\"pickUpTime\", moment().subtract(2, 'days').format(\"YYYY-MM-DDThh:mm:ss.SSS\")) ;",
															"console.log(pm.variables.get(\"pickUpTime\"));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "23d9c19d-f037-4abd-9ce9-a7494827aacd",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Your test name\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.id).to.exist;",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"entityId\": {{entityId}},\r\n  \"ruleId\": {{ruleId}},\r\n  \"ruleLineItemId\": {{ruleLineItemId}},\r\n  \"createdDate\": \"{{pickUpTime}}\"\r\n}"
												},
												"url": {
													"raw": "{{url}}/api/Rule/UpdateEntityRuleMapping",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"Rule",
														"UpdateEntityRuleMapping"
													]
												}
											},
											"response": []
										},
										{
											"name": "[111]read Rule By Rule ID",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "b21dfda3-5d01-4762-bed6-681e39e637c4",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"pm.test(\"Your test name\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.rule.ruleLineItems[0].id).to.exist;",
															"    pm.environment.set(\"ruleLineItemId\",jsonData.rule.ruleLineItems[1].id);",
															"    ",
															"            pm.environment.set(\"TemplateName\",jsonData.rule.ruleLineItems[1].ruleLineItemResults[0].notificationMessageTemplateName);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{url}}/api/Rule?ruleId={{ruleId}}",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"Rule"
													],
													"query": [
														{
															"key": "ruleId",
															"value": "{{ruleId}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "[112]Trigger RuleExecuteEvent",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "24ac8dfd-18cf-476f-8c08-1bd93aad7e83",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"RuleExecution\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData).to.eql(true);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{url}}/api/RuleExecution?ruleId={{ruleId}}",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"RuleExecution"
													],
													"query": [
														{
															"key": "ruleId",
															"value": "{{ruleId}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "[113]TriggerExecuteNotificationMessage",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "24ac8dfd-18cf-476f-8c08-1bd93aad7e83",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"ExecuteNotificationMessage\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.isExecuted).to.eql(true);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{url}}/api/JobExecution?jobId=15",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"JobExecution"
													],
													"query": [
														{
															"key": "jobId",
															"value": "15"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "[107]SearchMessageSentViaRule",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "24ac8dfd-18cf-476f-8c08-1bd93aad7e83",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"to check notifications exist\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.notifications).to.exist;",
															"    var size1 = jsonData.notifications.length;",
															"  ",
															"    ",
															"    var array=JSON.parse(pm.environment.get(\"ruleLineItemId\"));",
															"    ",
															"     pm.expect((jsonData.notifications[0].ruleLineItemId)).to.eql(array);",
															"",
															"    pm.environment.set(\"TotalNudgesenttoentity\",size1);",
															"  ",
															"    console.log( \"[PRE-NAT]first nudge of entity is associated with  rulelineitemId : \"+pm.variables.get(\"ruleLineItemId\") );",
															"",
															"    ",
															"",
															"",
															"});",
															"pm.test(\"Nudge delivery Verification\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.notifications[0].messageContent).to.eql(\"\");",
															"    pm.expect(jsonData.notifications[0].mobileNumber).to.eql(\"\");",
															"    ",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{url}}/api/NotificationMessageProcessor/SearchMessageSentViaRule?entityId={{entityId}}&ruleId={{ruleId}}&ruleLineItemId={{ruleLineItemId}}",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"NotificationMessageProcessor",
														"SearchMessageSentViaRule"
													],
													"query": [
														{
															"key": "entityId",
															"value": "{{entityId}}"
														},
														{
															"key": "ruleId",
															"value": "{{ruleId}}"
														},
														{
															"key": "ruleLineItemId",
															"value": "{{ruleLineItemId}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "read notification msg template  Copy Copy",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "5f00d9c5-a80b-4f94-9b62-c4c9847be638",
														"exec": [
															"pm.test(\"extract Template Content\", function () {\r",
															"\r",
															" var jsonData = pm.response.json();\r",
															" var size = jsonData.notificationMessageTemplates[0].notificationMessageTemplateLineItems.length;\r",
															"\r",
															" console.log(size);\r",
															"\r",
															" for (let i=0; i<size; i++)\r",
															"\r",
															" {\r",
															"\r",
															"    let X =JSON.parse(jsonData.notificationMessageTemplates[0].notificationMessageTemplateLineItems[i].languageTypeId);\r",
															"\r",
															"    let Y =jsonData.notificationMessageTemplates[0].notificationMessageTemplateLineItems[i].entitySegmentTypeId;\r",
															"\r",
															"    if( X==pm.environment.get(\"languageTypeId\") & Y==pm.environment.get(\"entitySegmentTypeId\"))\r",
															"\r",
															"    {\r",
															"\r",
															"         console.log(\"TemplateContent retrived for: \");\r",
															"\r",
															"         console.log(\"Segmet:\"       +Y);\r",
															"\r",
															"         console.log(\"lanaguage:\"    +X);\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"         pm.environment.set(\"TemplateContent\",jsonData.notificationMessageTemplates[0].notificationMessageTemplateLineItems[i].templateContent);\r",
															"        break;\r",
															"     }\r",
															"\r",
															"    else{\r",
															"        \r",
															"        pm.environment.set(\"TemplateContent\", \"Template Not Found!\");\r",
															"    }\r",
															"\r",
															" }\r",
															"});\r",
															"\r",
															" "
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{url}}/api/NotificationMessageTemplate/Search?templateName={{TemplateName}}",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"NotificationMessageTemplate",
														"Search"
													],
													"query": [
														{
															"key": "templateName",
															"value": "{{TemplateName}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "[126]notificationMessageProcessorHistory",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "24ac8dfd-18cf-476f-8c08-1bd93aad7e83",
														"exec": [
															"pm.test(\"status code 200\", function () {",
															"    pm.response.to.have.status(200);",
															"    ",
															"",
															"    ",
															"});",
															"",
															"pm.test(\"extract message\", function () {",
															"    ",
															"    console.log(\"Nudge Details:\");",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.notificationMessageProcessorHistoryRecords).to.exist;",
															"    var size = jsonData.notificationMessageProcessorHistoryRecords.length;",
															"    ",
															"    var count=0;",
															"     for ( var i=0;i<size;i++){",
															"   if((jsonData.notificationMessageProcessorHistoryRecords[i].mobileNumber)==(pm.environment.get(\"MobileNuber\"))){",
															"  ",
															"   count++;",
															"   ",
															"pm.environment.set(\"TotalNudgesenttoMobilenum\",count );",
															"   ",
															"pm.environment.set(\"messageContent\",jsonData.notificationMessageProcessorHistoryRecords[0].messageContent);",
															"",
															"pm.environment.set(\"NudgeReceivedVia_NotificationChannelType\",jsonData.notificationMessageProcessorHistoryRecords[i].notificationChannelTypeId);",
															"console.log(\"nudgeNudgeReceivedVia_NotificationChannelType :\" +pm.variables.get(\"NudgeReceivedVia_NotificationChannelType\"));",
															"",
															"}",
															"   ",
															"    }",
															"    console.log(\"Number of nudges sent to mobile num  : \"+pm.variables.get(\"TotalNudgesenttoMobilenum\"));",
															"",
															"});",
															"",
															"pm.test(\"extract bitly url\",function(){",
															"",
															"var string = pm.variables.get(\"messageContent\");",
															"var bitly = string.match(/\\bhttps?:\\/\\/\\S+/gi);",
															"pm.environment.set(\"bitly\",bitly);",
															"console.log(bitly);",
															" ",
															"",
															"});",
															"",
															"",
															"",
															"",
															"pm.test(\"Verify MessageConent with TemplateContent \", function () {",
															"    pm.expect(pm.environment.get(\"messageContent\")).to.include(\"(ENGLISH-FINANCIAL)\");",
															"    ",
															"    ",
															"",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{url}}/api/NotificationMessageProcessedHistory",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"NotificationMessageProcessedHistory"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "ecabcb97-e1be-4b36-acb8-c5c7001e9fdd",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "a112bef0-a995-4d6e-9822-736feabfcfd0",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"_postman_isSubFolder": true
								},
								{
									"name": "HI-FINANCIAL",
									"item": [
										{
											"name": "[102]read Rule By Rule ID",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "b21dfda3-5d01-4762-bed6-681e39e637c4",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"pm.test(\"Your test name\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.rule.ruleLineItems[0].id).to.exist;",
															"    pm.environment.set(\"ruleLineItemId\",jsonData.rule.ruleLineItems[0].id);",
															"    var size = jsonData.rule.ruleLineItems.length;",
															"    pm.environment.set(\"totalrulelineitems\",size-1);",
															"    ",
															"     pm.environment.set(\"TemplateName\",jsonData.rule.ruleLineItems[0].ruleLineItemResults[0].notificationMessageTemplateName);",
															"    ",
															"",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "cf9d5033-3b79-4c99-8bb7-6e48a0eb40c7",
														"exec": [
															"console.log(\"STARTED: **************[Hi-FINANCIAL]********************************\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{url}}/api/Rule?ruleId={{ruleId}}",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"Rule"
													],
													"query": [
														{
															"key": "ruleId",
															"value": "{{ruleId}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "[103][HI-FINANCIAL]create entity*****************",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "b45ca225-09f2-4fd4-a05e-4c3d13a6dbf0",
														"exec": [
															"pm.test(\"Status code is 201\", function () {",
															"    pm.response.to.have.status(201);",
															"   ",
															"    let EntityJSON = pm.response.json();",
															"    pm.expect(EntityJSON.entityId).to.exist;",
															"    pm.expect(EntityJSON.isSaved).to.equal(true);",
															"     pm.environment.set(\"entityId\", EntityJSON.entityId);",
															"    console.log(EntityJSON);",
															"});",
															"",
															"",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "0e9b9ca9-9c49-46e8-ac8c-768fb21ce4b8",
														"exec": [
															"var milliseconds = new Date().getTime();",
															"var codeSeed = \"Auto-\";",
															"pm.environment.set(\"entityCode\", codeSeed.concat(milliseconds));",
															"",
															"",
															"var codeSeed = \"Auto2nd-\";",
															"pm.environment.set(\"secondaryEntityCode\", codeSeed.concat(milliseconds));",
															"",
															"var moment = require('moment');",
															"pm.environment.set(\"timestamp\", moment().format(\"YYYY-MM-DDThh:mm:ss.SSS\"))   ;",
															"console.log(pm.variables.get(\"timestamp\"));",
															"",
															"",
															"var moment = require('moment');",
															"pm.environment.set(\"pickUpTime\", moment().subtract(2, 'days').format(\"YYYY-MM-DDThh:mm:ss.SSS\")) ;",
															"console.log(pm.variables.get(\"pickUpTime\"));",
															"",
															"let ran =  _.random(1111111111, 9999999999);",
															"pm.environment.set(\"mobileNumberNAT\",ran);",
															"",
															"pm.environment.set(\"entitySegmentTypeId\", 5);",
															"pm.environment.set(\"languageTypeId\", 2);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"id\": 0,\r\n  \"entityCode\": \"{{entityCode}}\",\r\n  \"name\": \"PreNAT-{{name}}\",\r\n  \"mobileNumber\": {{mobileNumberNAT}},\r\n  \"entityCreationDate\": \"{{timestamp}}\",\r\n  \"entitySourceSystemId\": {{entitySourceSystemId}},\r\n  \"entityStateDate\": \"{{pickUpTime}}\",\r\n  \"entityStateType\": {{entityStateType}},\r\n  \"entitySubStateType\":{{entitySubStateType}},\r\n  \"entityStateValue\": \" {{entityStateValue}} \",\r\n  \"secondaryEntityCode\": \"{{secondaryEntityCode}}\",\r\n  \"secondaryName\": \"{{secondaryName}}\",\r\n  \"secondaryMobileNumber\": {{secondaryMobileNumber}},\r\n  \"customField1\":\"location-pune\",\r\n  \"customField2\":\"state-MH\",\r\n  \"customFieldUrl\":\"https://www.w3schools.com/xml/xpath_nodes.asp\",\r\n  \"entitySegmentTypeId\": {{entitySegmentTypeId}},\r\n  \"languageTypeId\": {{languageTypeId}}\r\n}\r\n"
												},
												"url": {
													"raw": "{{url}}/api/Entity",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"Entity"
													]
												}
											},
											"response": []
										},
										{
											"name": "[104]read entity by entityId",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "24ac8dfd-18cf-476f-8c08-1bd93aad7e83",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"pm.test(\"verify mobile number\", function () {",
															"    var jsonData = pm.response.json();",
															"    //  let X = JSON.parse(jsonData.mobileNumber);",
															"    ",
															"    // pm.expect(X).to.eql(pm.variables.get(\"mobileNumberNAT\"));",
															"    pm.environment.set(\"mobileNumber\",jsonData.mobileNumber);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{url}}/api/Entity?entityId={{entityId}}",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"Entity"
													],
													"query": [
														{
															"key": "entityId",
															"value": "{{entityId}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "[105]Trigger RuleExecuteEvent",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "24ac8dfd-18cf-476f-8c08-1bd93aad7e83",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"RuleExecution\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData).to.eql(true);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{url}}/api/RuleExecution?ruleId={{ruleId}}",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"RuleExecution"
													],
													"query": [
														{
															"key": "ruleId",
															"value": "{{ruleId}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "[106]TriggerExecuteNotificationMessage",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "24ac8dfd-18cf-476f-8c08-1bd93aad7e83",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Your test name\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.isExecuted).to.eql(true);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{url}}/api/JobExecution?jobId=15",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"JobExecution"
													],
													"query": [
														{
															"key": "jobId",
															"value": "15"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "[107]SearchMessageSentViaRule",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "24ac8dfd-18cf-476f-8c08-1bd93aad7e83",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"to check notifications exist\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.notifications).to.exist;",
															"    var size1 = jsonData.notifications.length;",
															"  ",
															"    ",
															"    var array=JSON.parse(pm.environment.get(\"ruleLineItemId\"));",
															"    ",
															"     pm.expect((jsonData.notifications[0].ruleLineItemId)).to.eql(array);",
															"",
															"    pm.environment.set(\"TotalNudgesenttoentity\",size1);",
															"  ",
															"    console.log( \"[PRE-NAT]first nudge of entity is associated with  rulelineitemId : \"+pm.variables.get(\"ruleLineItemId\") );",
															"",
															"    ",
															"",
															"",
															"});",
															"pm.test(\"Nudge delivery Verification\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.notifications[0].messageContent).to.eql(\"\");",
															"    pm.expect(jsonData.notifications[0].mobileNumber).to.eql(\"\");",
															"    ",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{url}}/api/NotificationMessageProcessor/SearchMessageSentViaRule?entityId={{entityId}}&ruleId={{ruleId}}&ruleLineItemId={{ruleLineItemId}}",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"NotificationMessageProcessor",
														"SearchMessageSentViaRule"
													],
													"query": [
														{
															"key": "entityId",
															"value": "{{entityId}}"
														},
														{
															"key": "ruleId",
															"value": "{{ruleId}}"
														},
														{
															"key": "ruleLineItemId",
															"value": "{{ruleLineItemId}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "read notification msg template  Copy",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "5f00d9c5-a80b-4f94-9b62-c4c9847be638",
														"exec": [
															"pm.test(\"extract Template Content\", function () {\r",
															"\r",
															" var jsonData = pm.response.json();\r",
															" var size = jsonData.notificationMessageTemplates[0].notificationMessageTemplateLineItems.length;\r",
															"\r",
															" console.log(size);\r",
															"\r",
															" for (let i=0; i<size; i++)\r",
															"\r",
															" {\r",
															"\r",
															"    let X =JSON.parse(jsonData.notificationMessageTemplates[0].notificationMessageTemplateLineItems[i].languageTypeId);\r",
															"\r",
															"    let Y =jsonData.notificationMessageTemplates[0].notificationMessageTemplateLineItems[i].entitySegmentTypeId;\r",
															"\r",
															"    if( X==pm.environment.get(\"languageTypeId\") & Y==pm.environment.get(\"entitySegmentTypeId\"))\r",
															"\r",
															"    {\r",
															"\r",
															"         console.log(\"TemplateContent retrived for: \");\r",
															"\r",
															"         console.log(\"Segmet:\"       +Y);\r",
															"\r",
															"         console.log(\"lanaguage:\"    +X);\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"         pm.environment.set(\"TemplateContent\",jsonData.notificationMessageTemplates[0].notificationMessageTemplateLineItems[i].templateContent);\r",
															"        break;\r",
															"     }\r",
															"\r",
															"    else{\r",
															"        \r",
															"        pm.environment.set(\"TemplateContent\", \"Template Not Found!\");\r",
															"    }\r",
															"\r",
															" }\r",
															"});\r",
															"\r",
															" "
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{url}}/api/NotificationMessageTemplate/Search?templateName={{TemplateName}}",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"NotificationMessageTemplate",
														"Search"
													],
													"query": [
														{
															"key": "templateName",
															"value": "{{TemplateName}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "[126]notificationMessageProcessorHistory Copy",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "24ac8dfd-18cf-476f-8c08-1bd93aad7e83",
														"exec": [
															"pm.test(\"status code 200\", function () {",
															"    pm.response.to.have.status(200);",
															"    ",
															"",
															"    ",
															"});",
															"",
															"pm.test(\"extract message\", function () {",
															"    ",
															"    console.log(\"Nudge Details:\");",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.notificationMessageProcessorHistoryRecords).to.exist;",
															"    var size = jsonData.notificationMessageProcessorHistoryRecords.length;",
															"    ",
															"    var count=0;",
															"     for ( var i=0;i<size;i++){",
															"   if((jsonData.notificationMessageProcessorHistoryRecords[i].mobileNumber)==(pm.environment.get(\"MobileNuber\"))){",
															"  ",
															"   count++;",
															"   ",
															"pm.environment.set(\"TotalNudgesenttoMobilenum\",count );",
															"   ",
															"pm.environment.set(\"messageContent\",jsonData.notificationMessageProcessorHistoryRecords[0].messageContent);",
															"",
															"pm.environment.set(\"NudgeReceivedVia_NotificationChannelType\",jsonData.notificationMessageProcessorHistoryRecords[i].notificationChannelTypeId);",
															"console.log(\"nudgeNudgeReceivedVia_NotificationChannelType :\" +pm.variables.get(\"NudgeReceivedVia_NotificationChannelType\"));",
															"",
															"}",
															"   ",
															"    }",
															"    console.log(\"Number of nudges sent to mobile num  : \"+pm.variables.get(\"TotalNudgesenttoMobilenum\"));",
															"",
															"});",
															"",
															"pm.test(\"extract bitly url\",function(){",
															"",
															"var string = pm.variables.get(\"messageContent\");",
															"var bitly = string.match(/\\bhttps?:\\/\\/\\S+/gi);",
															"pm.environment.set(\"bitly\",bitly);",
															"console.log(bitly);",
															" ",
															"",
															"});",
															"",
															"",
															"",
															"",
															"pm.test(\"Verify MessageConent with TemplateContent \", function () {",
															"    pm.expect(pm.environment.get(\"messageContent\")).to.include(\"(HINDI-FINANCIAL)\");",
															"    ",
															"    ",
															"",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{url}}/api/NotificationMessageProcessedHistory",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"NotificationMessageProcessedHistory"
													]
												}
											},
											"response": []
										},
										{
											"name": "[110]  1st change last nudge sent date",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "a66f8df1-605f-4640-aa35-cd0d72b96dff",
														"exec": [
															"var moment = require('moment');",
															"pm.environment.set(\"pickUpTime\", moment().subtract(2, 'days').format(\"YYYY-MM-DDThh:mm:ss.SSS\")) ;",
															"console.log(pm.variables.get(\"pickUpTime\"));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "23d9c19d-f037-4abd-9ce9-a7494827aacd",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Your test name\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.id).to.exist;",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"entityId\": {{entityId}},\r\n  \"ruleId\": {{ruleId}},\r\n  \"ruleLineItemId\": {{ruleLineItemId}},\r\n  \"createdDate\": \"{{pickUpTime}}\"\r\n}"
												},
												"url": {
													"raw": "{{url}}/api/Rule/UpdateEntityRuleMapping",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"Rule",
														"UpdateEntityRuleMapping"
													]
												}
											},
											"response": []
										},
										{
											"name": "[111]read Rule By Rule ID",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "b21dfda3-5d01-4762-bed6-681e39e637c4",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"pm.test(\"Your test name\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.rule.ruleLineItems[0].id).to.exist;",
															"    pm.environment.set(\"ruleLineItemId\",jsonData.rule.ruleLineItems[1].id);",
															"    ",
															"            pm.environment.set(\"TemplateName\",jsonData.rule.ruleLineItems[1].ruleLineItemResults[0].notificationMessageTemplateName);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{url}}/api/Rule?ruleId={{ruleId}}",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"Rule"
													],
													"query": [
														{
															"key": "ruleId",
															"value": "{{ruleId}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "[112]Trigger RuleExecuteEvent",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "24ac8dfd-18cf-476f-8c08-1bd93aad7e83",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"RuleExecution\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData).to.eql(true);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{url}}/api/RuleExecution?ruleId={{ruleId}}",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"RuleExecution"
													],
													"query": [
														{
															"key": "ruleId",
															"value": "{{ruleId}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "[113]TriggerExecuteNotificationMessage",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "24ac8dfd-18cf-476f-8c08-1bd93aad7e83",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"ExecuteNotificationMessage\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.isExecuted).to.eql(true);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{url}}/api/JobExecution?jobId=15",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"JobExecution"
													],
													"query": [
														{
															"key": "jobId",
															"value": "15"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "[107]SearchMessageSentViaRule Copy",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "24ac8dfd-18cf-476f-8c08-1bd93aad7e83",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"to check notifications exist\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.notifications).to.exist;",
															"    var size1 = jsonData.notifications.length;",
															"  ",
															"    ",
															"    var array=JSON.parse(pm.environment.get(\"ruleLineItemId\"));",
															"    ",
															"     pm.expect((jsonData.notifications[0].ruleLineItemId)).to.eql(array);",
															"",
															"    pm.environment.set(\"TotalNudgesenttoentity\",size1);",
															"  ",
															"    console.log( \"[PRE-NAT]first nudge of entity is associated with  rulelineitemId : \"+pm.variables.get(\"ruleLineItemId\") );",
															"",
															"    ",
															"",
															"",
															"});",
															"pm.test(\"Nudge delivery Verification\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.notifications[0].messageContent).to.eql(\"\");",
															"    pm.expect(jsonData.notifications[0].mobileNumber).to.eql(\"\");",
															"    ",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{url}}/api/NotificationMessageProcessor/SearchMessageSentViaRule?entityId={{entityId}}&ruleId={{ruleId}}&ruleLineItemId={{ruleLineItemId}}",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"NotificationMessageProcessor",
														"SearchMessageSentViaRule"
													],
													"query": [
														{
															"key": "entityId",
															"value": "{{entityId}}"
														},
														{
															"key": "ruleId",
															"value": "{{ruleId}}"
														},
														{
															"key": "ruleLineItemId",
															"value": "{{ruleLineItemId}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "read notification msg template",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "5f00d9c5-a80b-4f94-9b62-c4c9847be638",
														"exec": [
															"pm.test(\"extract Template Content\", function () {\r",
															"\r",
															" var jsonData = pm.response.json();\r",
															" var size = jsonData.notificationMessageTemplates[0].notificationMessageTemplateLineItems.length;\r",
															"\r",
															" console.log(size);\r",
															"\r",
															" for (let i=0; i<size; i++)\r",
															"\r",
															" {\r",
															"\r",
															"    let X =JSON.parse(jsonData.notificationMessageTemplates[0].notificationMessageTemplateLineItems[i].languageTypeId);\r",
															"\r",
															"    let Y =jsonData.notificationMessageTemplates[0].notificationMessageTemplateLineItems[i].entitySegmentTypeId;\r",
															"\r",
															"    if( X==pm.environment.get(\"languageTypeId\") & Y==pm.environment.get(\"entitySegmentTypeId\"))\r",
															"\r",
															"    {\r",
															"\r",
															"         console.log(\"TemplateContent retrived for: \");\r",
															"\r",
															"         console.log(\"Segmet:\"       +Y);\r",
															"\r",
															"         console.log(\"lanaguage:\"    +X);\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"         pm.environment.set(\"TemplateContent\",jsonData.notificationMessageTemplates[0].notificationMessageTemplateLineItems[i].templateContent);\r",
															"        break;\r",
															"     }\r",
															"\r",
															"    else{\r",
															"        \r",
															"        pm.environment.set(\"TemplateContent\", \"Template Not Found!\");\r",
															"    }\r",
															"\r",
															" }\r",
															"});\r",
															"\r",
															" "
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{url}}/api/NotificationMessageTemplate/Search?templateName={{TemplateName}}",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"NotificationMessageTemplate",
														"Search"
													],
													"query": [
														{
															"key": "templateName",
															"value": "{{TemplateName}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "[126]notificationMessageProcessorHistory",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "24ac8dfd-18cf-476f-8c08-1bd93aad7e83",
														"exec": [
															"pm.test(\"status code 200\", function () {",
															"    pm.response.to.have.status(200);",
															"    ",
															"",
															"    ",
															"});",
															"",
															"pm.test(\"extract message\", function () {",
															"    ",
															"    console.log(\"Nudge Details:\");",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.notificationMessageProcessorHistoryRecords).to.exist;",
															"    var size = jsonData.notificationMessageProcessorHistoryRecords.length;",
															"    ",
															"    var count=0;",
															"     for ( var i=0;i<size;i++){",
															"   if((jsonData.notificationMessageProcessorHistoryRecords[i].mobileNumber)==(pm.environment.get(\"MobileNuber\"))){",
															"  ",
															"   count++;",
															"   ",
															"pm.environment.set(\"TotalNudgesenttoMobilenum\",count );",
															"   ",
															"pm.environment.set(\"messageContent\",jsonData.notificationMessageProcessorHistoryRecords[0].messageContent);",
															"",
															"pm.environment.set(\"NudgeReceivedVia_NotificationChannelType\",jsonData.notificationMessageProcessorHistoryRecords[i].notificationChannelTypeId);",
															"console.log(\"nudgeNudgeReceivedVia_NotificationChannelType :\" +pm.variables.get(\"NudgeReceivedVia_NotificationChannelType\"));",
															"",
															"}",
															"   ",
															"    }",
															"    console.log(\"Number of nudges sent to mobile num  : \"+pm.variables.get(\"TotalNudgesenttoMobilenum\"));",
															"",
															"});",
															"",
															"pm.test(\"extract bitly url\",function(){",
															"",
															"var string = pm.variables.get(\"messageContent\");",
															"var bitly = string.match(/\\bhttps?:\\/\\/\\S+/gi);",
															"pm.environment.set(\"bitly\",bitly);",
															"console.log(bitly);",
															" ",
															"",
															"});",
															"",
															"",
															"",
															"",
															"pm.test(\"Verify MessageConent with TemplateContent \", function () {",
															"    pm.expect(pm.environment.get(\"messageContent\")).to.include(\"(HINDI-FINANCIAL)\");",
															"    ",
															"    ",
															"",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{url}}/api/NotificationMessageProcessedHistory",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"NotificationMessageProcessedHistory"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "ecabcb97-e1be-4b36-acb8-c5c7001e9fdd",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "a112bef0-a995-4d6e-9822-736feabfcfd0",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"_postman_isSubFolder": true
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "374074ab-3278-4fb3-920b-6d70730a2463",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "8276e431-869f-4067-97e6-c612edcd6881",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "[252]Delete Rule Copy",
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/api/Rule?ruleId={{ruleId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"Rule"
									],
									"query": [
										{
											"key": "ruleId",
											"value": "{{ruleId}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			],
			"description": "1)In This Collection different entity will be created on the basis of EntitySegment and LanguageType Id \n2) every entity will receive a differnt template(URL) based on their Zone(language) And Segment.\n\tonly one EntitySubstate will be used to test all the combinations of entitySegment and LanguageTypeId ",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "6e8ec1c6-7a6a-4a2a-8df9-7d0f329bd3e6",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "b16a0bb2-9d5e-44a6-9736-ada49d36f75e",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Entity",
			"item": [
				{
					"name": "[1][ENTITY] CreateEntity_Mandatory_entityStateDate###########",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "909b5f02-cfae-4f62-8d9d-f08cfab8dcbe",
								"exec": [
									"pm.test(\"entityStateDate is required\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "9fc91e1a-6f46-4b82-a41e-c706197fb2ef",
								"exec": [
									"console.log(\"STARED:*****************************ENTITY Module**********************\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "text/plain, application/json, text/json"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": 0,\r\n  \"entityCode\": \"test_code\",\r\n  \"name\": \"test_name\",\r\n  \"mobileNumber\": \"8888855555\",\r\n  \"entityCreationDate\": \"2018-12-25T09:01:38.455Z\",\r\n  \"entitySourceSystemId\": 1,\r\n  \"entityStateDate\": \"\",\r\n  \"entityStateType\": 1,\r\n  \"entitySubStateType\": 3,\r\n  \"entityStateValue\": \"test_value\",\r\n   \"entitySegmentTypeId\": {{entitySegmentTypeId}},\r\n  \"languageTypeId\": {{languageTypeId}}\r\n}\r\n"
						},
						"url": {
							"raw": "{{url}}/api/Entity",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"Entity"
							]
						}
					},
					"response": []
				},
				{
					"name": "[2]POST_CreateEntity_Mandatory_entitySubStateType",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "909b5f02-cfae-4f62-8d9d-f08cfab8dcbe",
								"exec": [
									"pm.test(\"entitySubStateType is required\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "text/plain, application/json, text/json"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \r\n  \"entityCode\": \"test_code\",\r\n  \"name\": \"test_name\",\r\n  \"mobileNumber\": \"8888855555\",\r\n  \"entityCreationDate\": \"2018-12-25T09:01:38.455Z\",\r\n  \"entitySourceSystemId\": 1,\r\n  \"entityStateDate\": \"2018-12-25T09:01:38.455Z\",\r\n  \"entityStateType\": 1,\r\n  \"entitySubStateType\": ,\r\n  \"entityStateValue\": \"test_value\",\r\n   \"entitySegmentTypeId\": {{entitySegmentTypeId}},\r\n  \"languageTypeId\": {{languageTypeId}}\r\n}\r\n"
						},
						"url": {
							"raw": "{{url}}/api/Entity",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"Entity"
							]
						}
					},
					"response": []
				},
				{
					"name": "[3]POST_CreateEntity_Mandatory_entityStateType",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "909b5f02-cfae-4f62-8d9d-f08cfab8dcbe",
								"exec": [
									"pm.test(\"entityStateType is required\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "text/plain, application/json, text/json"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": 0,\r\n  \"entityCode\": \"test_code\",\r\n  \"name\": \"test_name\",\r\n  \"mobileNumber\": \"8888855555\",\r\n  \"entityCreationDate\": \"2018-12-25T09:01:38.455Z\",\r\n  \"entitySourceSystemId\": 1,\r\n  \"entityStateDate\": \"2018-12-25T09:01:38.455Z\",\r\n  \"entityStateType\": ,\r\n  \"entitySubStateType\": 3,\r\n  \"entityStateValue\": \"test_value\"\r\n}\r\n"
						},
						"url": {
							"raw": "{{url}}/api/Entity",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"Entity"
							]
						}
					},
					"response": []
				},
				{
					"name": "[4]POST_CreateEntity_Mandatory_entitySourceSystemId",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "909b5f02-cfae-4f62-8d9d-f08cfab8dcbe",
								"exec": [
									"pm.test(\"entitySourceSystemId is required\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "text/plain, application/json, text/json"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": 0,\r\n  \"entityCode\": \"test_code\",\r\n  \"name\": \"test_name\",\r\n  \"mobileNumber\": \"8888855555\",\r\n  \"entityCreationDate\": \"2018-12-25T09:01:38.455Z\",\r\n  \"entitySourceSystemId\": ,\r\n  \"entityStateDate\": \"2018-12-25T09:01:38.455Z\",\r\n  \"entityStateType\": 1,\r\n  \"entitySubStateType\": 3,\r\n  \"entityStateValue\": \"test_value\",\r\n   \"entitySegmentTypeId\": {{entitySegmentTypeId}},\r\n  \"languageTypeId\": {{languageTypeId}}\r\n}\r\n"
						},
						"url": {
							"raw": "{{url}}/api/Entity",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"Entity"
							]
						}
					},
					"response": []
				},
				{
					"name": "[5]POST_CreateEntity_Mandatory_entityCreationDate",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "909b5f02-cfae-4f62-8d9d-f08cfab8dcbe",
								"exec": [
									"pm.test(\"entityCreationDate is required\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "text/plain, application/json, text/json"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": 0,\r\n  \"entityCode\": \"test_code\",\r\n  \"name\": \"test_name\",\r\n  \"mobileNumber\": \"8888855555\",\r\n  \"entityCreationDate\": \"\",\r\n  \"entitySourceSystemId\": 1,\r\n  \"entityStateDate\": \"2018-12-25T09:01:38.455Z\",\r\n  \"entityStateType\": 1,\r\n  \"entitySubStateType\": 3,\r\n  \"entityStateValue\": \"test_value\",\r\n   \"entitySegmentTypeId\": {{entitySegmentTypeId}},\r\n  \"languageTypeId\": {{languageTypeId}}\r\n}\r\n"
						},
						"url": {
							"raw": "{{url}}/api/Entity",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"Entity"
							]
						}
					},
					"response": []
				},
				{
					"name": "[6]POST_CreateEntity_Mandatory_entityCode",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a0e1286c-12c3-4563-b7d0-28a59bcdcdcf",
								"exec": [
									"pm.test(\"entityCode is required\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"pm.test(\"Your test name\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.error).to.eql(\"EntityCode is required\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "text/plain, application/json, text/json"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": 0,\r\n  \"entityCode\": \"\",\r\n  \"name\": \"test_name\",\r\n  \"mobileNumber\": \"8888855555\",\r\n  \"entityCreationDate\": \"2018-12-25T09:01:38.455Z\",\r\n  \"entitySourceSystemId\": 1,\r\n  \"entityStateDate\": \"2018-12-25T09:01:38.455Z\",\r\n  \"entityStateType\": 1,\r\n  \"entitySubStateType\": 3,\r\n  \"entityStateValue\": \"test_value\",\r\n   \"entitySegmentTypeId\": {{entitySegmentTypeId}},\r\n  \"languageTypeId\": {{languageTypeId}}\r\n}\r\n"
						},
						"url": {
							"raw": "{{url}}/api/Entity",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"Entity"
							]
						}
					},
					"response": []
				},
				{
					"name": "[7]POST_CreateEntity_Mandatory_mobileNumber",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "909b5f02-cfae-4f62-8d9d-f08cfab8dcbe",
								"exec": [
									"pm.test(\"mobileNumber is required\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"pm.test(\"Your test name\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.error).to.eql(\"Mobile number is required,Length of mobile number cannot be less than 10,Mobile Number is invalid\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "text/plain, application/json, text/json"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": 0,\r\n  \"entityCode\": \"test_code\",\r\n  \"name\": \"test_name\",\r\n  \"mobileNumber\": \"\",\r\n  \"entityCreationDate\": \"2018-12-25T09:01:38.455Z\",\r\n  \"entitySourceSystemId\": 1,\r\n  \"entityStateDate\": \"2018-12-25T09:01:38.455Z\",\r\n  \"entityStateType\": 1,\r\n  \"entitySubStateType\": 3,\r\n  \"entityStateValue\": \"test_value\",\r\n   \"entitySegmentTypeId\": {{entitySegmentTypeId}},\r\n  \"languageTypeId\": {{languageTypeId}}\r\n}\r\n"
						},
						"url": {
							"raw": "{{url}}/api/Entity",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"Entity"
							]
						}
					},
					"response": []
				},
				{
					"name": "[8]POST_CreateEntity_Mandatory_name",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "909b5f02-cfae-4f62-8d9d-f08cfab8dcbe",
								"exec": [
									"pm.test(\"name is required\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Your test name\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.error).to.eql(\"Name is required\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "text/plain, application/json, text/json"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": 0,\r\n  \"entityCode\": \"test_code\",\r\n  \"name\": \"\",\r\n  \"mobileNumber\": \"8888855555\",\r\n  \"entityCreationDate\": \"2018-12-25T09:01:38.455Z\",\r\n  \"entitySourceSystemId\": 1,\r\n  \"entityStateDate\": \"2018-12-25T09:01:38.455Z\",\r\n  \"entityStateType\": 1,\r\n  \"entitySubStateType\": 3,\r\n  \"entityStateValue\": \"test_value\",\r\n   \"entitySegmentTypeId\": {{entitySegmentTypeId}},\r\n  \"languageTypeId\": {{languageTypeId}}\r\n}\r\n"
						},
						"url": {
							"raw": "{{url}}/api/Entity",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"Entity"
							]
						}
					},
					"response": []
				},
				{
					"name": "[9]create entity (customFields)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b45ca225-09f2-4fd4-a05e-4c3d13a6dbf0",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"   ",
									"    let EntityJSON = pm.response.json();",
									"    pm.expect(EntityJSON.entityId).to.exist;",
									"    pm.expect(EntityJSON.isSaved).to.equal(true);",
									"     pm.environment.set(\"entityId\", EntityJSON.entityId);",
									"    console.log(EntityJSON);",
									"});",
									"",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "0e9b9ca9-9c49-46e8-ac8c-768fb21ce4b8",
								"exec": [
									"var milliseconds = new Date().getTime();",
									"var codeSeed = \"Auto-\";",
									"pm.environment.set(\"entityCode\", codeSeed.concat(milliseconds));",
									"",
									"",
									"var codeSeed = \"Auto2nd-\";",
									"pm.environment.set(\"secondaryEntityCode\", codeSeed.concat(milliseconds));",
									"",
									"var moment = require('moment');",
									"pm.environment.set(\"timestamp\", moment().format(\"YYYY-MM-DDThh:mm:ss.SSS\"))   ;",
									"",
									"pm.environment.set(\"entityStateType\", 1);",
									"pm.environment.set(\"entitySubStateType\",1);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": 0,\r\n  \"entityCode\": \"{{entityCode}}\",\r\n  \"name\": \"{{name}}\",\r\n  \"mobileNumber\": {{mobileNumber}},\r\n  \"entityCreationDate\": \"{{timestamp}}\",\r\n  \"entitySourceSystemId\": {{entitySourceSystemId}},\r\n  \"entityStateDate\": \"{{timestamp}}\",\r\n  \"entityStateType\": {{entityStateType}},\r\n  \"entitySubStateType\":{{entitySubStateType}},\r\n  \"entityStateValue\": \" {{timestamp}} \",\r\n  \"secondaryEntityCode\": \"{{secondaryEntityCode}}\",\r\n  \"secondaryName\": \"{{secondaryName}}\",\r\n  \"secondaryMobileNumber\": {{secondaryMobileNumber}},\r\n  \"customField1\": \"string\",\r\n  \"customField2\": \"string\",\r\n  \"customFieldUrl\": \"https://www.w3schools.com/xml/xpath_nodes.asp\",\r\n  \"entitySegmentTypeId\": {{entitySegmentTypeId}},\r\n  \"languageTypeId\": {{languageTypeId}}\r\n}\r\n"
						},
						"url": {
							"raw": "{{url}}/api/Entity",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"Entity"
							]
						}
					},
					"response": []
				},
				{
					"name": "[10]read entity by entityId",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "24ac8dfd-18cf-476f-8c08-1bd93aad7e83",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"verify values \", function () {",
									"    var jsonData = pm.response.json();",
									"//let Z = JSON.parse(jsonData.mobileNumber);",
									" pm.expect(jsonData.entityStates[0].entityStateExtension[0].secondaryMobileNumber).to.eql(pm.variables.get(\"secondaryMobileNumber\"));",
									" pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\"));",
									"    pm.expect(jsonData.mobileNumber).to.eql(pm.variables.get(\"mobileNumber\"));",
									"  ",
									"    pm.expect(jsonData.entityCode).to.eql(pm.variables.get(\"entityCode\"));",
									"    pm.expect(jsonData.id).to.eql(pm.variables.get(\"entityId\"));",
									"   ",
									"",
									"  pm.expect(jsonData.entityStates[0].entityStateExtension[0].secondaryEntityCode).to.eql(pm.variables.get(\"secondaryEntityCode\"));",
									"  pm.expect(jsonData.entityStates[0].entityStateExtension[0].secondaryName).to.eql(pm.variables.get(\"secondaryName\"));",
									"  ",
									"  pm.expect(jsonData.entityStates[0].entitySubStateType).to.eql(pm.variables.get(\"entitySubStateType\"));",
									"   let X= JSON.parse(pm.variables.get(\"entitySegmentTypeId\"));",
									"   let Y= JSON.parse(pm.variables.get(\"languageTypeId\"));",
									"   ",
									"   ",
									"  pm.expect(jsonData.entitySegmentTypeId).to.eql(pm.variables.get(\"entitySegmentTypeId\"));",
									"  pm.expect(jsonData.languageTypeId).to.eql(pm.variables.get(\"languageTypeId\"));",
									"",
									"",
									"",
									"pm.environment.set(\"entityStateId\",jsonData.entityStates[0].id);",
									"   ",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "613a23ae-6f2e-4051-ac19-49d8ae54b523",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/Entity?entityId={{entityId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"Entity"
							],
							"query": [
								{
									"key": "entityId",
									"value": "{{entityId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[11]delete entity by entityId",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1b6f475f-1ee4-40c2-9c41-a27f713d0254",
								"exec": [
									"  pm.test(\"Status code is 200 ok deleted\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Your test name\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.isEntityDeleted).to.eql(true);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/api/Entity?entityId= {{entityId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"Entity"
							],
							"query": [
								{
									"key": "entityId",
									"value": " {{entityId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[12]create entity(Without CustomFields)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b45ca225-09f2-4fd4-a05e-4c3d13a6dbf0",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"   ",
									"    let EntityJSON = pm.response.json();",
									"    pm.expect(EntityJSON.entityId).to.exist;",
									"    pm.expect(EntityJSON.isSaved).to.equal(true);",
									"     pm.environment.set(\"entityId\", EntityJSON.entityId);",
									"    console.log(EntityJSON);",
									"});",
									"",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "0e9b9ca9-9c49-46e8-ac8c-768fb21ce4b8",
								"exec": [
									"var milliseconds = new Date().getTime();",
									"var codeSeed = \"Auto-\";",
									"pm.environment.set(\"entityCode\", codeSeed.concat(milliseconds));",
									"",
									"",
									"var codeSeed = \"Auto2nd-\";",
									"pm.environment.set(\"secondaryEntityCode\", codeSeed.concat(milliseconds));",
									"",
									"var moment = require('moment');",
									"pm.environment.set(\"timestamp\", moment().format(\"YYYY-MM-DDThh:mm:ss.SSS\"))  ;",
									"",
									"pm.environment.set(\"entityStateType\", 1);",
									"pm.environment.set(\"entitySubStateType\",1);",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": 0,\r\n  \"entityCode\": \"{{entityCode}}\",\r\n  \"name\": \"{{name}}\",\r\n  \"mobileNumber\": {{mobileNumber}},\r\n  \"entityCreationDate\": \"{{timestamp}}\",\r\n  \"entitySourceSystemId\": {{entitySourceSystemId}},\r\n  \"entityStateDate\": \"{{timestamp}}\",\r\n  \"entityStateType\": {{entityStateType}},\r\n  \"entitySubStateType\":{{entitySubStateType}},\r\n  \"entityStateValue\": \" staevalue123 \",\r\n  \"secondaryEntityCode\": \"{{secondaryEntityCode}}\",\r\n  \"secondaryName\": \"{{secondaryName}}\",\r\n  \"secondaryMobileNumber\": {{secondaryMobileNumber}},\r\n  \"entitySegmentTypeId\": {{entitySegmentTypeId}},\r\n  \"languageTypeId\": {{languageTypeId}}\r\n}\r\n"
						},
						"url": {
							"raw": "{{url}}/api/Entity",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"Entity"
							]
						}
					},
					"response": []
				},
				{
					"name": "[13]read entity by entityId",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "24ac8dfd-18cf-476f-8c08-1bd93aad7e83",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"verify values \", function () {",
									"    var jsonData = pm.response.json();",
									"//let Z = JSON.parse(jsonData.mobileNumber);",
									" pm.expect(jsonData.entityStates[0].entityStateExtension[0].secondaryMobileNumber).to.eql(pm.variables.get(\"secondaryMobileNumber\"));",
									" pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\"));",
									"    pm.expect(jsonData.mobileNumber).to.eql(pm.variables.get(\"mobileNumber\"));",
									"  ",
									"    pm.expect(jsonData.entityCode).to.eql(pm.variables.get(\"entityCode\"));",
									"    pm.expect(jsonData.id).to.eql(pm.variables.get(\"entityId\"));",
									"   ",
									"",
									"  pm.expect(jsonData.entityStates[0].entityStateExtension[0].secondaryEntityCode).to.eql(pm.variables.get(\"secondaryEntityCode\"));",
									"  pm.expect(jsonData.entityStates[0].entityStateExtension[0].secondaryName).to.eql(pm.variables.get(\"secondaryName\"));",
									"  ",
									"  pm.expect(jsonData.entityStates[0].entitySubStateType).to.eql(pm.variables.get(\"entitySubStateType\"));",
									"   let X= JSON.parse(pm.variables.get(\"entitySegmentTypeId\"));",
									"   let Y= JSON.parse(pm.variables.get(\"languageTypeId\"));",
									"   ",
									"   ",
									"  pm.expect(jsonData.entitySegmentTypeId).to.eql(pm.variables.get(\"entitySegmentTypeId\"));",
									"  pm.expect(jsonData.languageTypeId).to.eql(pm.variables.get(\"languageTypeId\"));",
									"",
									"",
									"",
									"pm.environment.set(\"entityStateId\",jsonData.entityStates[0].id);",
									"   ",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/Entity?entityId={{entityId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"Entity"
							],
							"query": [
								{
									"key": "entityId",
									"value": "{{entityId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[14]read entity by entityCode",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "caaec45d-1d60-456a-b6c6-e584fb23fa80",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"verify values \", function () {",
									"    var jsonData = pm.response.json();",
									"//let Z = JSON.parse(jsonData.mobileNumber);",
									" pm.expect(jsonData.entityStates[0].entityStateExtension[0].secondaryMobileNumber).to.eql(pm.variables.get(\"secondaryMobileNumber\"));",
									" pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\"));",
									"    pm.expect(jsonData.mobileNumber).to.eql(pm.variables.get(\"mobileNumber\"));",
									"  ",
									"    pm.expect(jsonData.entityCode).to.eql(pm.variables.get(\"entityCode\"));",
									"    pm.expect(jsonData.id).to.eql(pm.variables.get(\"entityId\"));",
									"   ",
									"",
									"  pm.expect(jsonData.entityStates[0].entityStateExtension[0].secondaryEntityCode).to.eql(pm.variables.get(\"secondaryEntityCode\"));",
									"  pm.expect(jsonData.entityStates[0].entityStateExtension[0].secondaryName).to.eql(pm.variables.get(\"secondaryName\"));",
									"  ",
									"  pm.expect(jsonData.entityStates[0].entitySubStateType).to.eql(pm.variables.get(\"entitySubStateType\"));",
									"   let X= JSON.parse(pm.variables.get(\"entitySegmentTypeId\"));",
									"   let Y= JSON.parse(pm.variables.get(\"languageTypeId\"));",
									"   ",
									"   ",
									"  pm.expect(jsonData.entitySegmentTypeId).to.eql(pm.variables.get(\"entitySegmentTypeId\"));",
									"  pm.expect(jsonData.languageTypeId).to.eql(pm.variables.get(\"languageTypeId\"));",
									"",
									"",
									"   ",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/Entity/EntityCode?entityCode={{entityCode}}&entitySourceSystemId={{entitySourceSystemId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"Entity",
								"EntityCode"
							],
							"query": [
								{
									"key": "entityCode",
									"value": "{{entityCode}}"
								},
								{
									"key": "entitySourceSystemId",
									"value": "{{entitySourceSystemId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[15]search entity based on filter params",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "debd64d7-f435-400a-ae75-5824de7f75e9",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"verify values \", function () {",
									"    var jsonData = pm.response.json();",
									"//let Z = JSON.parse(jsonData.mobileNumber);",
									" pm.expect(jsonData.entities[0].entityStates[0].entityStateExtension[0].secondaryMobileNumber).to.eql(pm.variables.get(\"secondaryMobileNumber\"));",
									" pm.expect(jsonData.entities[0].name).to.eql(pm.variables.get(\"name\"));",
									"    pm.expect(jsonData.entities[0].mobileNumber).to.eql(pm.variables.get(\"mobileNumber\"));",
									"  ",
									"    pm.expect(jsonData.entities[0].entityCode).to.eql(pm.variables.get(\"entityCode\"));",
									"    pm.expect(jsonData.entities[0].id).to.eql(pm.variables.get(\"entityId\"));",
									"   ",
									"",
									"  pm.expect(jsonData.entities[0].entityStates[0].entityStateExtension[0].secondaryEntityCode).to.eql(pm.variables.get(\"secondaryEntityCode\"));",
									"  pm.expect(jsonData.entities[0].entityStates[0].entityStateExtension[0].secondaryName).to.eql(pm.variables.get(\"secondaryName\"));",
									"  ",
									"  pm.expect(jsonData.entities[0].entityStates[0].entitySubStateType).to.eql(pm.variables.get(\"entitySubStateType\"));",
									"   let X= JSON.parse(pm.variables.get(\"entitySegmentTypeId\"));",
									"   let Y= JSON.parse(pm.variables.get(\"languageTypeId\"));",
									"   ",
									"   ",
									"  pm.expect(jsonData.entities[0].entitySegmentTypeId).to.eql(pm.variables.get(\"entitySegmentTypeId\"));",
									"  pm.expect(jsonData.entities[0].languageTypeId).to.eql(pm.variables.get(\"languageTypeId\"));",
									"",
									"",
									"   ",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/api/Entity/Search?entityCode={{entityCode}}&entitySourcesystenId={{entitySourceSystemId}}&entityMobileNo={{mobileNumber}}&pageIndex=1&pageSize=20",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"Entity",
								"Search"
							],
							"query": [
								{
									"key": "entityCode",
									"value": "{{entityCode}}"
								},
								{
									"key": "entitySourcesystenId",
									"value": "{{entitySourceSystemId}}"
								},
								{
									"key": "entityMobileNo",
									"value": "{{mobileNumber}}"
								},
								{
									"key": "pageIndex",
									"value": "1"
								},
								{
									"key": "pageSize",
									"value": "20"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[16]update entity",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1dec29e2-570a-4025-8c51-019e5c642140",
								"exec": [
									"pm.test(\"Status code is 201 \", function () {",
									"    pm.response.to.have.status(201);",
									"    ",
									"    let EntityJSON = pm.response.json();",
									"    pm.expect(EntityJSON.entityId).to.exist;",
									"    pm.expect(EntityJSON.isSaved).to.equal(true);",
									"     ",
									"    console.log(EntityJSON);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"entityCode\": \"{{entityCode}}\",\r\n  \"entitySourceSystemId\": {{entitySourceSystemId}},\r\n  \"name\": \"UpdatedName-{{name}}\",\r\n  \"mobileNumber\": \"{{mobileNumberNAT}}\",\r\n  \"entityCreationDate\": \"2019-01-14T06:15:21.471Z\",\r\n  \"secondaryEntityCode\": \"{{secondaryEntityCode}}\",\r\n  \"secondaryName\": \"{{secondaryName}}\",\r\n  \"secondaryMobileNumber\": \"{{secondaryMobileNumber}}\",\r\n   \"entitySegmentTypeId\": {{entitySegmentTypeId}},\r\n  \"languageTypeId\": {{languageTypeId}}\r\n}"
						},
						"url": {
							"raw": "{{url}}/api/Entity",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"Entity"
							]
						}
					},
					"response": []
				},
				{
					"name": "[16_1]update entity (invalid entitySegmentTypeId)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1dec29e2-570a-4025-8c51-019e5c642140",
								"exec": [
									"pm.test(\"Status code is 201 \", function () {",
									"    pm.response.to.have.status(400);",
									"    ",
									"   ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"entityCode\": \"{{entityCode}}\",\r\n  \"entitySourceSystemId\": {{entitySourceSystemId}},\r\n  \"name\": \"UpdatedName-{{name}}\",\r\n  \"mobileNumber\": \"{{mobileNumberNAT}}\",\r\n  \"entityCreationDate\": \"2019-01-14T06:15:21.471Z\",\r\n  \"secondaryEntityCode\": \"{{secondaryEntityCode}}\",\r\n  \"secondaryName\": \"{{secondaryName}}\",\r\n  \"secondaryMobileNumber\": \"{{secondaryMobileNumber}}\",\r\n   \"entitySegmentTypeId\": 6,\r\n  \"languageTypeId\": 1\r\n}"
						},
						"url": {
							"raw": "{{url}}/api/Entity",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"Entity"
							]
						}
					},
					"response": []
				},
				{
					"name": "[16_2]update entity (invalid langauge TypeId)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1dec29e2-570a-4025-8c51-019e5c642140",
								"exec": [
									"pm.test(\"Status code is 201 \", function () {",
									"    pm.response.to.have.status(400);",
									"    ",
									"   ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"entityCode\": \"{{entityCode}}\",\r\n  \"entitySourceSystemId\": {{entitySourceSystemId}},\r\n  \"name\": \"UpdatedName-{{name}}\",\r\n  \"mobileNumber\": \"{{mobileNumberNAT}}\",\r\n  \"entityCreationDate\": \"2019-01-14T06:15:21.471Z\",\r\n  \"secondaryEntityCode\": \"{{secondaryEntityCode}}\",\r\n  \"secondaryName\": \"{{secondaryName}}\",\r\n  \"secondaryMobileNumber\": \"{{secondaryMobileNumber}}\",\r\n   \"entitySegmentTypeId\": 1,\r\n  \"languageTypeId\": 10\r\n}"
						},
						"url": {
							"raw": "{{url}}/api/Entity",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"Entity"
							]
						}
					},
					"response": []
				},
				{
					"name": "[17]read updated entity by entityId",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "24ac8dfd-18cf-476f-8c08-1bd93aad7e83",
								"exec": [
									"",
									"  ",
									"  ",
									"  pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"verify values \", function () {",
									"    var jsonData = pm.response.json();",
									"//let Z = JSON.parse(jsonData.mobileNumber);",
									" pm.expect(jsonData.entityStates[0].entityStateExtension[0].secondaryMobileNumber).to.eql(pm.variables.get(\"secondaryMobileNumber\"));",
									"",
									"",
									" var P= \"UpdatedName-\";",
									"   var Q= P.concat(pm.variables.get(\"name\"));",
									"   ",
									"    pm.expect(jsonData.name).to.eql(Q);",
									"    pm.expect(jsonData.mobileNumber).to.eql(pm.variables.get(\"mobileNumber\"));",
									"  ",
									"    pm.expect(jsonData.entityCode).to.eql(pm.variables.get(\"entityCode\"));",
									"    pm.expect(jsonData.id).to.eql(pm.variables.get(\"entityId\"));",
									"   ",
									"",
									"  pm.expect(jsonData.entityStates[0].entityStateExtension[0].secondaryEntityCode).to.eql(pm.variables.get(\"secondaryEntityCode\"));",
									"  pm.expect(jsonData.entityStates[0].entityStateExtension[0].secondaryName).to.eql(pm.variables.get(\"secondaryName\"));",
									"  ",
									"  pm.expect(jsonData.entityStates[0].entitySubStateType).to.eql(pm.variables.get(\"entitySubStateType\"));",
									"   let X= JSON.parse(pm.variables.get(\"entitySegmentTypeId\"));",
									"   let Y= JSON.parse(pm.variables.get(\"languageTypeId\"));",
									"   ",
									"   ",
									"  pm.expect(jsonData.entitySegmentTypeId).to.eql(pm.variables.get(\"entitySegmentTypeId\"));",
									"  pm.expect(jsonData.languageTypeId).to.eql(pm.variables.get(\"languageTypeId\"));",
									"",
									"",
									"   ",
									"});",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/Entity?entityId={{entityId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"Entity"
							],
							"query": [
								{
									"key": "entityId",
									"value": "{{entityId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[18]Undo_Update entity",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1dec29e2-570a-4025-8c51-019e5c642140",
								"exec": [
									"pm.test(\"Status code is 201 \", function () {",
									"    pm.response.to.have.status(201);",
									"    ",
									"    let EntityJSON = pm.response.json();",
									"    pm.expect(EntityJSON.entityId).to.exist;",
									"    pm.expect(EntityJSON.isSaved).to.equal(true);",
									"     ",
									"    console.log(EntityJSON);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"entityCode\": \"{{entityCode}}\",\r\n  \"entitySourceSystemId\": {{entitySourceSystemId}},\r\n  \"name\": \"{{name}}\",\r\n  \"mobileNumber\": \"{{mobileNumberNAT}}\",\r\n  \"entityCreationDate\": \"2019-01-14T06:15:21.471Z\",\r\n  \"secondaryEntityCode\": \"{{secondaryEntityCode}}\",\r\n  \"secondaryName\": \"{{secondaryName}}\",\r\n  \"secondaryMobileNumber\": \"{{secondaryMobileNumber}}\",\r\n   \"entitySegmentTypeId\": {{entitySegmentTypeId}},\r\n  \"languageTypeId\": {{languageTypeId}}\r\n}"
						},
						"url": {
							"raw": "{{url}}/api/Entity",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"Entity"
							]
						}
					},
					"response": []
				},
				{
					"name": "[19]read updated entity by entityId",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "24ac8dfd-18cf-476f-8c08-1bd93aad7e83",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"verify values \", function () {",
									"    var jsonData = pm.response.json();",
									"//let Z = JSON.parse(jsonData.mobileNumber);",
									" pm.expect(jsonData.entityStates[0].entityStateExtension[0].secondaryMobileNumber).to.eql(pm.variables.get(\"secondaryMobileNumber\"));",
									" pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\"));",
									"    pm.expect(jsonData.mobileNumber).to.eql(pm.variables.get(\"mobileNumber\"));",
									"  ",
									"    pm.expect(jsonData.entityCode).to.eql(pm.variables.get(\"entityCode\"));",
									"    pm.expect(jsonData.id).to.eql(pm.variables.get(\"entityId\"));",
									"   ",
									"",
									"  pm.expect(jsonData.entityStates[0].entityStateExtension[0].secondaryEntityCode).to.eql(pm.variables.get(\"secondaryEntityCode\"));",
									"  pm.expect(jsonData.entityStates[0].entityStateExtension[0].secondaryName).to.eql(pm.variables.get(\"secondaryName\"));",
									"  ",
									"  pm.expect(jsonData.entityStates[0].entitySubStateType).to.eql(pm.variables.get(\"entitySubStateType\"));",
									"   let X= JSON.parse(pm.variables.get(\"entitySegmentTypeId\"));",
									"   let Y= JSON.parse(pm.variables.get(\"languageTypeId\"));",
									"   ",
									"   ",
									"  pm.expect(jsonData.entitySegmentTypeId).to.eql(pm.variables.get(\"entitySegmentTypeId\"));",
									"  pm.expect(jsonData.languageTypeId).to.eql(pm.variables.get(\"languageTypeId\"));",
									"",
									"",
									"",
									"pm.environment.set(\"entityStateId\",jsonData.entityStates[0].id);",
									"   ",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/Entity?entityId={{entityId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"Entity"
							],
							"query": [
								{
									"key": "entityId",
									"value": "{{entityId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[20]update entity state",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "829157f3-a89c-4dd4-b543-25b6a835eedd",
								"exec": [
									"\r",
									"var moment = require('moment')\r",
									"pm.environment.set(\"timestamp\", moment().format(\"YYYY-MM-DDThh:mm:ss.SSS\"))   \r",
									"pm.environment.set(\"updateEntitySubStateType\",2);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "2be091e9-01b1-4bb3-a554-35d4f487f4fe",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Your test name\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.isEntityStateUpdated).to.eql(true);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"entityStateId\": {{entityStateId}},\r\n  \"entityStateDate\": \"{{timestamp}}\",\r\n  \"entitySubStateTypeId\": {{updateEntitySubStateType}},\r\n  \"entityStateValue\": \"statvalue123\"\r\n}"
						},
						"url": {
							"raw": "{{url}}/api/EntityState",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"EntityState"
							]
						}
					},
					"response": []
				},
				{
					"name": "[21]read updated entity by entityId",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "24ac8dfd-18cf-476f-8c08-1bd93aad7e83",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"verify values \", function () {",
									"    var jsonData = pm.response.json();",
									"//let Z = JSON.parse(jsonData.mobileNumber);",
									" pm.expect(jsonData.entityStates[0].entitySubStateType).to.eql(pm.variables.get(\"updateEntitySubStateType\"));",
									" pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\"));",
									"    pm.expect(jsonData.mobileNumber).to.eql(pm.variables.get(\"mobileNumber\"));",
									"  ",
									"    pm.expect(jsonData.entityCode).to.eql(pm.variables.get(\"entityCode\"));",
									"    pm.expect(jsonData.id).to.eql(pm.variables.get(\"entityId\"));",
									"   ",
									"",
									"  ",
									"   let X= JSON.parse(pm.variables.get(\"entitySegmentTypeId\"));",
									"   let Y= JSON.parse(pm.variables.get(\"languageTypeId\"));",
									"   ",
									"   ",
									"  pm.expect(jsonData.entitySegmentTypeId).to.eql(pm.variables.get(\"entitySegmentTypeId\"));",
									"  pm.expect(jsonData.languageTypeId).to.eql(pm.variables.get(\"languageTypeId\"));",
									"",
									"",
									"",
									"pm.environment.set(\"entityStateId\",jsonData.entityStates[0].id);",
									"   ",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/Entity?entityId={{entityId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"Entity"
							],
							"query": [
								{
									"key": "entityId",
									"value": "{{entityId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[21_0] add Entity State",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "24ac8dfd-18cf-476f-8c08-1bd93aad7e83",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Your test name\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.isEntityStateCreated).to.eql(true);",
									"    ",
									"pm.environment.set(\"entityStateId\",jsonData.entityStateId);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "eaa17d71-73e3-4fa1-b2cd-818a27832e05",
								"exec": [
									"pm.environment.set(\"entityStateType\", 2);",
									"pm.environment.set(\"entitySubStateType\",1);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"entityId\": {{entityId}},\r\n  \"entityStateDate\": \"{{timestamp}}\",\r\n  \"entityStateTypeId\": {{entityStateType}},\r\n  \"entitySubStateTypeId\":{{entitySubStateType}} ,\r\n  \"entityStateValue\": \"2ndEntityState\"\r\n}"
						},
						"url": {
							"raw": "{{url}}/api/EntityState",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"EntityState"
							]
						}
					},
					"response": []
				},
				{
					"name": "[21_02] read new EntityState",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "24ac8dfd-18cf-476f-8c08-1bd93aad7e83",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"verify values \", function () {",
									"    var jsonData = pm.response.json();",
									"//let Z = JSON.parse(jsonData.mobileNumber);",
									" pm.expect(jsonData.entityStates[0].entitySubStateType).to.eql(pm.variables.get(\"updateEntitySubStateType\"));",
									" pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\"));",
									"    pm.expect(jsonData.mobileNumber).to.eql(pm.variables.get(\"mobileNumber\"));",
									"  ",
									"    pm.expect(jsonData.entityCode).to.eql(pm.variables.get(\"entityCode\"));",
									"    pm.expect(jsonData.id).to.eql(pm.variables.get(\"entityId\"));",
									"   ",
									"",
									"  ",
									"   let X= JSON.parse(pm.variables.get(\"entitySegmentTypeId\"));",
									"   let Y= JSON.parse(pm.variables.get(\"languageTypeId\"));",
									"   ",
									"   ",
									"  pm.expect(jsonData.entitySegmentTypeId).to.eql(pm.variables.get(\"entitySegmentTypeId\"));",
									"  pm.expect(jsonData.languageTypeId).to.eql(pm.variables.get(\"languageTypeId\"));",
									"",
									"",
									"",
									"pm.environment.set(\"entityStateId\",jsonData.entityStates[0].id);",
									"",
									"//verify Second entity state",
									" pm.expect(jsonData.entityStates[1].entityStateType).to.eql(pm.variables.get(\"entityStateType\"));",
									"",
									"   ",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/Entity?entityId={{entityId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"Entity"
							],
							"query": [
								{
									"key": "entityId",
									"value": "{{entityId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[22]delete entity by entityId",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1b6f475f-1ee4-40c2-9c41-a27f713d0254",
								"exec": [
									"  pm.test(\"Status code is 200 ok deleted\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Your test name\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.isEntityDeleted).to.eql(true);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/api/Entity?entityId= {{entityId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"Entity"
							],
							"query": [
								{
									"key": "entityId",
									"value": " {{entityId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[23]read entity by entiyId",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "24ac8dfd-18cf-476f-8c08-1bd93aad7e83",
								"exec": [
									"pm.test(\"Status code is 200\", function () {console.log(",
									"    pm.response.to.have.status(404));",
									"});",
									"    pm.test(\"Body matches string\", function () { ",
									"    pm.expect(pm.response.text()).to.include(\"Entity does not exist\");",
									"",
									"    ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/Entity?entityId={{entityId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"Entity"
							],
							"query": [
								{
									"key": "entityId",
									"value": "{{entityId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[24]create entity(invalid languageTypeId)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b45ca225-09f2-4fd4-a05e-4c3d13a6dbf0",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(400);",
									"   ",
									"    let EntityJSON = pm.response.json();",
									"   ",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Entity SegmentType is invalid\");",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "0e9b9ca9-9c49-46e8-ac8c-768fb21ce4b8",
								"exec": [
									"var milliseconds = new Date().getTime();",
									"var codeSeed = \"Auto-\";",
									"pm.environment.set(\"entityCode\", codeSeed.concat(milliseconds));",
									"",
									"",
									"var codeSeed = \"Auto2nd-\";",
									"pm.environment.set(\"secondaryEntityCode\", codeSeed.concat(milliseconds));",
									"",
									"var moment = require('moment')",
									"pm.environment.set(\"timestamp\", moment().format(\"YYYY-MM-DDThh:mm:ss.SSS\"))   ",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": 0,\r\n  \"entityCode\": \"{{entityCode}}\",\r\n  \"name\": \"{{name}}\",\r\n  \"mobileNumber\": {{mobileNumberNAT}},\r\n  \"entityCreationDate\": \"{{timestamp}}\",\r\n  \"entitySourceSystemId\": {{entitySourceSystemId}},\r\n  \"entityStateDate\": \"{{timestamp}}\",\r\n  \"entityStateType\": {{entityStateType}},\r\n  \"entitySubStateType\":{{entitySubStateType}},\r\n  \"entityStateValue\": \" staevalue123 \",\r\n  \"secondaryEntityCode\": \"{{secondaryEntityCode}}\",\r\n  \"secondaryName\": \"{{secondaryName}}\",\r\n  \"secondaryMobileNumber\": {{secondaryMobileNumber}},\r\n  \"entitySegmentTypeId\":0,\r\n  \"languageTypeId\": {{languageTypeId}}\r\n}\r\n"
						},
						"url": {
							"raw": "{{url}}/api/Entity",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"Entity"
							]
						}
					},
					"response": []
				},
				{
					"name": "[25]create entity(invalid segmentId)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b45ca225-09f2-4fd4-a05e-4c3d13a6dbf0",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(400);",
									"   ",
									"    let EntityJSON = pm.response.json();",
									"   ",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"LanguageType does not exist\");",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "0e9b9ca9-9c49-46e8-ac8c-768fb21ce4b8",
								"exec": [
									"var milliseconds = new Date().getTime();",
									"var codeSeed = \"Auto-\";",
									"pm.environment.set(\"entityCode\", codeSeed.concat(milliseconds));",
									"",
									"",
									"var codeSeed = \"Auto2nd-\";",
									"pm.environment.set(\"secondaryEntityCode\", codeSeed.concat(milliseconds));",
									"",
									"var moment = require('moment')",
									"pm.environment.set(\"timestamp\", moment().format(\"YYYY-MM-DDThh:mm:ss.SSS\"))   ",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": 0,\r\n  \"entityCode\": \"{{entityCode}}\",\r\n  \"name\": \"{{name}}\",\r\n  \"mobileNumber\": {{mobileNumberNAT}},\r\n  \"entityCreationDate\": \"{{timestamp}}\",\r\n  \"entitySourceSystemId\": {{entitySourceSystemId}},\r\n  \"entityStateDate\": \"{{timestamp}}\",\r\n  \"entityStateType\": {{entityStateType}},\r\n  \"entitySubStateType\":{{entitySubStateType}},\r\n  \"entityStateValue\": \" staevalue123 \",\r\n  \"secondaryEntityCode\": \"{{secondaryEntityCode}}\",\r\n  \"secondaryName\": \"{{secondaryName}}\",\r\n  \"secondaryMobileNumber\": {{secondaryMobileNumber}},\r\n  \"entitySegmentTypeId\":{{entitySegmentTypeId}},\r\n  \"languageTypeId\": 18\r\n \r\n}\r\n"
						},
						"url": {
							"raw": "{{url}}/api/Entity",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"Entity"
							]
						}
					},
					"response": []
				},
				{
					"name": "[26]create entity(invalid segmentId)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b45ca225-09f2-4fd4-a05e-4c3d13a6dbf0",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(400);",
									"   ",
									"    let EntityJSON = pm.response.json();",
									"   ",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"LanguageType does not exist\");",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "0e9b9ca9-9c49-46e8-ac8c-768fb21ce4b8",
								"exec": [
									"var milliseconds = new Date().getTime();",
									"var codeSeed = \"Auto-\";",
									"pm.environment.set(\"entityCode\", codeSeed.concat(milliseconds));",
									"",
									"",
									"var codeSeed = \"Auto2nd-\";",
									"pm.environment.set(\"secondaryEntityCode\", codeSeed.concat(milliseconds));",
									"",
									"var moment = require('moment')",
									"pm.environment.set(\"timestamp\", moment().format(\"YYYY-MM-DDThh:mm:ss.SSS\"))   ",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": 0,\r\n  \"entityCode\": \"{{entityCode}}\",\r\n  \"name\": \"{{name}}\",\r\n  \"mobileNumber\": {{mobileNumberNAT}},\r\n  \"entityCreationDate\": \"{{timestamp}}\",\r\n  \"entitySourceSystemId\": {{entitySourceSystemId}},\r\n  \"entityStateDate\": \"{{timestamp}}\",\r\n  \"entityStateType\": {{entityStateType}},\r\n  \"entitySubStateType\":{{entitySubStateType}},\r\n  \"entityStateValue\": \" staevalue123 \",\r\n  \"secondaryEntityCode\": \"{{secondaryEntityCode}}\",\r\n  \"secondaryName\": \"{{secondaryName}}\",\r\n  \"secondaryMobileNumber\": {{secondaryMobileNumber}},\r\n  \"entitySegmentTypeId\":{{entitySegmentTypeId}},\r\n  \"languageTypeId\": 18\r\n \r\n}\r\n"
						},
						"url": {
							"raw": "{{url}}/api/Entity",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"Entity"
							]
						}
					},
					"response": []
				},
				{
					"name": "[27]create entity(Verify languageId and segmentId are mandatory)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b45ca225-09f2-4fd4-a05e-4c3d13a6dbf0",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(400);",
									"   ",
									"    let EntityJSON = pm.response.json();",
									"   ",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Entity SegmentType is invalid,Entity LanguageType is invalid\");",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "0e9b9ca9-9c49-46e8-ac8c-768fb21ce4b8",
								"exec": [
									"var milliseconds = new Date().getTime();",
									"var codeSeed = \"Auto-\";",
									"pm.environment.set(\"entityCode\", codeSeed.concat(milliseconds));",
									"",
									"",
									"var codeSeed = \"Auto2nd-\";",
									"pm.environment.set(\"secondaryEntityCode\", codeSeed.concat(milliseconds));",
									"",
									"var moment = require('moment')",
									"pm.environment.set(\"timestamp\", moment().format(\"YYYY-MM-DDThh:mm:ss.SSS\"))   ",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": 0,\r\n  \"entityCode\": \"{{entityCode}}\",\r\n  \"name\": \"{{name}}\",\r\n  \"mobileNumber\": {{mobileNumberNAT}},\r\n  \"entityCreationDate\": \"{{timestamp}}\",\r\n  \"entitySourceSystemId\": {{entitySourceSystemId}},\r\n  \"entityStateDate\": \"{{timestamp}}\",\r\n  \"entityStateType\": {{entityStateType}},\r\n  \"entitySubStateType\":{{entitySubStateType}},\r\n  \"entityStateValue\": \" staevalue123 \",\r\n  \"secondaryEntityCode\": \"{{secondaryEntityCode}}\",\r\n  \"secondaryName\": \"{{secondaryName}}\",\r\n  \"secondaryMobileNumber\": {{secondaryMobileNumber}}\r\n}\r\n"
						},
						"url": {
							"raw": "{{url}}/api/Entity",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"Entity"
							]
						}
					},
					"response": []
				},
				{
					"name": "[28]create entity(Verify languageId and segmentId are mandatory)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b45ca225-09f2-4fd4-a05e-4c3d13a6dbf0",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(400);",
									"   ",
									"    let EntityJSON = pm.response.json();",
									"   ",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"LanguageType does not exist\");",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "0e9b9ca9-9c49-46e8-ac8c-768fb21ce4b8",
								"exec": [
									"var milliseconds = new Date().getTime();",
									"var codeSeed = \"Auto-\";",
									"pm.environment.set(\"entityCode\", codeSeed.concat(milliseconds));",
									"",
									"",
									"var codeSeed = \"Auto2nd-\";",
									"pm.environment.set(\"secondaryEntityCode\", codeSeed.concat(milliseconds));",
									"",
									"var moment = require('moment')",
									"pm.environment.set(\"timestamp\", moment().format(\"YYYY-MM-DDThh:mm:ss.SSS\"))   ",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": 0,\r\n  \"entityCode\": \"{{entityCode}}\",\r\n  \"name\": \"{{name}}\",\r\n  \"mobileNumber\": {{mobileNumberNAT}},\r\n  \"entityCreationDate\": \"{{timestamp}}\",\r\n  \"entitySourceSystemId\": {{entitySourceSystemId}},\r\n  \"entityStateDate\": \"{{timestamp}}\",\r\n  \"entityStateType\": {{entityStateType}},\r\n  \"entitySubStateType\":{{entitySubStateType}},\r\n  \"entityStateValue\": \" staevalue123 \",\r\n  \"secondaryEntityCode\": \"{{secondaryEntityCode}}\",\r\n  \"secondaryName\": \"{{secondaryName}}\",\r\n  \"secondaryMobileNumber\": {{secondaryMobileNumber}},\r\n  \"entitySegmentTypeId\":{{entitySegmentTypeId}},\r\n  \"languageTypeId\": 18\r\n}\r\n"
						},
						"url": {
							"raw": "{{url}}/api/Entity",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"Entity"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "SourceSystemConfig.",
			"item": [
				{
					"name": "NP_TC_14152_28 With passing sourceSystemConfigId = invalid id (id has not created yet )#########",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5430c55b-a717-44ef-a7f3-d086f8c14185",
								"exec": [
									"pm.test(\" With passing sourceSystemConfigId = invalid id (id has not created yet )\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "ac21a3e2-ee44-4cfc-8ff2-255461d0fb2a",
								"exec": [
									"console.log(\"SSTART: ****************SOURCESYSTEMCONFIGURATION***************\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/SourceSystemConfiguration?sourceSystemConfigId=2000000",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"SourceSystemConfiguration"
							],
							"query": [
								{
									"key": "sourceSystemConfigId",
									"value": "2000000"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "NP_TC_14152_06  check response Withought passing  any params",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "40a829a8-5212-4d29-8b18-ae6bef97a6ca",
								"exec": [
									"pm.test(\" check response Withought passing  any params\", function () {",
									"    pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/api/SourceSystemConfiguration",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"SourceSystemConfiguration"
							]
						}
					},
					"response": []
				},
				{
					"name": "NP_TC_14152_09  With passing params  (sourceSystemId= \"string\") and others params value must be  be valid",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6f338516-00cf-4767-ac3c-6b2d8467860d",
								"exec": [
									"pm.test(\"With passing params  (sourceSystemId= string) and others params value must be  be valid\", function (){",
									"    pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n \r\n   \"entitySourceSystemId\": \"three\",\r\n  \"databaseType\":\"{{databaseType}}\",\r\n  \"connectionString\": \"puttest1\",\r\n  \"sqlQuery\": \"puttest1\"\r\n}"
						},
						"url": {
							"raw": "{{url}}/api/SourceSystemConfiguration",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"SourceSystemConfiguration"
							]
						}
					},
					"response": []
				},
				{
					"name": "NP_TC_14152_08 Without passing params  (SourceSystemId).",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "14526bb3-3765-4296-ac1e-bfd3f57dfd26",
								"exec": [
									"pm.test(\" Without passing params  (SourceSystemId)\", function () {",
									"    pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n \r\n  \r\n  \"databaseType\":  \"{{databaseType}}\",\r\n  \"connectionString\": \"puttest1\",\r\n  \"sqlQuery\": \"puttest1\"\r\n}"
						},
						"url": {
							"raw": "{{url}}/api/SourceSystemConfiguration",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"SourceSystemConfiguration"
							]
						}
					},
					"response": []
				},
				{
					"name": "NP_TC_14152_12 Without passing params  (DatabaseType)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "37efbb77-91cb-4773-8155-122da2592113",
								"exec": [
									"pm.test(\" Without passing params  (DatabaseType)\", function () {",
									"    pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n \r\n   \"entitySourceSystemId\": 1,\r\n  \"connectionString\": \"puttest155\",\r\n  \"sqlQuery\": \"puttest155\"\r\n}"
						},
						"url": {
							"raw": "{{url}}/api/SourceSystemConfiguration",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"SourceSystemConfiguration"
							]
						}
					},
					"response": []
				},
				{
					"name": "NP_TC_14152_20  Without passing params  (sqlQuery).",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8a518955-973c-4a20-ac59-a9b866dcb88f",
								"exec": [
									"pm.test(\" Without passing params  (sqlQuery).\", function () {",
									"    pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n \r\n   \"entitySourceSystemId\": 12,\r\n   \"databaseType\": \"{{databaseType}}\",\r\n  \"connectionString\": 5454\r\n  \r\n}"
						},
						"url": {
							"raw": "{{url}}/api/SourceSystemConfiguration",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"SourceSystemConfiguration"
							]
						}
					},
					"response": []
				},
				{
					"name": "NP_TC_14152_10  With passing params  (sourceSystemId= \"invalid sourceSystemId\") and others params value must be  be valid .",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d4816e84-0277-4443-bf09-27d46df79545",
								"exec": [
									"pm.test(\" With passing params  (sourceSystemId= invalid sourceSystemId) and others params value must be  be valid .\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "dbd23390-a19b-4767-9376-3ff7957b3100",
								"exec": [
									"pm.environment.set(\"SourceSystemConfigurationTypeId\",1)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n \r\n\"id\":0,\r\n  \"entitySourceSystemId\": 12,\r\n  \"databaseType\":\"{{databaseType}}\",\r\n  \"connectionString\": \"string\",\r\n  \"sqlQuery\": \"string\",\r\n    \"SourceSystemConfigurationTypeId\":{{SourceSystemConfigurationTypeId}}\r\n\r\n\r\n}"
						},
						"url": {
							"raw": "{{url}}/api/SourceSystemConfiguration",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"SourceSystemConfiguration"
							]
						}
					},
					"response": []
				},
				{
					"name": "NP_TC_14152_16  Without passing params  (connectionString)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0bf9daed-7c3b-46b3-bdf6-508630ff1d4a",
								"exec": [
									"pm.test(\"Without passing params  (connectionString)\", function () {",
									"    pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n \r\n   \"sourceSystemId\": 1,\r\n   \"databaseType\":\"{{databaseType}}\",\r\n  \r\n  \"sqlQuery\": \"puttest155\"\r\n}"
						},
						"url": {
							"raw": "{{url}}/api/SourceSystemConfiguration",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"SourceSystemConfiguration"
							]
						}
					},
					"response": []
				},
				{
					"name": "NP_TC_14152_13  With passing  params  (DatabaseType=  invalid number )",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ef98183d-08e3-4d90-8a45-11d4eab5ae87",
								"exec": [
									"pm.test(\"NP_TC_14152_13  With passing  params  (DatabaseType= number )\", function () {",
									"    pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n \r\n   \"sourceSystemId\": 3,\r\n   \"databaseType\": 54544,\r\n  \"connectionString\": \"puttest155\",\r\n  \"sqlQuery\": \"puttest155\",\r\n      \"SourceSystemConfigurationTypeId\":{{SourceSystemConfigurationTypeId}}\r\n\r\n}"
						},
						"url": {
							"raw": "{{url}}/api/SourceSystemConfiguration",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"SourceSystemConfiguration"
							]
						}
					},
					"response": []
				},
				{
					"name": "NP_TC_14152_14  With passing  params  (DatabaseType=\" invalid DtabaseType \" other than (1)SQL and (2)Oracle)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f760d1f4-28cd-463e-9b2c-88830ba26cf1",
								"exec": [
									"pm.test(\" With passing  params  (DatabaseType=invalid DtabaseType other than SQL and Oracle)\", function () {",
									"    pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n \r\n   \"sourceSystemId\": 1,\r\n   \"databaseType\": \"dsfdgdfg\",\r\n  \"connectionString\": \"puttest155\",\r\n  \"sqlQuery\": \"puttest155\",\r\n      \"SourceSystemConfigurationTypeId\":{{SourceSystemConfigurationTypeId}}\r\n\r\n}"
						},
						"url": {
							"raw": "{{url}}/api/SourceSystemConfiguration",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"SourceSystemConfiguration"
							]
						}
					},
					"response": []
				},
				{
					"name": "NP_TC_14152_21 With passing  params  (sqlQuery =\" number\")",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3efef836-a2aa-4391-b378-5b17dc844471",
								"exec": [
									"pm.test(\"NP_TC_14152_21 With passing  params  (sqlQuery =number)\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"var jsonData = pm.response.json();",
									"pm.environment.set(\"sourceSystemConfigId\",jsonData.id );"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n \r\n   \"entitySourceSystemId\": 1,\r\n   \"databaseType\": \"{{databaseType}}\",\r\n  \"connectionString\": 5454,\r\n  \"sqlQuery\": 564564,\r\n  \"SourceSystemConfigurationTypeId\":1\r\n}"
						},
						"url": {
							"raw": "{{url}}/api/SourceSystemConfiguration",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"SourceSystemConfiguration"
							]
						}
					},
					"response": []
				},
				{
					"name": "NP_TC_14152_32  passing sourceSystemConfigId = valid sourceSystemConfigId (id which is allready deleted ) Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fdb9ed03-b0d4-402a-a60b-d2a0c6be80a9",
								"exec": [
									"pm.test(\"NP_TC_14152_32  passing sourceSystemConfigId = valid sourceSystemConfigId (id which is allready deleted )\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Your test name\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.isSourceSystemConfigDelete).to.eql(true);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/api/SourceSystemConfiguration?sourceSystemConfigId={{sourceSystemConfigId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"SourceSystemConfiguration"
							],
							"query": [
								{
									"key": "sourceSystemConfigId",
									"value": "{{sourceSystemConfigId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "NP_TC_14152_23  With passing  params  (sqlQuery=\"valid query\")",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a06c5f7e-4c7d-4fa1-9dac-a9481557a5a5",
								"exec": [
									"pm.test(\"With passing  params  (sqlQuery=valid query)\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"var jsonData = pm.response.json();",
									"pm.environment.set(\"sourceSystemConfigId\",jsonData.id );"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "1b0b52c9-9924-451f-a3b2-ca2ef0c9d61b",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n \r\n   \"entitySourceSystemId\": {{entitySourceSystemId}},\r\n   \"databaseType\":\"{{databaseType}}\",\r\n  \"connectionString\": 5454,\r\n  \"sqlQuery\":\"SELECT [Id], [EntityCode],[Name],[MobileNumber],[EntityStateDate],[EntityStateTypeId],[EntitySubStateTypeId],[EntityStateValue] FROM[TestDBForDataPuller].[dbo].[ProspectAdvisor]\",\r\n      \"SourceSystemConfigurationTypeId\":{{SourceSystemConfigurationTypeId}}\r\n\r\n}"
						},
						"url": {
							"raw": "{{url}}/api/SourceSystemConfiguration",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"SourceSystemConfiguration"
							]
						}
					},
					"response": []
				},
				{
					"name": "NP_TC_14152_32  passing sourceSystemConfigId = valid sourceSystemConfigId (id which is allready deleted ) Copy Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fdb9ed03-b0d4-402a-a60b-d2a0c6be80a9",
								"exec": [
									"pm.test(\"NP_TC_14152_32  passing sourceSystemConfigId = valid sourceSystemConfigId (id which is allready deleted )\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Your test name\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.isSourceSystemConfigDelete).to.eql(true);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/api/SourceSystemConfiguration?sourceSystemConfigId={{sourceSystemConfigId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"SourceSystemConfiguration"
							],
							"query": [
								{
									"key": "sourceSystemConfigId",
									"value": "{{sourceSystemConfigId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "NP_TC_14152_18  With passing  params  (connectionString =\" valid conectionstring\")",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bf0207b7-84ef-4e69-941d-643cb22d1bcb",
								"exec": [
									"pm.test(\"With passing  params  (connectionString = valid coonectionstring)\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"var jsonData = pm.response.json();",
									"pm.environment.set(\"sourceSystemConfigId\",jsonData.id );"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n \r\n   \"entitySourceSystemId\": {{entitySourceSystemId}},\r\n   \"databaseType\":\"{{databaseType}}\",\r\n  \"connectionString\": \"Data Source=IN-BFSBFS3820;Initial Catalog=NudgeSystem;Persist Security Info=True;User ID=NudgeSystemQA;Password=Pass@1234;Pooling=False;MultipleActiveResultSets=False;Connect Timeout=60;Encrypt=False;TrustServerCertificate=True\",\r\n  \"sqlQuery\": \"puttest155\",\r\n      \"SourceSystemConfigurationTypeId\":{{SourceSystemConfigurationTypeId}}\r\n\r\n}"
						},
						"url": {
							"raw": "{{url}}/api/SourceSystemConfiguration",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"SourceSystemConfiguration"
							]
						}
					},
					"response": []
				},
				{
					"name": "NP_TC_14152_32  passing sourceSystemConfigId = valid sourceSystemConfigId (id which is allready deleted ) Copy Copy Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fdb9ed03-b0d4-402a-a60b-d2a0c6be80a9",
								"exec": [
									"pm.test(\"NP_TC_14152_32  passing sourceSystemConfigId = valid sourceSystemConfigId (id which is allready deleted )\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Your test name\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.isSourceSystemConfigDelete).to.eql(true);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/api/SourceSystemConfiguration?sourceSystemConfigId={{sourceSystemConfigId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"SourceSystemConfiguration"
							],
							"query": [
								{
									"key": "sourceSystemConfigId",
									"value": "{{sourceSystemConfigId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "NP_TC_14152_15  With passing  params  (DatabaseType=\" valid DtabaseType \")",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b431872c-71ca-4cd9-9199-069c9a3f7f8e",
								"exec": [
									"pm.test(\" With passing  params  (DatabaseType= valid DtabaseType )\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"var jsonData = pm.response.json();",
									"pm.environment.set(\"sourceSystemConfigId\",jsonData.id );"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n \r\n   \"entitySourceSystemId\": {{entitySourceSystemId}},\r\n   \"databaseType\": 2,\r\n  \"connectionString\": \"puttest155\",\r\n  \"sqlQuery\": \"puttest155\",\r\n      \"SourceSystemConfigurationTypeId\":{{SourceSystemConfigurationTypeId}}\r\n\r\n}"
						},
						"url": {
							"raw": "{{url}}/api/SourceSystemConfiguration",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"SourceSystemConfiguration"
							]
						}
					},
					"response": []
				},
				{
					"name": "NP_TC_14152_32  passing sourceSystemConfigId = valid sourceSystemConfigId (id which is allready deleted ) Copy Copy Copy Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fdb9ed03-b0d4-402a-a60b-d2a0c6be80a9",
								"exec": [
									"pm.test(\"NP_TC_14152_32  passing sourceSystemConfigId = valid sourceSystemConfigId (id which is allready deleted )\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Your test name\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.isSourceSystemConfigDelete).to.eql(true);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/api/SourceSystemConfiguration?sourceSystemConfigId={{sourceSystemConfigId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"SourceSystemConfiguration"
							],
							"query": [
								{
									"key": "sourceSystemConfigId",
									"value": "{{sourceSystemConfigId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "NP_TC_14152_07 Without passing params  (SourceSystemConfigurationTypeId)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8b787f24-3d03-43f0-b5da-e4eebb8e2078",
								"exec": [
									"pm.test(\"Without passing params  SourceSystemConfigurationTypeId\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n \r\n  \"entitySourceSystemId\": {{entitySourceSystemId}},\r\n  \"databaseType\": \"{{databaseType}}\",\r\n  \"connectionString\": \"puttest1\",\r\n  \"sqlQuery\": \"puttest1\"\r\n}"
						},
						"url": {
							"raw": "{{url}}/api/SourceSystemConfiguration",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"SourceSystemConfiguration"
							]
						}
					},
					"response": []
				},
				{
					"name": "NP_TC_14152_15  With passing  params  all valid Field",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b431872c-71ca-4cd9-9199-069c9a3f7f8e",
								"exec": [
									"pm.test(\" With passing  params  (DatabaseType= valid DtabaseType )\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"var jsonData = pm.response.json();",
									"pm.environment.set(\"sourceSystemConfigId\",jsonData.id );"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\n   \"entitySourceSystemId\": {{entitySourceSystemId}},\n   \"databaseType\": 2,\n  \"connectionString\": \"puttest155\",\n  \"sqlQuery\": \"puttest155\",\n  \"SourceSystemConfigurationTypeId\":1,\n  \"SourceSystemConfigurationTypeId\":{{SourceSystemConfigurationTypeId}}\n\n}"
						},
						"url": {
							"raw": "{{url}}/api/SourceSystemConfiguration",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"SourceSystemConfiguration"
							]
						}
					},
					"response": []
				},
				{
					"name": "NP_TC_14152_26  With passing sourceSystemConfigId = \"valid id\" ( id has some records)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "35729a43-b6ee-4232-b2d2-dcd287b67a15",
								"exec": [
									"pm.test(\"NP_TC_14152_26  With passing sourceSystemConfigId = valid id( id has some records)\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}/api/SourceSystemConfiguration?sourceSystemConfigId={{sourceSystemConfigId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"SourceSystemConfiguration"
							],
							"query": [
								{
									"key": "sourceSystemConfigId",
									"value": "{{sourceSystemConfigId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "NP_TC_14152_26  With passing sourceSystemConfigId = \"valid id\" ( id has some records) Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "35729a43-b6ee-4232-b2d2-dcd287b67a15",
								"exec": [
									"pm.test(\"NP_TC_14152_26  With passing sourceSystemConfigId = valid id ( id has some records) \", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}/api/SourceSystemConfiguration?sourceSystemConfigId={{sourceSystemConfigId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"SourceSystemConfiguration"
							],
							"query": [
								{
									"key": "sourceSystemConfigId",
									"value": "{{sourceSystemConfigId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "NP_TC_14152_25  With passing sourceSystemConfigId = \"string\"",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ad708ce5-88c9-4709-a192-c175751b7f5f",
								"exec": [
									"pm.test(\"NP_TC_14152_25  With passing sourceSystemConfigId = string\", function () {",
									"    pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/SourceSystemConfiguration?sourceSystemConfigId=Two",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"SourceSystemConfiguration"
							],
							"query": [
								{
									"key": "sourceSystemConfigId",
									"value": "Two"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "NP_TC_14152_24 Without passing sourceSystemConfigId",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2c23890c-fa78-4a8b-861f-353cf50ca875",
								"exec": [
									"pm.test(\"NP_TC_14152_24 Without passing sourceSystemConfigId\", function () {",
									"    pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/SourceSystemConfiguration?sourceSystemConfigId=",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"SourceSystemConfiguration"
							],
							"query": [
								{
									"key": "sourceSystemConfigId",
									"value": ""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "NP_TC_14152_33 verify that sourceSystemConfigId is mandatory",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "085df6da-601e-44cb-9599-6b212be471f6",
								"exec": [
									"pm.test(\"NP_TC_14152_33 verify that sourceSystemConfigId is mandatory\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "72c928d3-5bb7-4af8-9b83-865cb4d1be3b",
								"exec": [
									"pm.environment.set(\"SourceSystemConfigurationTypeId\",2);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n \r\n  \"entitySourceSystemId\": {{entitySourceSystemId}},\r\n  \"databaseType\":\"{{databaseType}}\",\r\n  \"connectionString\": \"puttest\",\r\n  \"sqlQuery\": \"puttest\",\r\n  \"SourceSystemConfigurationTypeId\":{{SourceSystemConfigurationTypeId}}\r\n}"
						},
						"url": {
							"raw": "{{url}}/api/SourceSystemConfiguration",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"SourceSystemConfiguration"
							]
						}
					},
					"response": []
				},
				{
					"name": "NP_TC_14152_35 sourceSystemConfiguration get updted by passing invalid  sourceSystemConfigId and updated value of(sourceSystemId,databaseType, connectionString,sqlQuery )",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2e2bf86c-2c75-47f5-8eb4-7b2e3f861d9d",
								"exec": [
									"pm.test(\"NP_TC_14152_35 sourceSystemConfiguration get updted by passing invalid  sourceSystemConfigId and updated value of(sourceSystemId,databaseType, connectionString,sqlQuery )\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "d4c0f79e-594c-4062-9f1d-5602cbb4315a",
								"exec": [
									"pm.environment.set(\"SourceSystemConfigurationTypeId\",2);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n \"id\": -1500,\r\n  \"entitySourceSystemId\": {{entitySourceSystemId}},\r\n  \"databaseType\": \"{{databaseType}}\",\r\n  \"connectionString\": \"puttest\",\r\n  \"sqlQuery\": \"puttest\",\r\n  \"SourceSystemConfigurationTypeId\":{{SourceSystemConfigurationTypeId}}\r\n}"
						},
						"url": {
							"raw": "{{url}}/api/SourceSystemConfiguration",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"SourceSystemConfiguration"
							]
						}
					},
					"response": []
				},
				{
					"name": "NP_TC_14152_34  sourceSystemConfiguration get updted by passing valid sourceSystemConfigId and updated value of(sourceSystemId,databaseType, connectionString,sqlQuery )",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ff46398f-9190-4895-bab8-dc40ac1b2253",
								"exec": [
									"pm.test(\"NP_TC_14152_34  sourceSystemConfiguration get updted by passing valid sourceSystemConfigId and updated value of(sourceSystemId,databaseType, connectionString,sqlQuery )\", function () {",
									"    pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "05cecad1-3fc3-4005-adf0-dd59dedd4b95",
								"exec": [
									"pm.environment.set(\"SourceSystemConfigurationTypeId\",1);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n \"id\":{{sourceSystemConfigId}},\r\n  \"entitySourceSystemId\": {{entitySourceSystemId}},\r\n  \"databaseType\": \"{{databaseType}}\",\r\n  \"connectionString\": \"updatedconn_string\",\r\n  \"sqlQuery\": \"updated_query\",\r\n    \"SourceSystemConfigurationTypeId\":{{SourceSystemConfigurationTypeId}}\r\n\r\n}"
						},
						"url": {
							"raw": "{{url}}/api/SourceSystemConfiguration",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"SourceSystemConfiguration"
							]
						}
					},
					"response": []
				},
				{
					"name": "NP_TC_14152_26_01   check value get updated or not for put reqquest",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "35729a43-b6ee-4232-b2d2-dcd287b67a15",
								"exec": [
									"pm.test(\" check value get updated or not for put reqquest\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{url}}/api/SourceSystemConfiguration?sourceSystemConfigId={{sourceSystemConfigId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"SourceSystemConfiguration"
							],
							"query": [
								{
									"key": "sourceSystemConfigId",
									"value": "{{sourceSystemConfigId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "NP_TC_14152_29  response withought passing sourceSystemConfigId",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f0b1b2ee-2825-4ee4-ae09-37c86b6c45b4",
								"exec": [
									"pm.test(\"NP_TC_14152_29  response withought passing sourceSystemConfigId\", function () {",
									"    pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "file",
							"file": {
								"src": ""
							}
						},
						"url": {
							"raw": "{{url}}/api/SourceSystemConfiguration?sourceSystemConfigId=",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"SourceSystemConfiguration"
							],
							"query": [
								{
									"key": "sourceSystemConfigId",
									"value": ""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "NP_TC_14152_30 passing sourceSystemConfigId = valid sourceSystemConfigId (Id should be prsent in DB)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0a8ab025-c75e-42db-bc3b-3fddd0c006e2",
								"exec": [
									"pm.test(\"passing sourceSystemConfigId = valid sourceSystemConfigId (Id should be prsent in DB)\", function () {",
									"    pm.response.to.have.status(200);",
									"    ",
									"pm.test(\"Your test name\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.isSourceSystemConfigDelete).to.eql(true);",
									"});",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/api/SourceSystemConfiguration?sourceSystemConfigId={{sourceSystemConfigId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"SourceSystemConfiguration"
							],
							"query": [
								{
									"key": "sourceSystemConfigId",
									"value": "{{sourceSystemConfigId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "NP_TC_14152_27  With passing sourceSystemConfigId = invalid id ( id records  has been deleted from databse)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b77e0b00-eca0-45f3-8407-ce0ab5789a1d",
								"exec": [
									"pm.test(\"NP_TC_14152_27  With passing sourceSystemConfigId = invalid id ( id records  has been deleted from databse)\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"SourceSystemConfigId does not exist\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://nudgesystem-qa.persistent.co.in/api/SourceSystemConfiguration?sourceSystemConfigId={{sourceSystemConfigId}}",
							"protocol": "http",
							"host": [
								"nudgesystem-qa",
								"persistent",
								"co",
								"in"
							],
							"path": [
								"api",
								"SourceSystemConfiguration"
							],
							"query": [
								{
									"key": "sourceSystemConfigId",
									"value": "{{sourceSystemConfigId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "NP_TC_14152_31  passing sourceSystemConfigId =invalid sourceSystemConfigId (Id should not be prsent in DB or created yet)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "afe68d77-bf70-415b-ae36-391911ddbff8",
								"exec": [
									"pm.test(\"NP_TC_14152_31  passing sourceSystemConfigId =invalid sourceSystemConfigId (Id should not be prsent in DB or created yet)\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"SourceSystemConfigId does not exist\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://nudgesystem-qa.persistent.co.in/api/SourceSystemConfiguration?sourceSystemConfigId=100000000",
							"protocol": "http",
							"host": [
								"nudgesystem-qa",
								"persistent",
								"co",
								"in"
							],
							"path": [
								"api",
								"SourceSystemConfiguration"
							],
							"query": [
								{
									"key": "sourceSystemConfigId",
									"value": "100000000"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "NP_TC_14152_32  passing sourceSystemConfigId = sourceSystemConfigId (id which is allready deleted )",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fdb9ed03-b0d4-402a-a60b-d2a0c6be80a9",
								"exec": [
									"pm.test(\"NP_TC_14152_32  passing sourceSystemConfigId = valid sourceSystemConfigId (id which is allready deleted )\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://nudgesystem-qa.persistent.co.in/api/SourceSystemConfiguration?sourceSystemConfigId={{sourceSystemConfigId}}",
							"protocol": "http",
							"host": [
								"nudgesystem-qa",
								"persistent",
								"co",
								"in"
							],
							"path": [
								"api",
								"SourceSystemConfiguration"
							],
							"query": [
								{
									"key": "sourceSystemConfigId",
									"value": "{{sourceSystemConfigId}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Rule",
			"item": [
				{
					"name": "[601][RULE] Create Reminder(should Not accept Empty Body)#######",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "ae4f6a3d-d7b1-4292-959e-0b1545b2163e",
								"exec": [
									"pm.environment.set(\"entityStateType\", 2);",
									"pm.environment.set(\"entitySubStateType\", 7);",
									"pm.environment.set(\"entitySourceSystemId\", 1);",
									"",
									"console.log(\"START:********************** RULE *************************\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "05e529f8-489d-4772-8b5d-a8cfb9fe60c1",
								"exec": [
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(400);",
									"    pm.expect(pm.response.text()).to.include(\"A non-empty request body is required.\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/api/Rule/Reminder",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"Rule",
								"Reminder"
							]
						}
					},
					"response": []
				},
				{
					"name": "[602] Create Reminder( Verify FrerquenyType Is Mandatory)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "ae4f6a3d-d7b1-4292-959e-0b1545b2163e",
								"exec": [
									"pm.environment.set(\"entityStateType\", 2);",
									"pm.environment.set(\"entitySubStateType\", 7);",
									"pm.environment.set(\"entitySourceSystemId\", 1);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "05e529f8-489d-4772-8b5d-a8cfb9fe60c1",
								"exec": [
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(400);",
									"    pm.expect(pm.response.text()).to.include(\"Frequency Type is invalid\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"rule\": {\r\n    \"id\": 0,\r\n    \"name\": \"SUpervisory Nudge PWT RM\",\r\n    \"description\": \"RM\",\r\n    \"ruleType\": 1,\r\n   \r\n    \"entitySourceSystemId\": {{entitySourceSystemId}},\r\n    \"entityStateType\": {{entityStateType}},\r\n    \"entitySubStateType\": {{entitySubStateType}},\r\n    \"ruleFrequencies\": [\r\n      {\r\n        \"id\": 0,\r\n        \"hour\": 0,\r\n        \"minute\": 15\r\n      }\r\n    ],\r\n    \"ruleLineItems\": [\r\n      {\r\n        \"id\": 0,\r\n        \"ruleLineItemType\": 1,\r\n        \"name\": \"Reminder Nudge for RM\",\r\n        \"parentId\": \"0\",\r\n        \"sequence\": 1,\r\n        \"sendToPrimary\": true,\r\n        \"intendedPositiveOutput\": \"string\",\r\n        \"ruleLineItemResults\": [\r\n          {\r\n            \"notificationChannelType\": 2,\r\n            \"notificationMessageTemplateId\": {{notificationMessageTemplateId1}},\r\n            \"isSMSAsFallBack\": false,\r\n            \"notificationMessageTemplateName\": \"string\"\r\n          }\r\n        ]\r\n      }\r\n    ]\r\n  }\r\n}"
						},
						"url": {
							"raw": "{{url}}/api/Rule/Reminder",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"Rule",
								"Reminder"
							]
						}
					},
					"response": []
				},
				{
					"name": "[603] Create Reminder( should Not accept invalid FrequencyType)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "ae4f6a3d-d7b1-4292-959e-0b1545b2163e",
								"exec": [
									"pm.environment.set(\"entityStateType\", 2);",
									"pm.environment.set(\"entitySubStateType\", 7);",
									"pm.environment.set(\"entitySourceSystemId\", 1);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "05e529f8-489d-4772-8b5d-a8cfb9fe60c1",
								"exec": [
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(400);",
									"    pm.expect(pm.response.text()).to.include(\"Frequency Type is invalid\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"rule\": {\r\n    \"id\": 0,\r\n    \"name\": \"SUpervisory Nudge PWT RM\",\r\n    \"description\": \"RM\",\r\n    \"ruleType\": 1,\r\n\t\"frequencyType\": 0,\r\n    \"entitySourceSystemId\": {{entitySourceSystemId}},\r\n    \"entityStateType\": {{entityStateType}},\r\n    \"entitySubStateType\": {{entitySubStateType}},\r\n    \"ruleFrequencies\": [\r\n      {\r\n        \"id\": 0,\r\n        \"hour\": 0,\r\n        \"minute\": 15\r\n      }\r\n    ],\r\n    \"ruleLineItems\": [\r\n      {\r\n        \"id\": 0,\r\n        \"ruleLineItemType\": 1,\r\n        \"name\": \"Reminder Nudge for RM\",\r\n        \"parentId\": \"0\",\r\n        \"sequence\": 1,\r\n        \"sendToPrimary\": true,\r\n        \"intendedPositiveOutput\": \"string\",\r\n        \"ruleLineItemResults\": [\r\n          {\r\n            \"notificationChannelType\": 2,\r\n            \"notificationMessageTemplateId\": {{notificationMessageTemplateId1}},\r\n            \"isSMSAsFallBack\": false,\r\n            \"notificationMessageTemplateName\": \"string\"\r\n          }\r\n        ]\r\n      }\r\n    ]\r\n  }\r\n}"
						},
						"url": {
							"raw": "{{url}}/api/Rule/Reminder",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"Rule",
								"Reminder"
							]
						}
					},
					"response": []
				},
				{
					"name": "[604] Create Reminder( should Not accept invalid FrequencyType=40)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "ae4f6a3d-d7b1-4292-959e-0b1545b2163e",
								"exec": [
									"pm.environment.set(\"entityStateType\", 2);",
									"pm.environment.set(\"entitySubStateType\", 7);",
									"pm.environment.set(\"entitySourceSystemId\", 1);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "05e529f8-489d-4772-8b5d-a8cfb9fe60c1",
								"exec": [
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(400);",
									"    pm.expect(pm.response.text()).to.include(\"'Frequency Type' has a range of values which does not include '40'.\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"rule\": {\r\n    \"id\": 0,\r\n    \"name\": \"SUpervisory Nudge PWT RM\",\r\n    \"description\": \"RM\",\r\n    \"ruleType\": 1,\r\n\t\"frequencyType\": 40,\r\n    \"entitySourceSystemId\": {{entitySourceSystemId}},\r\n    \"entityStateType\": {{entityStateType}},\r\n    \"entitySubStateType\": {{entitySubStateType}},\r\n    \"ruleFrequencies\": [\r\n      {\r\n        \"id\": 0,\r\n        \"hour\": 0,\r\n        \"minute\": 15\r\n      }\r\n    ],\r\n    \"ruleLineItems\": [\r\n      {\r\n        \"id\": 0,\r\n        \"ruleLineItemType\": 1,\r\n        \"name\": \"Reminder Nudge for RM\",\r\n        \"parentId\": \"0\",\r\n        \"sequence\": 1,\r\n        \"sendToPrimary\": true,\r\n        \"intendedPositiveOutput\": \"string\",\r\n        \"ruleLineItemResults\": [\r\n          {\r\n            \"notificationChannelType\": 2,\r\n            \"notificationMessageTemplateId\": {{notificationMessageTemplateId1}},\r\n            \"isSMSAsFallBack\": false,\r\n            \"notificationMessageTemplateName\": \"string\"\r\n          }\r\n        ]\r\n      }\r\n    ]\r\n  }\r\n}"
						},
						"url": {
							"raw": "{{url}}/api/Rule/Reminder",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"Rule",
								"Reminder"
							]
						}
					},
					"response": []
				},
				{
					"name": "[606] Create Reminder( should Not accept invalid FrequencyType=char)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "ae4f6a3d-d7b1-4292-959e-0b1545b2163e",
								"exec": [
									"pm.environment.set(\"entityStateType\", 2);",
									"pm.environment.set(\"entitySubStateType\", 7);",
									"pm.environment.set(\"entitySourceSystemId\", 1);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "05e529f8-489d-4772-8b5d-a8cfb9fe60c1",
								"exec": [
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"rule\": {\r\n    \"id\": 0,\r\n    \"name\": \"SUpervisory Nudge PWT RM\",\r\n    \"description\": \"RM\",\r\n    \"ruleType\": 1,\r\n\t\"frequencyType\": \"two\",\r\n    \"entitySourceSystemId\": {{entitySourceSystemId}},\r\n    \"entityStateType\": {{entityStateType}},\r\n    \"entitySubStateType\": {{entitySubStateType}},\r\n    \"ruleFrequencies\": [\r\n      {\r\n        \"id\": 0,\r\n        \"hour\": 0,\r\n        \"minute\": 15\r\n      }\r\n    ],\r\n    \"ruleLineItems\": [\r\n      {\r\n        \"id\": 0,\r\n        \"ruleLineItemType\": 1,\r\n        \"name\": \"Reminder Nudge for RM\",\r\n        \"parentId\": \"0\",\r\n        \"sequence\": 1,\r\n        \"sendToPrimary\": true,\r\n        \"intendedPositiveOutput\": \"string\",\r\n        \"ruleLineItemResults\": [\r\n          {\r\n            \"notificationChannelType\": 2,\r\n            \"notificationMessageTemplateId\": {{notificationMessageTemplateId1}},\r\n            \"isSMSAsFallBack\": false,\r\n            \"notificationMessageTemplateName\": \"string\"\r\n          }\r\n        ]\r\n      }\r\n    ]\r\n  }\r\n}"
						},
						"url": {
							"raw": "{{url}}/api/Rule/Reminder",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"Rule",
								"Reminder"
							]
						}
					},
					"response": []
				},
				{
					"name": "[607] Create Reminder(without ruleFrequencies)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "ae4f6a3d-d7b1-4292-959e-0b1545b2163e",
								"exec": [
									"pm.environment.set(\"entityStateType\", 2);",
									"pm.environment.set(\"entitySubStateType\", 7);",
									"pm.environment.set(\"entitySourceSystemId\", 1);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "05e529f8-489d-4772-8b5d-a8cfb9fe60c1",
								"exec": [
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(400);",
									"    ",
									"",
									"    pm.expect(pm.response.text()).to.include(\"Frequency Time is invalid\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"rule\": {\r\n    \"id\": 0,\r\n    \"name\": \"SUpervisory Nudge PWT RM\",\r\n    \"description\": \"RM\",\r\n    \"ruleType\": 1,\r\n\t\"frequencyType\": 2,\r\n    \"entitySourceSystemId\": {{entitySourceSystemId}},\r\n    \"entityStateType\": {{entityStateType}},\r\n    \"entitySubStateType\": {{entitySubStateType}},\r\n    \"ruleLineItems\": [\r\n      {\r\n        \"id\": 0,\r\n        \"ruleLineItemType\": 1,\r\n        \"name\": \"Reminder Nudge for RM\",\r\n        \"parentId\": \"0\",\r\n        \"sequence\": 1,\r\n        \"sendToPrimary\": true,\r\n        \"intendedPositiveOutput\": \"string\",\r\n        \"ruleLineItemResults\": [\r\n          {\r\n            \"notificationChannelType\": 2,\r\n            \"notificationMessageTemplateId\": {{notificationMessageTemplateId1}},\r\n            \"isSMSAsFallBack\": false,\r\n            \"notificationMessageTemplateName\": \"string\"\r\n          }\r\n        ]\r\n      }\r\n    ]\r\n  }\r\n}"
						},
						"url": {
							"raw": "{{url}}/api/Rule/Reminder",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"Rule",
								"Reminder"
							]
						}
					},
					"response": []
				},
				{
					"name": "[608] Create Reminder(should not accept invalid time[00:00] )",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "ae4f6a3d-d7b1-4292-959e-0b1545b2163e",
								"exec": [
									"pm.environment.set(\"entityStateType\", 2);",
									"pm.environment.set(\"entitySubStateType\", 7);",
									"pm.environment.set(\"entitySourceSystemId\", 1);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "05e529f8-489d-4772-8b5d-a8cfb9fe60c1",
								"exec": [
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(400);",
									"    ",
									"",
									"    pm.expect(pm.response.text()).to.include(\"Frequency Time is invalid\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"rule\": {\r\n    \"id\": 0,\r\n    \"name\": \"SUpervisory Nudge PWT RM\",\r\n    \"description\": \"RM\",\r\n    \"ruleType\": 1,\r\n\t\"frequencyType\": 2,\r\n    \"entitySourceSystemId\": {{entitySourceSystemId}},\r\n    \"entityStateType\": {{entityStateType}},\r\n    \"entitySubStateType\": {{entitySubStateType}},\r\n     \"ruleFrequencies\": [\r\n      {\r\n        \"id\": 0,\r\n        \"hour\": 0,\r\n        \"minute\": 0\r\n      }\r\n    ],\r\n    \"ruleLineItems\": [\r\n      {\r\n        \"id\": 0,\r\n        \"ruleLineItemType\": 1,\r\n        \"name\": \"Reminder Nudge for RM\",\r\n        \"parentId\": \"0\",\r\n        \"sequence\": 1,\r\n        \"sendToPrimary\": true,\r\n        \"intendedPositiveOutput\": \"string\",\r\n        \"ruleLineItemResults\": [\r\n          {\r\n            \"notificationChannelType\": 2,\r\n            \"notificationMessageTemplateId\": {{notificationMessageTemplateId1}},\r\n            \"isSMSAsFallBack\": false,\r\n            \"notificationMessageTemplateName\": \"string\"\r\n          }\r\n        ]\r\n      }\r\n    ]\r\n  }\r\n}"
						},
						"url": {
							"raw": "{{url}}/api/Rule/Reminder",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"Rule",
								"Reminder"
							]
						}
					},
					"response": []
				},
				{
					"name": "[609] Create Reminder(should not accept invalid HH[25:00] )",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "ae4f6a3d-d7b1-4292-959e-0b1545b2163e",
								"exec": [
									"pm.environment.set(\"entityStateType\", 2);",
									"pm.environment.set(\"entitySubStateType\", 7);",
									"pm.environment.set(\"entitySourceSystemId\", 1);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "05e529f8-489d-4772-8b5d-a8cfb9fe60c1",
								"exec": [
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(400);",
									"    ",
									"",
									"    pm.expect(pm.response.text()).to.include(\"Frequency Hour is invalid\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"rule\": {\r\n    \"id\": 0,\r\n    \"name\": \"SUpervisory Nudge PWT RM\",\r\n    \"description\": \"RM\",\r\n    \"ruleType\": 1,\r\n\t\"frequencyType\": 2,\r\n    \"entitySourceSystemId\": {{entitySourceSystemId}},\r\n    \"entityStateType\": {{entityStateType}},\r\n    \"entitySubStateType\": {{entitySubStateType}},\r\n     \"ruleFrequencies\": [\r\n      {\r\n        \"id\": 0,\r\n        \"hour\": 25,\r\n        \"minute\": 0\r\n      }\r\n    ],\r\n    \"ruleLineItems\": [\r\n      {\r\n        \"id\": 0,\r\n        \"ruleLineItemType\": 1,\r\n        \"name\": \"Reminder Nudge for RM\",\r\n        \"parentId\": \"0\",\r\n        \"sequence\": 1,\r\n        \"sendToPrimary\": true,\r\n        \"intendedPositiveOutput\": \"string\",\r\n        \"ruleLineItemResults\": [\r\n          {\r\n            \"notificationChannelType\": 2,\r\n            \"notificationMessageTemplateId\": {{notificationMessageTemplateId1}},\r\n            \"isSMSAsFallBack\": false,\r\n            \"notificationMessageTemplateName\": \"string\"\r\n          }\r\n        ]\r\n      }\r\n    ]\r\n  }\r\n}"
						},
						"url": {
							"raw": "{{url}}/api/Rule/Reminder",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"Rule",
								"Reminder"
							]
						}
					},
					"response": []
				},
				{
					"name": "[610] Create Reminder(should not accept invalid MM[10:49] )",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "ae4f6a3d-d7b1-4292-959e-0b1545b2163e",
								"exec": [
									"pm.environment.set(\"entityStateType\", 2);",
									"pm.environment.set(\"entitySubStateType\", 7);",
									"pm.environment.set(\"entitySourceSystemId\", 1);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "05e529f8-489d-4772-8b5d-a8cfb9fe60c1",
								"exec": [
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(400);",
									"    ",
									"",
									"    pm.expect(pm.response.text()).to.include(\"Frequency Minute should be in range of 00, 15, 30, 45\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"rule\": {\r\n    \"id\": 0,\r\n    \"name\": \"SUpervisory Nudge PWT RM\",\r\n    \"description\": \"RM\",\r\n    \"ruleType\": 1,\r\n\t\"frequencyType\": 2,\r\n    \"entitySourceSystemId\": {{entitySourceSystemId}},\r\n    \"entityStateType\": {{entityStateType}},\r\n    \"entitySubStateType\": {{entitySubStateType}},\r\n     \"ruleFrequencies\": [\r\n      {\r\n        \"id\": 0,\r\n        \"hour\": 10,\r\n        \"minute\": 49\r\n      }\r\n    ],\r\n    \"ruleLineItems\": [\r\n      {\r\n        \"id\": 0,\r\n        \"ruleLineItemType\": 1,\r\n        \"name\": \"Reminder Nudge for RM\",\r\n        \"parentId\": \"0\",\r\n        \"sequence\": 1,\r\n        \"sendToPrimary\": true,\r\n        \"intendedPositiveOutput\": \"string\",\r\n        \"ruleLineItemResults\": [\r\n          {\r\n            \"notificationChannelType\": 2,\r\n            \"notificationMessageTemplateId\": {{notificationMessageTemplateId1}},\r\n            \"isSMSAsFallBack\": false,\r\n            \"notificationMessageTemplateName\": \"string\"\r\n          }\r\n        ]\r\n      }\r\n    ]\r\n  }\r\n}"
						},
						"url": {
							"raw": "{{url}}/api/Rule/Reminder",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"Rule",
								"Reminder"
							]
						}
					},
					"response": []
				},
				{
					"name": "[611] Create Reminder(should not accept invalid entitySubStateType)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "ae4f6a3d-d7b1-4292-959e-0b1545b2163e",
								"exec": [
									"pm.environment.set(\"entityStateType\", 2);",
									"pm.environment.set(\"entitySubStateType\", 0);",
									"pm.environment.set(\"entitySourceSystemId\", 1);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "05e529f8-489d-4772-8b5d-a8cfb9fe60c1",
								"exec": [
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(400);",
									"    ",
									"",
									"    pm.expect(pm.response.text()).to.include(\"EntitySubStateType is invalid\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"rule\": {\r\n    \"id\": 0,\r\n    \"name\": \"SUpervisory Nudge PWT RM\",\r\n    \"description\": \"RM\",\r\n    \"ruleType\": 1,\r\n\t\"frequencyType\": 2,\r\n    \"entitySourceSystemId\": {{entitySourceSystemId}},\r\n    \"entityStateType\": {{entityStateType}},\r\n    \"entitySubStateType\": {{entitySubStateType}},\r\n     \"ruleFrequencies\": [\r\n      {\r\n        \"id\": 0,\r\n        \"hour\": 10,\r\n        \"minute\": 45\r\n      }\r\n    ],\r\n    \"ruleLineItems\": [\r\n      {\r\n        \"id\": 0,\r\n        \"ruleLineItemType\": 1,\r\n        \"name\": \"Reminder Nudge for RM\",\r\n        \"parentId\": \"0\",\r\n        \"sequence\": 1,\r\n        \"sendToPrimary\": true,\r\n        \"intendedPositiveOutput\": \"string\",\r\n        \"ruleLineItemResults\": [\r\n          {\r\n            \"notificationChannelType\": 2,\r\n            \"notificationMessageTemplateId\": {{notificationMessageTemplateId1}},\r\n            \"isSMSAsFallBack\": false,\r\n            \"notificationMessageTemplateName\": \"string\"\r\n          }\r\n        ]\r\n      }\r\n    ]\r\n  }\r\n}"
						},
						"url": {
							"raw": "{{url}}/api/Rule/Reminder",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"Rule",
								"Reminder"
							]
						}
					},
					"response": []
				},
				{
					"name": "[612] Create Reminder(should not accept invalid entityStateType)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "ae4f6a3d-d7b1-4292-959e-0b1545b2163e",
								"exec": [
									"pm.environment.set(\"entityStateType\", 0);",
									"pm.environment.set(\"entitySubStateType\", 1);",
									"pm.environment.set(\"entitySourceSystemId\", 1);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "05e529f8-489d-4772-8b5d-a8cfb9fe60c1",
								"exec": [
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(400);",
									"    ",
									"",
									"    pm.expect(pm.response.text()).to.include(\"EntityStateType is invalid\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"rule\": {\r\n    \"id\": 0,\r\n    \"name\": \"SUpervisory Nudge PWT RM\",\r\n    \"description\": \"RM\",\r\n    \"ruleType\": 1,\r\n\t\"frequencyType\": 2,\r\n    \"entitySourceSystemId\": {{entitySourceSystemId}},\r\n    \"entityStateType\": {{entityStateType}},\r\n    \"entitySubStateType\": {{entitySubStateType}},\r\n     \"ruleFrequencies\": [\r\n      {\r\n        \"id\": 0,\r\n        \"hour\": 10,\r\n        \"minute\": 45\r\n      }\r\n    ],\r\n    \"ruleLineItems\": [\r\n      {\r\n        \"id\": 0,\r\n        \"ruleLineItemType\": 1,\r\n        \"name\": \"Reminder Nudge for RM\",\r\n        \"parentId\": \"0\",\r\n        \"sequence\": 1,\r\n        \"sendToPrimary\": true,\r\n        \"intendedPositiveOutput\": \"string\",\r\n        \"ruleLineItemResults\": [\r\n          {\r\n            \"notificationChannelType\": 2,\r\n            \"notificationMessageTemplateId\": {{notificationMessageTemplateId1}},\r\n            \"isSMSAsFallBack\": false,\r\n            \"notificationMessageTemplateName\": \"string\"\r\n          }\r\n        ]\r\n      }\r\n    ]\r\n  }\r\n}"
						},
						"url": {
							"raw": "{{url}}/api/Rule/Reminder",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"Rule",
								"Reminder"
							]
						}
					},
					"response": []
				},
				{
					"name": "[613] Create Reminder(should not accept invalid entitySourceSystem)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "ae4f6a3d-d7b1-4292-959e-0b1545b2163e",
								"exec": [
									"pm.environment.set(\"entityStateType\", 1);",
									"pm.environment.set(\"entitySubStateType\", 5);",
									"pm.environment.set(\"entitySourceSystemId\", 15);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "05e529f8-489d-4772-8b5d-a8cfb9fe60c1",
								"exec": [
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(400);",
									"    ",
									"",
									"    pm.expect(pm.response.text()).to.include(\"EntitySourceSystem does not exist\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"rule\": {\r\n    \"id\": 0,\r\n    \"name\": \"SUpervisory Nudge PWT RM\",\r\n    \"description\": \"RM\",\r\n    \"ruleType\": 1,\r\n\t\"frequencyType\": 2,\r\n    \"entitySourceSystemId\": {{entitySourceSystemId}},\r\n    \"entityStateType\": {{entityStateType}},\r\n    \"entitySubStateType\": {{entitySubStateType}},\r\n     \"ruleFrequencies\": [\r\n      {\r\n        \"id\": 0,\r\n        \"hour\": 10,\r\n        \"minute\": 45\r\n      }\r\n    ],\r\n    \"ruleLineItems\": [\r\n      {\r\n        \"id\": 0,\r\n        \"ruleLineItemType\": 1,\r\n        \"name\": \"Reminder Nudge for RM\",\r\n        \"parentId\": \"0\",\r\n        \"sequence\": 1,\r\n        \"sendToPrimary\": true,\r\n        \"intendedPositiveOutput\": \"string\",\r\n        \"ruleLineItemResults\": [\r\n          {\r\n            \"notificationChannelType\": 2,\r\n            \"notificationMessageTemplateId\": {{notificationMessageTemplateId1}},\r\n            \"isSMSAsFallBack\": false,\r\n            \"notificationMessageTemplateName\": \"string\"\r\n          }\r\n        ]\r\n      }\r\n    ]\r\n  }\r\n}"
						},
						"url": {
							"raw": "{{url}}/api/Rule/Reminder",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"Rule",
								"Reminder"
							]
						}
					},
					"response": []
				},
				{
					"name": "[614] Create Reminder(should not accept invalid ruleType)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "ae4f6a3d-d7b1-4292-959e-0b1545b2163e",
								"exec": [
									"pm.environment.set(\"entityStateType\", 1);",
									"pm.environment.set(\"entitySubStateType\", 5);",
									"pm.environment.set(\"entitySourceSystemId\", 15);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "05e529f8-489d-4772-8b5d-a8cfb9fe60c1",
								"exec": [
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(400);",
									"    ",
									"",
									"    pm.expect(pm.response.text()).to.include(\"Rule Type is invalid\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"rule\": {\r\n    \"id\": 0,\r\n    \"name\": \"SUpervisory Nudge PWT RM\",\r\n    \"description\": \"RM\",\r\n    \"ruleType\": 0,\r\n\t\"frequencyType\": 2,\r\n    \"entitySourceSystemId\": {{entitySourceSystemId}},\r\n    \"entityStateType\": {{entityStateType}},\r\n    \"entitySubStateType\": {{entitySubStateType}},\r\n     \"ruleFrequencies\": [\r\n      {\r\n        \"id\": 0,\r\n        \"hour\": 10,\r\n        \"minute\": 45\r\n      }\r\n    ],\r\n    \"ruleLineItems\": [\r\n      {\r\n        \"id\": 0,\r\n        \"ruleLineItemType\": 1,\r\n        \"name\": \"Reminder Nudge for RM\",\r\n        \"parentId\": \"0\",\r\n        \"sequence\": 1,\r\n        \"sendToPrimary\": true,\r\n        \"intendedPositiveOutput\": \"string\",\r\n        \"ruleLineItemResults\": [\r\n          {\r\n            \"notificationChannelType\": 2,\r\n            \"notificationMessageTemplateId\": {{notificationMessageTemplateId1}},\r\n            \"isSMSAsFallBack\": false,\r\n            \"notificationMessageTemplateName\": \"string\"\r\n          }\r\n        ]\r\n      }\r\n    ]\r\n  }\r\n}"
						},
						"url": {
							"raw": "{{url}}/api/Rule/Reminder",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"Rule",
								"Reminder"
							]
						}
					},
					"response": []
				},
				{
					"name": "[615] Create Reminder(There Should not be any Nudge Condition forRuleType Time  )",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "ae4f6a3d-d7b1-4292-959e-0b1545b2163e",
								"exec": [
									"pm.environment.set(\"entityStateType\", 1);",
									"pm.environment.set(\"entitySubStateType\", 1);",
									"pm.environment.set(\"entitySourceSystemId\", 1);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "05e529f8-489d-4772-8b5d-a8cfb9fe60c1",
								"exec": [
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(400);",
									"    ",
									"",
									"    pm.expect(pm.response.text()).to.include(\"Rule Type is invalid\");",
									"});",
									"",
									"pm.test(\"Your test name\", function () {",
									"    var jsonData = pm.response.json();",
									"pm.environment.set(\"ruleId\", jsonData.ruleId);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"rule\": {\r\n    \"id\": 0,\r\n    \"name\": \"SUpervisory Nudge PWT RM\",\r\n    \"description\": \"RM\",\r\n    \"ruleType\": 1,\r\n\t\"frequencyType\": 2,\r\n    \"entitySourceSystemId\": {{entitySourceSystemId}},\r\n    \"entityStateType\": {{entityStateType}},\r\n    \"entitySubStateType\": {{entitySubStateType}},\r\n     \"ruleFrequencies\": [\r\n      {\r\n        \"id\": 0,\r\n        \"hour\": 10,\r\n        \"minute\": 45\r\n      }\r\n    ],\r\n    \"ruleLineItems\": [\r\n      {\r\n        \"id\": 0,\r\n        \"ruleLineItemType\": 1,\r\n        \"name\": \"Reminder Nudge for RM\",\r\n        \"parentId\": \"0\",\r\n        \"sequence\": 1,\r\n        \"sendToPrimary\": true,\r\n        \"intendedPositiveOutput\": \"string\",\r\n         \"ruleLineItemConditions\": [\r\n          {\r\n            \"value\": \"2\",\r\n            \"logicalOperatorType\": 1,\r\n            \"sequence\": 1,\r\n            \"ruleCategoryId\": 10,\r\n            \"mathOperatorOnValue\": 1\r\n          }\r\n        ],\r\n        \"ruleLineItemResults\": [\r\n          {\r\n            \"notificationChannelType\": 2,\r\n            \"notificationMessageTemplateId\": {{notificationMessageTemplateId1}},\r\n            \"isSMSAsFallBack\": false,\r\n            \"notificationMessageTemplateName\": \"string\"\r\n          }\r\n        ]\r\n      }\r\n      \r\n    ]\r\n  }\r\n}"
						},
						"url": {
							"raw": "{{url}}/api/Rule/Reminder",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"Rule",
								"Reminder"
							]
						}
					},
					"response": []
				},
				{
					"name": "[0]Delete Rule",
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/api/Rule?ruleId={{ruleId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"Rule"
							],
							"query": [
								{
									"key": "ruleId",
									"value": "{{ruleId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[616] Create Reminder(should not accept EndNudge Type)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "ae4f6a3d-d7b1-4292-959e-0b1545b2163e",
								"exec": [
									"pm.environment.set(\"entityStateType\", 1);",
									"pm.environment.set(\"entitySubStateType\", 5);",
									"pm.environment.set(\"entitySourceSystemId\", 1);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "05e529f8-489d-4772-8b5d-a8cfb9fe60c1",
								"exec": [
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(400);",
									"    ",
									"",
									"    pm.expect(pm.response.text()).to.include(\"Time base Rule should not have a Nudge of type End\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"rule\": {\r\n    \"id\": 0,\r\n    \"name\": \"SUpervisory Nudge PWT RM\",\r\n    \"description\": \"RM\",\r\n    \"ruleType\": 1,\r\n\t\"frequencyType\": 2,\r\n    \"entitySourceSystemId\": {{entitySourceSystemId}},\r\n    \"entityStateType\": {{entityStateType}},\r\n    \"entitySubStateType\": {{entitySubStateType}},\r\n     \"ruleFrequencies\": [\r\n      {\r\n        \"id\": 0,\r\n        \"hour\": 10,\r\n        \"minute\": 45\r\n      }\r\n    ],\r\n    \"ruleLineItems\": [\r\n      {\r\n        \"id\": 0,\r\n        \"ruleLineItemType\": 3,\r\n        \"name\": \"Reminder Nudge for RM\",\r\n        \"parentId\": \"0\",\r\n        \"sequence\": 1,\r\n        \"sendToPrimary\": true,\r\n        \"intendedPositiveOutput\": \"string\",\r\n        \"ruleLineItemResults\": [\r\n          {\r\n            \"notificationChannelType\": 2,\r\n            \"notificationMessageTemplateId\": {{notificationMessageTemplateId1}},\r\n            \"isSMSAsFallBack\": false,\r\n            \"notificationMessageTemplateName\": \"string\"\r\n          }\r\n        ]\r\n      }\r\n    ]\r\n  }\r\n}"
						},
						"url": {
							"raw": "{{url}}/api/Rule/Reminder",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"Rule",
								"Reminder"
							]
						}
					},
					"response": []
				},
				{
					"name": "[617] Create Reminder(should not accept invalid ChannelType =0)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "ae4f6a3d-d7b1-4292-959e-0b1545b2163e",
								"exec": [
									"pm.environment.set(\"entityStateType\", 1);",
									"pm.environment.set(\"entitySubStateType\", 5);",
									"pm.environment.set(\"entitySourceSystemId\", 1);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "05e529f8-489d-4772-8b5d-a8cfb9fe60c1",
								"exec": [
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(400);",
									"    ",
									"",
									"    pm.expect(pm.response.text()).to.include(\"Nudge Result Channel is invalid\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"rule\": {\r\n    \"id\": 0,\r\n    \"name\": \"SUpervisory Nudge PWT RM\",\r\n    \"description\": \"RM\",\r\n    \"ruleType\": 1,\r\n\t\"frequencyType\": 2,\r\n    \"entitySourceSystemId\": {{entitySourceSystemId}},\r\n    \"entityStateType\": {{entityStateType}},\r\n    \"entitySubStateType\": {{entitySubStateType}},\r\n     \"ruleFrequencies\": [\r\n      {\r\n        \"id\": 0,\r\n        \"hour\": 10,\r\n        \"minute\": 45\r\n      }\r\n    ],\r\n    \"ruleLineItems\": [\r\n      {\r\n        \"id\": 0,\r\n        \"ruleLineItemType\": 1,\r\n        \"name\": \"Reminder Nudge for RM\",\r\n        \"parentId\": \"0\",\r\n        \"sequence\": 1,\r\n        \"sendToPrimary\": true,\r\n        \"intendedPositiveOutput\": \"string\",\r\n        \"ruleLineItemResults\": [\r\n          {\r\n            \"notificationChannelType\":0,\r\n            \"notificationMessageTemplateId\": {{notificationMessageTemplateId1}},\r\n            \"isSMSAsFallBack\": false,\r\n            \"notificationMessageTemplateName\": \"string\"\r\n          }\r\n        ]\r\n      }\r\n    ]\r\n  }\r\n}"
						},
						"url": {
							"raw": "{{url}}/api/Rule/Reminder",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"Rule",
								"Reminder"
							]
						}
					},
					"response": []
				},
				{
					"name": "[618] Create Reminder(should not accept invalid ChannelType =10)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "ae4f6a3d-d7b1-4292-959e-0b1545b2163e",
								"exec": [
									"pm.environment.set(\"entityStateType\", 1);",
									"pm.environment.set(\"entitySubStateType\", 5);",
									"pm.environment.set(\"entitySourceSystemId\", 1);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "05e529f8-489d-4772-8b5d-a8cfb9fe60c1",
								"exec": [
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(400);",
									"    ",
									"",
									"    pm.expect(pm.response.text()).to.include(\"'Notification Channel Type' has a range of values which does not include '10'\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"rule\": {\r\n    \"id\": 0,\r\n    \"name\": \"SUpervisory Nudge PWT RM\",\r\n    \"description\": \"RM\",\r\n    \"ruleType\": 1,\r\n\t\"frequencyType\": 2,\r\n    \"entitySourceSystemId\": {{entitySourceSystemId}},\r\n    \"entityStateType\": {{entityStateType}},\r\n    \"entitySubStateType\": {{entitySubStateType}},\r\n     \"ruleFrequencies\": [\r\n      {\r\n        \"id\": 0,\r\n        \"hour\": 10,\r\n        \"minute\": 45\r\n      }\r\n    ],\r\n    \"ruleLineItems\": [\r\n      {\r\n        \"id\": 0,\r\n        \"ruleLineItemType\": 1,\r\n        \"name\": \"Reminder Nudge for RM\",\r\n        \"parentId\": \"0\",\r\n        \"sequence\": 1,\r\n        \"sendToPrimary\": true,\r\n        \"intendedPositiveOutput\": \"string\",\r\n        \"ruleLineItemResults\": [\r\n          {\r\n            \"notificationChannelType\":10,\r\n            \"notificationMessageTemplateId\": {{notificationMessageTemplateId1}},\r\n            \"isSMSAsFallBack\": false,\r\n            \"notificationMessageTemplateName\": \"string\"\r\n          }\r\n        ]\r\n      }\r\n    ]\r\n  }\r\n}"
						},
						"url": {
							"raw": "{{url}}/api/Rule/Reminder",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"Rule",
								"Reminder"
							]
						}
					},
					"response": []
				},
				{
					"name": "[619] Create Reminder(should not accept invalid ChannelType =10)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "ae4f6a3d-d7b1-4292-959e-0b1545b2163e",
								"exec": [
									"pm.environment.set(\"entityStateType\", 1);",
									"pm.environment.set(\"entitySubStateType\", 5);",
									"pm.environment.set(\"entitySourceSystemId\", 1);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "05e529f8-489d-4772-8b5d-a8cfb9fe60c1",
								"exec": [
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(400);",
									"    ",
									"",
									"    pm.expect(pm.response.text()).to.include(\"'Notification Channel Type' has a range of values which does not include '10'\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"rule\": {\r\n    \"id\": 0,\r\n    \"name\": \"SUpervisory Nudge PWT RM\",\r\n    \"description\": \"RM\",\r\n    \"ruleType\": 1,\r\n\t\"frequencyType\": 2,\r\n    \"entitySourceSystemId\": {{entitySourceSystemId}},\r\n    \"entityStateType\": {{entityStateType}},\r\n    \"entitySubStateType\": {{entitySubStateType}},\r\n     \"ruleFrequencies\": [\r\n      {\r\n        \"id\": 0,\r\n        \"hour\": 10,\r\n        \"minute\": 45\r\n      }\r\n    ],\r\n    \"ruleLineItems\": [\r\n      {\r\n        \"id\": 0,\r\n        \"ruleLineItemType\": 1,\r\n        \"name\": \"Reminder Nudge for RM\",\r\n        \"parentId\": \"0\",\r\n        \"sequence\": 1,\r\n        \"sendToPrimary\": true,\r\n        \"intendedPositiveOutput\": \"string\",\r\n        \"ruleLineItemResults\": [\r\n          {\r\n            \"notificationChannelType\":10,\r\n            \"notificationMessageTemplateId\": {{notificationMessageTemplateId1}},\r\n            \"isSMSAsFallBack\": false,\r\n            \"notificationMessageTemplateName\": \"string\"\r\n          }\r\n        ]\r\n      }\r\n    ]\r\n  }\r\n}"
						},
						"url": {
							"raw": "{{url}}/api/Rule/Reminder",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"Rule",
								"Reminder"
							]
						}
					},
					"response": []
				},
				{
					"name": "[620] Create Reminder(should not accept duplicate ruleFrequencies value )",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "ae4f6a3d-d7b1-4292-959e-0b1545b2163e",
								"exec": [
									"pm.environment.set(\"entityStateType\", 1);",
									"pm.environment.set(\"entitySubStateType\", 5);",
									"pm.environment.set(\"entitySourceSystemId\", 1);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "05e529f8-489d-4772-8b5d-a8cfb9fe60c1",
								"exec": [
									"",
									"pm.test(\"Should not accept Duplicate freq. Time\", function () {",
									"    pm.response.to.have.status(400);",
									"",
									"});",
									"",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Rule should not contain duplicate Frequency Time\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"rule\": {\r\n    \"id\": 0,\r\n    \"name\": \"SUpervisory Nudge PWT RM\",\r\n    \"description\": \"RM\",\r\n    \"ruleType\": 1,\r\n\t\"frequencyType\": 2,\r\n    \"entitySourceSystemId\": {{entitySourceSystemId}},\r\n    \"entityStateType\": {{entityStateType}},\r\n    \"entitySubStateType\": {{entitySubStateType}},\r\n     \"ruleFrequencies\": [\r\n      {\r\n        \"id\": 0,\r\n        \"hour\": 10,\r\n        \"minute\": 45\r\n      },\r\n       {\r\n        \"id\": 0,\r\n        \"hour\": 10,\r\n        \"minute\": 45\r\n      }\r\n    ],\r\n    \"ruleLineItems\": [\r\n      {\r\n        \"id\": 0,\r\n        \"ruleLineItemType\": 1,\r\n        \"name\": \"Reminder Nudge for RM\",\r\n        \"parentId\": \"0\",\r\n        \"sequence\": 1,\r\n        \"sendToPrimary\": true,\r\n        \"intendedPositiveOutput\": \"string\",\r\n        \"ruleLineItemResults\": [\r\n          {\r\n            \"notificationChannelType\":2,\r\n            \"notificationMessageTemplateId\": {{notificationMessageTemplateId1}},\r\n            \"isSMSAsFallBack\": false,\r\n            \"notificationMessageTemplateName\": \"string\"\r\n          }\r\n        ]\r\n      }\r\n    ]\r\n  }\r\n}"
						},
						"url": {
							"raw": "{{url}}/api/Rule/Reminder",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"Rule",
								"Reminder"
							]
						}
					},
					"response": []
				},
				{
					"name": "[0]Delete Rule Copy",
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/api/Rule?ruleId={{ruleId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"Rule"
							],
							"query": [
								{
									"key": "ruleId",
									"value": "{{ruleId}}"
								}
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "17171628-0a39-46d2-b4e2-ccdcbccb05c3",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "523f9127-035d-4e3e-b084-0c311b3f66c9",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Supervisory_Nudge_For_PWT",
			"item": [
				{
					"name": "SNP_BM",
					"item": [
						{
							"name": "[B101]Creates Notification message Template in the system",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "46bf39d2-22f4-4f8d-9706-e8de7bd7c13f",
										"exec": [
											"pm.environment.set(\"entitySourceSystemId\", 1);",
											"pm.environment.set(\"languageTypeId\", 1);",
											"pm.environment.set(\"entitySegmentTypeId\", 1);",
											"var random = _.random(100, 1000);",
											"var tempName = \"BM-\";",
											"pm.environment.set(\"TemplateName\", tempName.concat(random));",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "641742d4-90f5-4023-ab8b-503d672e2638",
										"exec": [
											"pm.test(\"[Template Creation] Nudge Template Creation Success\", function () {",
											"     var jsonData = pm.response.json();",
											"    pm.expect(pm.response.code).to.be.oneOf([201,202]);",
											"pm.environment.set(\"notificationMessageTemplateId\", jsonData.notificationMessageTemplateId);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "text/plain, application/json, text/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"{{TemplateName}}\",\r\n  \"entitySourceSystemId\": {{entitySourceSystemId}},\r\n  \"notificationMessageTemplateLineItems\": [\r\n    {\r\n      \"elementName\": \"BMTemplate\",\r\n      \"templateContent\": \"Hi {1}, Please find select details regarding your Branch's recruitment funnel:Following ARDMs have multiple prospects who have submitted their ARF, but their Exams are yet to be scheduled,{2}Following ARDMs have multiple prospects who have completed their NAT, but are yet to submit their ARF,{3}Following ARDMs have multiple prospects who haven’t completed their NAT or their disposition in Super Express has not been updated,{4}Request you to kindly follow up with your ARDMs.Please reply Yes to acknowledge that you have spoken to your ARDMs on their recruitment funnel\",\r\n      \"languageTypeId\": {{languageTypeId}},\r\n      \"entitySegmentTypeId\": {{entitySegmentTypeId}},\r\n      \"isDefault\": true,\r\n      \"isApproved\": true,\r\n      \"notificationMessageTemplateConfigurationMappings\": [\r\n        {\r\n          \"placeholderKey\": 1,\r\n          \"notificationMessageTemplatePlaceHolderTypeId\": 1,\r\n          \"value\": \"string\"\r\n        },\r\n        {\r\n          \"placeholderKey\": 2,\r\n          \"notificationMessageTemplatePlaceHolderTypeId\": 9,\r\n          \"value\": \"string\"\r\n        },\r\n        {\r\n          \"placeholderKey\": 3,\r\n          \"notificationMessageTemplatePlaceHolderTypeId\": 10,\r\n          \"value\": \"string\"\r\n        },\r\n        {\r\n          \"placeholderKey\": 4,\r\n          \"notificationMessageTemplatePlaceHolderTypeId\": 3,\r\n          \"value\": \"string\"\r\n        }\r\n      ]\r\n    }\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{url}}/api/NotificationMessageTemplate",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"NotificationMessageTemplate"
									]
								}
							},
							"response": []
						},
						{
							"name": "[B102]Search for Notification message templates based on filter parameters",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "52ba0632-8815-4c5e-9f7d-ea9e44847740",
										"exec": [
											"pm.test(\"[Fetching Nudge Template] Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"[Fetching Nudge Template] Verifying Template ID\", function () {",
											"    var jsonData = pm.response.json();",
											"       pm.expect(jsonData.notificationMessageTemplates[0].id).to.eql(pm.variables.get(\"notificationMessageTemplateId\"));",
											"});",
											"pm.test(\"[Fetching Nudge Template] Verifying Template Name\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.notificationMessageTemplates[0].name).to.eql(pm.variables.get(\"TemplateName\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "text/plain, application/json, text/json"
									}
								],
								"url": {
									"raw": "{{url}}/api/NotificationMessageTemplate/Search?entitySourceSystemId={{entitySourceSystemId}}&templateName={{TemplateName}}&templateContent={{TemplateContent_BM}}&pageIndex=1&pageSize=20&sortBy=0&sortDirection=2",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"NotificationMessageTemplate",
										"Search"
									],
									"query": [
										{
											"key": "entitySourceSystemId",
											"value": "{{entitySourceSystemId}}"
										},
										{
											"key": "templateName",
											"value": "{{TemplateName}}"
										},
										{
											"key": "templateContent",
											"value": "{{TemplateContent_BM}}"
										},
										{
											"key": "pageIndex",
											"value": "1"
										},
										{
											"key": "pageSize",
											"value": "20"
										},
										{
											"key": "sortBy",
											"value": "0"
										},
										{
											"key": "sortDirection",
											"value": "2"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[B103]Creates a rule in system",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "ec54ab84-b015-4adc-9a0b-1c0e622d4a78",
										"exec": [
											"pm.environment.set(\"entitySourceSystemId\",1);",
											"pm.environment.set(\"entityStateType\",2);",
											"pm.environment.set(\"entitySubStateType\",6);",
											"pm.environment.set(\"FrequencyType\",2);",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "a9e7cc53-602e-47d6-b57b-892d4934f9b3",
										"exec": [
											"",
											"pm.test(\"[Rule Creation for BM] Status code is 200/201\", function () {",
											"    pm.response.to.have.status(201);",
											"     var jsonData = pm.response.json();",
											"     pm.environment.set(\"ruleId\", jsonData.ruleId);",
											"     ",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "text/plain, application/json, text/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"rule\": {\n        \"name\": \"Supervisory_Nudge_PWT\",\n        \"description\": \"Supervisory_Nudge_PWT\",\n        \"ruleType\": 1,\n        \"frequencyType\": {{FrequencyType}},\n        \"entitySourceSystemId\": {{entitySourceSystemId}},\n        \"entityStateType\": {{entityStateType}},\n        \"entitySubStateType\": {{entitySubStateType}},\n        \"ruleFrequencies\": [\n            {\n                \"hour\": 10,\n                \"minute\": 0\n            }\n        ],\n        \"ruleLineItems\": [\n            {\n        \n                \"ruleLineItemType\": 1,\n                \"name\": \"TestItem\",\n                \"parentId\": null,\n                \"sequence\": 1,\n                \"sendToPrimary\": true,\n                \"intendedPositiveOutput\": \"1234\",\n                \"ruleLineItemConditions\": [],\n                \"ruleLineItemResults\": [\n                    {\n                        \"notificationChannelType\": 2,\n                        \"notificationMessageTemplateId\": {{notificationMessageTemplateId}},\n                        \"isSMSAsFallBack\": false,\n                        \"notificationMessageTemplateName\": \"s\"\n                    }\n                ]\n            }\n        ]\n    }\n}"
								},
								"url": {
									"raw": "{{url}}/api/Rule",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"Rule"
									]
								}
							},
							"response": []
						},
						{
							"name": "[B104]Reads a rule from system",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "70d4afbb-2d00-4ed8-9903-1dabe6f6add4",
										"exec": [
											"pm.test(\"[GET Rule by RuleId] Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.rule.ruleLineItems[0].id).to.exist;",
											"    pm.environment.set(\"ruleLineItemId\",jsonData.rule.ruleLineItems[0].id);",
											"});",
											"",
											"",
											"pm.test(\"[GET Rule by RuleId] Checking Rule created, By ID\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.rule.id).to.eql(pm.variables.get(\"ruleId\"));",
											"});",
											"",
											"pm.test(\"[GET Rule by RuleId] Checking Rule created, By Name\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.rule.name).to.eql(pm.variables.get(\"RuleName\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "text/plain, application/json, text/json"
									}
								],
								"url": {
									"raw": "{{url}}/api/Rule?ruleId={{ruleId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"Rule"
									],
									"query": [
										{
											"key": "ruleId",
											"value": "{{ruleId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[B105]Creates entity in the system",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "d6556205-b06e-4c36-a21b-91d1b047853d",
										"exec": [
											"var milliseconds = new Date().getTime();",
											"var codeSeed = \"BM-\";",
											"pm.environment.set(\"entityCode\", codeSeed.concat(milliseconds));",
											"",
											"var random = _.random(100, 1000);",
											"var Name = \"BM-\";",
											"pm.environment.set(\"EntityName\", Name.concat(random));",
											"",
											"var mobileNum = \"9767982499\";",
											"pm.environment.set(\"mobileNumber\", mobileNum);",
											"",
											"",
											"var codeSeed = \"RM-\";",
											"pm.environment.set(\"secondaryEntityCode\", codeSeed.concat(milliseconds));",
											"",
											"var random = _.random(100, 1000);",
											"var RmName = \"RM-\";",
											"pm.environment.set(\"SecondaryName\", RmName.concat(random));",
											"",
											"var SecMobileNum = \"9764646230\";",
											"pm.environment.set(\"secondaryMobileNumber\", SecMobileNum);",
											"",
											"var moment = require('moment');",
											"pm.environment.set(\"timestamp\", moment().format(\"YYYY-MM-DDThh:mm:ss.SSS\"))   ;",
											"console.log(pm.variables.get(\"timestamp\"));",
											"",
											"",
											"var moment = require('moment');",
											"pm.environment.set(\"pickUpTime\", moment().format(\"YYYY-MM-DDThh:mm:ss.SSS\")) ;",
											"console.log(pm.variables.get(\"pickUpTime\"));",
											"",
											"var CF1 = [\"ARDM-1 (12)\",\"ARDM-2 (23)\",\"ARDM-3 (13)\",\"ARDM-4 (14)\",\"ARDM-5 (15)\",\"ARDM-6 (16)\",\"ARDM-7 (17)\",\"ARDM-8 (18)\",\"ARDM-9 (19)\",\"ARDM-10 (20)\"];",
											"pm.environment.set(\"CustomField1\", CF1);",
											"",
											"var CF2 = [\"ARDM-1 (17)\",\"ARDM-2 (32)\",\"ARDM-3 (13)\",\"ARDM-4 (78)\",\"ARDM-5 (15)\",\"ARDM-6 (16)\",\"ARDM-7 (17)\",\"ARDM-8 (18)\",\"ARDM-9 (29)\",\"ARDM-10 (20)\"];",
											"pm.environment.set(\"CustomField2\", CF2);",
											"",
											"var entityStateVal = [\"ARDM-1 (10)\",\"ARDM-2 (13)\",\"ARDM-3 (13)\",\"ARDM-4 (34)\",\"ARDM-5 (15)\",\"ARDM-6 (26)\",\"ARDM-7 (17)\",\"ARDM-8 (28)\",\"ARDM-9 (19)\",\"ARDM-10 (30)\"];",
											"pm.environment.set(\"entityStateValue\", entityStateVal);",
											"",
											"/*var CF1 = [\"ARDM-1 (12)\",\"ARDM-2 (23)\"]",
											"pm.environment.set(\"CustomField1\", CF1);",
											"",
											"var CF2 = [\"ARDM-1 (13)\",\"ARDM-2 (23)\"]",
											"pm.environment.set(\"CustomField2\", CF2);",
											"",
											"var EV = [\"ARDM-1 (14)\",\"ARDM-2 (23)\"]",
											"pm.environment.set(\"entityStateValue\", EV);*/",
											"",
											"pm.environment.set(\"entitySegmentTypeId\", 2);",
											"pm.environment.set(\"languageTypeId\", 1);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "24b0d22f-2dda-4232-83be-c946e1c32b6a",
										"exec": [
											"pm.test(\"[Creating Entity] Entity created sucessfully\", function () {",
											"    pm.response.to.have.status(201);",
											"   ",
											"    let EntityJSON = pm.response.json();",
											"    pm.expect(EntityJSON.entityId).to.exist;",
											"    pm.expect(EntityJSON.isSaved).to.equal(true);",
											"     pm.environment.set(\"entityId\", EntityJSON.entityId);",
											"    console.log(EntityJSON);",
											"});",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "text/plain, application/json, text/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"entityCode\": \"{{entityCode}}\",\r\n  \"name\": \"{{EntityName}}\",\r\n  \"mobileNumber\": {{mobileNumber}},\r\n  \"entityCreationDate\": \"{{timestamp}}\",\r\n  \"entitySourceSystemId\": {{entitySourceSystemId}},\r\n  \"entityStateDate\": \"{{pickUpTime}}\",\r\n  \"entityStateType\": {{entityStateType}},\r\n  \"entitySubStateType\":{{entitySubStateType}},\r\n  \"entityStateValue\": \" {{entityStateValue}}\",\r\n  \"secondaryEntityCode\": \"{{secondaryEntityCode}}\",\r\n  \"secondaryName\": \"{{secondaryName}}\",\r\n  \"secondaryMobileNumber\": {{secondaryMobileNumber}},\r\n  \"customField1\":\"{{CustomField1}}\",\r\n  \"customField2\":\"{{CustomField2}}\",\r\n  \"customFieldUrl\":\"https://www.w3schools.com/xml/xpath_nodes.asp\",\r\n  \"entitySegmentTypeId\": {{entitySegmentTypeId}},\r\n  \"languageTypeId\": {{languageTypeId}}\r\n}"
								},
								"url": {
									"raw": "{{url}}/api/Entity",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"Entity"
									]
								}
							},
							"response": []
						},
						{
							"name": "[B106]Read Entity by EntityCodes",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5cb86b42-c3fb-4abb-9fe3-e2f370d6dcff",
										"exec": [
											"pm.test(\"[Reading Entity] Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"[Reading Entity] verify mobile number\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.mobileNumber).to.eql(pm.variables.get(\"mobileNumber\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "text/plain, application/json, text/json"
									}
								],
								"url": {
									"raw": "{{url}}/api/Entity/EntityCode?entityCode={{entityCode}}&entitySourceSystemId={{entitySourceSystemId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"Entity",
										"EntityCode"
									],
									"query": [
										{
											"key": "entityCode",
											"value": "{{entityCode}}"
										},
										{
											"key": "entitySourceSystemId",
											"value": "{{entitySourceSystemId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[B107]Trigger RuleExecution for weekly",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "24ac8dfd-18cf-476f-8c08-1bd93aad7e83",
										"exec": [
											"pm.test(\"[Rule Execution] Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"[Rule Execution] checking isexecuted field\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.eql(true);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c946b38f-136e-4e65-b49e-4c71372452f4",
										"exec": [
											"pm.environment.set(\"JobId\", 6);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/api/RuleExecution?ruleId={{ruleId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"RuleExecution"
									],
									"query": [
										{
											"key": "ruleId",
											"value": "{{ruleId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[B108]TriggerExecuteNotificationMessage",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "24ac8dfd-18cf-476f-8c08-1bd93aad7e83",
										"exec": [
											"pm.test(\"[Execution of Notification message] Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"[Execution of Notification message] checking isexecuted field\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.isExecuted).to.eql(true);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b2c830de-b7a1-49db-aa92-78a16ba229c3",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/api/JobExecution?jobId=15",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"JobExecution"
									],
									"query": [
										{
											"key": "jobId",
											"value": "15"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[B109]SearchMessageSentViaRule",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "24ac8dfd-18cf-476f-8c08-1bd93aad7e83",
										"exec": [
											"pm.test(\"[search msg sent via rule] Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"[search msg sent via rule] To check notifications exist\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.notifications).to.exist;",
											"    /*var size1 = jsonData.notifications.length;",
											"    console.log(\"Size: \",size1);*/",
											"    ",
											"    var array=JSON.parse(pm.environment.get(\"ruleLineItemId\"));",
											"    ",
											"     pm.expect((jsonData.notifications[0].ruleLineItemId)).to.eql(array);",
											"",
											"   // pm.environment.set(\"TotalNudgesenttoentity\",size1);",
											"  ",
											"   // console.log( \"[PRE-NAT]first nudge of entity is associated with  rulelineitemId : \"+pm.variables.get(\"ruleLineItemId\") );",
											"",
											"    ",
											"",
											"",
											"});",
											"pm.test(\"Nudge delivery Verification\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.notifications[0].messageContent).to.eql(\"\");",
											"    pm.expect(jsonData.notifications[0].mobileNumber).to.eql(\"\");",
											"    ",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/api/NotificationMessageProcessor/SearchMessageSentViaRule?entityId={{entityId}}&ruleId={{ruleId}}&ruleLineItemId={{ruleLineItemId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"NotificationMessageProcessor",
										"SearchMessageSentViaRule"
									],
									"query": [
										{
											"key": "entityId",
											"value": "{{entityId}}"
										},
										{
											"key": "ruleId",
											"value": "{{ruleId}}"
										},
										{
											"key": "ruleLineItemId",
											"value": "{{ruleLineItemId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[B110]read template",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5f00d9c5-a80b-4f94-9b62-c4c9847be638",
										"exec": [
											"\r",
											"pm.test(\"Read Template\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"}); "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/api/NotificationMessageTemplate/Search?templateName={{TemplateName}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"NotificationMessageTemplate",
										"Search"
									],
									"query": [
										{
											"key": "templateName",
											"value": "{{TemplateName}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[B111]notificationMessageProcessorHistory",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "24ac8dfd-18cf-476f-8c08-1bd93aad7e83",
										"exec": [
											"pm.test(\"status code 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// pm.test(\"extract bitly url\",function(){",
											"",
											"// var string = pm.variables.get(\"messageContent\");",
											"// var bitly = string.match(/\\bhttps?:\\/\\/\\S+/gi);",
											"// pm.environment.set(\"bitly\",bitly);",
											"// console.log(bitly);",
											" ",
											"",
											"// });",
											"",
											"",
											"",
											"/*pm.test(\"[After Nudge Sent] checking mobile number in message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.notificationMessageProcessorHistoryRecords[0].mobileNumber).to.eql(pm.environment.get(\"mobileNumberNAT\"));",
											"});",
											"",
											"    ",
											"pm.test(\"[After Nudge Sent] checking entity name in message content\", function () {",
											"    pm.expect(jsonData.).to.include(\"{{EntityName}}\");",
											"});",
											"",
											"pm.test(\"[After Nudge Sent] checking  customfield1 value in message content\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"{{CustomField1}}\");",
											"});",
											"",
											"pm.test(\"[After Nudge Sent] checking  customfield2 value in message content\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"{{CustomField2}}\");",
											"});",
											"",
											"pm.test(\"[After Nudge Sent] checking  entityStateValue value in message content\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"{{entityStateValue}}\");",
											"});*/"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/api/NotificationMessageProcessedHistory",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"NotificationMessageProcessedHistory"
									]
								}
							},
							"response": []
						},
						{
							"name": "[B112]Deletes a rule from system",
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "text/plain, application/json, text/json"
									}
								],
								"url": {
									"raw": "{{url}}/api/Rule?ruleId={{ruleId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"Rule"
									],
									"query": [
										{
											"key": "ruleId",
											"value": "{{ruleId}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "SNP_RM",
					"item": [
						{
							"name": "[R101]Creates Template(1) Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4ce724b8-9589-4ba0-b1b3-935d6e6e46e0",
										"exec": [
											"",
											" var jsonData = pm.response.json();",
											" ",
											"pm.environment.set(\"notificationMessageTemplateId1\", jsonData.notificationMessageTemplateId);",
											"  ",
											"",
											"pm.test(\"Successful POST request Test\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([201,202]);",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "9b8b754b-1026-4dd1-a35c-a14f2318cc64",
										"exec": [
											"var random = _.random(100, 1000);",
											"",
											"",
											"var codeSeed = \"Temp-\";",
											"pm.environment.set(\"TemplateName\", codeSeed.concat(random));",
											"",
											"",
											"pm.environment.set(\"entitySegmentTypeId\", 1);",
											"pm.environment.set(\"languageTypeId\", 1);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "text/plain, application/json, text/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n            \"name\": \"{{TemplateName}}\",\n            \"entitySourceSystemId\": {{entitySourceSystemId}},\n            \"isActive\": true,\n            \"notificationMessageTemplateLineItems\": [\n                {\n                    \"elementName\": \"English_Default\",\n                    \"templateContent\": \"Hi {1} Please find select details regarding your Region’s recruitment funnel: Following BMs have multiple prospects who have submitted their ARF, but their Exams are yet to be scheduled,{2} Following BMs have multiple prospects who have completed their NAT, but are yet to submit their ARF,{3}Following BMs have multiple prospects who haven’t completed their NAT or their disposition in Super Express has not been updated, {4} Request you to kindly follow up with your BMs. Please reply Yes to acknowledge that you have spoken to your Branch Manager on their recruitment funnel.\",\n                    \"languageTypeId\": 1,\n                    \"entitySegmentTypeId\": 1,\n                    \"isDefault\":true,\n                    \"notificationMessageTemplateConfigurationMappings\": [\n                        {\n                            \"placeholderKey\": 1,\n                            \"notificationMessageTemplatePlaceHolderTypeId\": 1,\n                            \"value\": \"string\"\n                        },\n                        {\n                            \"placeholderKey\": 2,\n                            \"notificationMessageTemplatePlaceHolderTypeId\": 3,\n                            \"value\": \"https://www.google.com/\"\n                        },\n                        {\n                            \"placeholderKey\": 3,\n                            \"notificationMessageTemplatePlaceHolderTypeId\": 9,\n                            \"value\": \"string\"\n                        },\n                        {\n                            \"placeholderKey\": 4,\n                            \"notificationMessageTemplatePlaceHolderTypeId\": 10,\n                            \"value\": \"string\"\n                        }\n                    ]\n                }\n               \n            ]\n    \n}"
								},
								"url": {
									"raw": "{{url}}/api/NotificationMessageTemplate",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"NotificationMessageTemplate"
									]
								}
							},
							"response": []
						},
						{
							"name": "[R102]read notification msg template  Copy",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/api/NotificationMessageTemplate/Search?templateName={{TemplateName}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"NotificationMessageTemplate",
										"Search"
									],
									"query": [
										{
											"key": "templateName",
											"value": "{{TemplateName}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[R103]Create Rule",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "ae4f6a3d-d7b1-4292-959e-0b1545b2163e",
										"exec": [
											"pm.environment.set(\"entityStateType\", 2);",
											"pm.environment.set(\"entitySubStateType\", 7);",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "05e529f8-489d-4772-8b5d-a8cfb9fe60c1",
										"exec": [
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(201);",
											"     var jsonData = pm.response.json();",
											"     pm.environment.set(\"ruleId\", jsonData.ruleId);",
											"     ",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"rule\": {\r\n    \"id\": 0,\r\n    \"name\": \"SUpervisory Nudge PWT RM\",\r\n    \"description\": \"RM\",\r\n    \"ruleType\": 1,\r\n    \"frequencyType\": 2,\r\n    \"entitySourceSystemId\": {{entitySourceSystemId}},\r\n    \"entityStateType\": {{entityStateType}},\r\n    \"entitySubStateType\": {{entitySubStateType}},\r\n    \"ruleFrequencies\": [\r\n      {\r\n        \"id\": 0,\r\n        \"hour\": 0,\r\n        \"minute\": 15\r\n      }\r\n    ],\r\n    \"ruleLineItems\": [\r\n      {\r\n        \"id\": 0,\r\n        \"ruleLineItemType\": 1,\r\n        \"name\": \"Reminder Nudge for RM\",\r\n        \"parentId\": \"0\",\r\n        \"sequence\": 1,\r\n        \"sendToPrimary\": true,\r\n        \"intendedPositiveOutput\": \"string\",\r\n        \"ruleLineItemResults\": [\r\n          {\r\n            \"notificationChannelType\": 2,\r\n            \"notificationMessageTemplateId\": {{notificationMessageTemplateId1}},\r\n            \"isSMSAsFallBack\": false,\r\n            \"notificationMessageTemplateName\": \"string\"\r\n          }\r\n        ]\r\n      }\r\n    ]\r\n  }\r\n}"
								},
								"url": {
									"raw": "{{url}}/api/Rule/Reminder",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"Rule",
										"Reminder"
									]
								}
							},
							"response": []
						},
						{
							"name": "[R104]read Rule By Rule ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b21dfda3-5d01-4762-bed6-681e39e637c4",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Your test name\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.rule.ruleLineItems[0].id).to.exist;",
											"    pm.environment.set(\"ruleLineItemId\",jsonData.rule.ruleLineItems[0].id);",
											"    var size = jsonData.rule.ruleLineItems.length;",
											"    pm.environment.set(\"totalrulelineitems\",size-1);",
											"",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/api/Rule?ruleId={{ruleId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"Rule"
									],
									"query": [
										{
											"key": "ruleId",
											"value": "{{ruleId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[R105]create entity",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b45ca225-09f2-4fd4-a05e-4c3d13a6dbf0",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"   ",
											"    let EntityJSON = pm.response.json();",
											"    pm.expect(EntityJSON.entityId).to.exist;",
											"    pm.expect(EntityJSON.isSaved).to.equal(true);",
											"     pm.environment.set(\"entityId\", EntityJSON.entityId);",
											"    console.log(EntityJSON);",
											"});",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "0e9b9ca9-9c49-46e8-ac8c-768fb21ce4b8",
										"exec": [
											"var milliseconds = new Date().getTime();",
											"var codeSeed = \"Auto-\";",
											"pm.environment.set(\"entityCode\", codeSeed.concat(milliseconds));",
											"",
											"",
											"var codeSeed = \"Auto2nd-\";",
											"pm.environment.set(\"secondaryEntityCode\", codeSeed.concat(milliseconds));",
											"",
											"var moment = require('moment');",
											"pm.environment.set(\"timestamp\", moment().format(\"YYYY-MM-DDThh:mm:ss.SSS\"))   ;",
											"console.log(pm.variables.get(\"timestamp\"));",
											"",
											"",
											"var moment = require('moment');",
											"pm.environment.set(\"pickUpTime\", moment().subtract(2, 'days').format(\"YYYY-MM-DDThh:mm:ss.SSS\")) ;",
											"console.log(pm.variables.get(\"pickUpTime\"));",
											"",
											"// let ran =  _.random(1111111111, 9999999999);",
											"// pm.environment.set(\"mobileNumberNAT\",ran);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": 0,\r\n  \"entityCode\": \"{{entityCode}}\",\r\n  \"name\": \"PreNAT-{{name}}\",\r\n  \"mobileNumber\": {{mobileNumberNAT}},\r\n  \"entityCreationDate\": \"{{timestamp}}\",\r\n  \"entitySourceSystemId\": {{entitySourceSystemId}},\r\n  \"entityStateDate\": \"{{pickUpTime}}\",\r\n  \"entityStateType\": {{entityStateType}},\r\n  \"entitySubStateType\":{{entitySubStateType}},\r\n  \"entityStateValue\": \" {{entityStateValue}} \",\r\n  \"secondaryEntityCode\": \"{{secondaryEntityCode}}\",\r\n  \"secondaryName\": \"{{secondaryName}}\",\r\n  \"secondaryMobileNumber\": {{secondaryMobileNumber}},\r\n  \"customField1\":\"location-pune\",\r\n  \"customField2\":\"state-MH\",\r\n  \"customFieldUrl\":\"https://www.w3schools.com/xml/xpath_nodes.asp\",\r\n  \"entitySegmentTypeId\": {{entitySegmentTypeId}},\r\n  \"languageTypeId\": {{languageTypeId}}\r\n}\r\n"
								},
								"url": {
									"raw": "{{url}}/api/Entity",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"Entity"
									]
								}
							},
							"response": []
						},
						{
							"name": "[R106]read entity by entityId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "24ac8dfd-18cf-476f-8c08-1bd93aad7e83",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"verify mobile number\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.mobileNumber).to.eql(pm.variables.get(\"mobileNumberNAT\"));",
											"    pm.environment.set(\"MobileNuber\",jsonData.mobileNumber);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/api/Entity?entityId={{entityId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"Entity"
									],
									"query": [
										{
											"key": "entityId",
											"value": "{{entityId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[R107]Trigger RuleExecuteEvent",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "24ac8dfd-18cf-476f-8c08-1bd93aad7e83",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"is Rule Executed\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.eql(true);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/api/RuleExecution?ruleId={{ruleId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"RuleExecution"
									],
									"query": [
										{
											"key": "ruleId",
											"value": "{{ruleId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[R108]TriggerExecuteNotificationMessage",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "24ac8dfd-18cf-476f-8c08-1bd93aad7e83",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Your test name\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.isExecuted).to.eql(true);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/api/JobExecution?jobId=15",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"JobExecution"
									],
									"query": [
										{
											"key": "jobId",
											"value": "15"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[R109] SearchMessageSentViaRule (count total nudge to entity)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "24ac8dfd-18cf-476f-8c08-1bd93aad7e83",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"to check notifications exist\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.notifications).to.exist;",
											"    var size1 = jsonData.notifications.length;",
											"    console.log( \"total nudges sent to entity : \"+size1);",
											"     ",
											"    pm.environment.set(\"TotalNudgesenttoentity\",size1);",
											"    pm.expect(pm.variables.get(\"TotalNudgesenttoentity\")).to.eql(1);",
											"",
											"    ",
											"    pm.test(\"ruleLineItemId\", function () {",
											"     for ( var i=0;i<pm.variables.get(\"TotalNudgesenttoentity\");i++){",
											"",
											"   if((jsonData.notifications[i].ruleLineItemId)==(pm.environment.get(\"ruleLineItemId\"))){",
											"  ",
											"    console.log( \"[PRE-NAT]last nudge of entity is associated with  rulelineitemId : \"+pm.variables.get(\"ruleLineItemId\") );",
											"",
											"}",
											"    }",
											"   ",
											"    ",
											"    ",
											"    });",
											"    ",
											"    ",
											"",
											"",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/api/NotificationMessageProcessor/SearchMessageSentViaRule?entityId={{entityId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"NotificationMessageProcessor",
										"SearchMessageSentViaRule"
									],
									"query": [
										{
											"key": "entityId",
											"value": "{{entityId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[R110]notificationMessageProcessorHistory",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "24ac8dfd-18cf-476f-8c08-1bd93aad7e83",
										"exec": [
											"pm.test(\"status code 200\", function () {",
											"    pm.response.to.have.status(200);",
											"    ",
											"",
											"    ",
											"});",
											"",
											"pm.test(\"extract message\", function () {",
											"    ",
											"    console.log(\"Nudge Details:\");",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.notificationMessageProcessorHistoryRecords).to.exist;",
											"    var size = jsonData.notificationMessageProcessorHistoryRecords.length;",
											"    pm.environment.set(\"messageContent\",jsonData.notificationMessageProcessorHistoryRecords[0].messageContent);",
											"    ",
											"    var count=0;",
											"     for ( var i=0;i<size;i++){",
											"   if((jsonData.notificationMessageProcessorHistoryRecords[i].mobileNumber)==(pm.environment.get(\"MobileNuber\"))){",
											"  ",
											"   count++;",
											"   ",
											"pm.environment.set(\"TotalNudgesenttoMobilenum\",count );",
											"   ",
											"// pm.environment.set(\"messageContent\",jsonData.notificationMessageProcessorHistoryRecords[0].messageContent);",
											"",
											"pm.environment.set(\"NudgeReceivedVia_NotificationChannelType\",jsonData.notificationMessageProcessorHistoryRecords[i].notificationChannelTypeId);",
											"console.log(\"nudgeNudgeReceivedVia_NotificationChannelType :\" +pm.variables.get(\"NudgeReceivedVia_NotificationChannelType\"));",
											"",
											"}",
											"   ",
											"    }",
											"    console.log(\"Number of nudges sent to mobile num  : \"+pm.variables.get(\"TotalNudgesenttoMobilenum\"));",
											"",
											"});",
											"",
											"// pm.test(\"extract bitly url\",function(){",
											"",
											"// var string = pm.variables.get(\"messageContent\");",
											"// var bitly = string.match(/\\bhttps?:\\/\\/\\S+/gi);",
											"// pm.environment.set(\"bitly\",bitly);",
											"// console.log(bitly);",
											" ",
											"",
											"// });",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/api/NotificationMessageProcessedHistory",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"NotificationMessageProcessedHistory"
									]
								}
							},
							"response": []
						},
						{
							"name": "[R111]Delete Rule Copy",
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/api/Rule?ruleId={{ruleId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"Rule"
									],
									"query": [
										{
											"key": "ruleId",
											"value": "{{ruleId}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "SNP_ZM_E2E ",
					"item": [
						{
							"name": "[Z101]Create Nudge Template for ZM",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f2f90503-abb3-49b5-9a02-0636b58a8c49",
										"exec": [
											"pm.test(\"Successful POST request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([201,202]);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "8305edc8-dae6-4bc9-910c-88ee422fc4eb",
										"exec": [
											"var random = _.random(100, 1000);",
											"var tempName = \"ZM-\";",
											"pm.environment.set(\"TemplateName\", tempName.concat(random));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"{{TemplateName}}\",\n    \"entitySourceSystemId\": 1,\n    \"notificationMessageTemplateLineItems\": [\n        {\n            \"elementName\": \"Template_ZM01\",\n            \"templateContent\": \"Hi {1} Please find select details regarding your Zone’s recruitment funnel: Following RMs have multiple prospects who have submitted their ARF, but their Exams are yet to be scheduled, {2} Following RMs have multiple prospects who have completed their NAT, but are yet to submit their ARF, {3} Following RMs have multiple prospects who haven’t completed their NAT or their disposition in Super Express has not been updated, {4} Request you to kindly follow up with your BMs. Please reply Yes to acknowledge that you have spoken to your Branch Manager on their recruitment funnel.\",\n            \"languageTypeId\": 1,\n            \"entitySegmentTypeId\": 1,\n            \"isDefault\": true,\n            \"notificationMessageTemplateConfigurationMappings\": [\n                {\n                    \"placeholderKey\": 1,\n                    \"notificationMessageTemplatePlaceHolderTypeId\": 1,\n                    \"value\": \"string\"\n                },\n                {\n                    \"placeholderKey\": 2,\n                    \"notificationMessageTemplatePlaceHolderTypeId\": 9,\n                    \"value\": \"string\"\n                },\n                {\n                    \"placeholderKey\": 3,\n                    \"notificationMessageTemplatePlaceHolderTypeId\": 10,\n                    \"value\": \"string\"\n                },\n                {\n                    \"placeholderKey\": 4,\n                    \"notificationMessageTemplatePlaceHolderTypeId\": 3,\n                    \"value\": \"string\"\n                }\n            ]\n        }\n    ]\n}"
								},
								"url": {
									"raw": "{{url}}/api/NotificationMessageTemplate",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"NotificationMessageTemplate"
									]
								}
							},
							"response": []
						},
						{
							"name": "[Z102]Fetching template details configured for ZM",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5d12b5b9-13b1-4490-ac1b-191514580dcb",
										"exec": [
											"pm.test(\"[ZM template creation]Status code is: 200 OK\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/api/NotificationMessageTemplate/Search?TemplateName={{TemplateName}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"NotificationMessageTemplate",
										"Search"
									],
									"query": [
										{
											"key": "TemplateName",
											"value": "{{TemplateName}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[Z103]Create rule for ZM",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9b7b9e2e-8674-4d11-b9c2-de3b5c25dc3f",
										"exec": [
											"",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"     var jsonData = pm.response.json();",
											"     pm.environment.set(\"ruleId\", jsonData.ruleId);",
											"     ",
											"});",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e9f50de3-c2ed-4ae5-88af-5fa1255fd65b",
										"exec": [
											"",
											"pm.environment.set(\"entityStateType\",2);",
											"pm.environment.set(\"entitySubStateType\",8);",
											"",
											"var random = _.random(100, 1000);",
											"var ruleName = \"ZM_Rule-\";",
											"pm.environment.set(\"RuleName\", ruleName.concat(random));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"rule\": {\r\n   \r\n    \"name\": \"{{RuleName}}\",\r\n    \"description\":\"ZM rule\" ,\r\n    \"ruleType\": 1,\r\n    \"frequencyType\": 4,\r\n    \"entitySourceSystemId\": {{entitySourceSystemId}},\r\n    \"entityStateType\": {{entityStateType}},\r\n    \"entitySubStateType\": {{entityStateType}},\r\n    \"ruleFrequencies\": [\r\n      {\r\n    \r\n        \"hour\": 10,\r\n        \"minute\": 0\r\n      }\r\n    ],\r\n    \"ruleLineItems\": [\r\n      {\r\n        \"id\": 0,\r\n        \"ruleLineItemType\": 1,\r\n        \"name\": \"ZM_Nudge1\",\r\n        \"parentId\": \"0\",\r\n        \"sequence\": 1,\r\n        \"sendToPrimary\": true,\r\n        \"intendedPositiveOutput\": \"Nudge 1 to ZM\",\r\n        \"ruleLineItemResults\": [\r\n          {\r\n            \"notificationChannelType\": 2,\r\n            \"notificationMessageTemplateId\": {{notificationMessageTemplateId}},\r\n            \"isSMSAsFallBack\": false,\r\n            \"notificationMessageTemplateName\": \"{{TemplateName}}\"\r\n          }\r\n        ]\r\n      }\r\n    ]\r\n  }\r\n}"
								},
								"url": {
									"raw": "{{url}}/api/Rule/Reminder",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"Rule",
										"Reminder"
									]
								}
							},
							"response": []
						},
						{
							"name": "[Z104]Fetch Rule details by Rule Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b21dfda3-5d01-4762-bed6-681e39e637c4",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Your test name\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.rule.ruleLineItems[0].id).to.exist;",
											"    pm.environment.set(\"ruleLineItemId\",jsonData.rule.ruleLineItems[0].id);",
											"    var size = jsonData.rule.ruleLineItems.length;",
											"    pm.environment.set(\"totalrulelineitems\",size-1);",
											"",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/api/Rule?ruleId={{ruleId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"Rule"
									],
									"query": [
										{
											"key": "ruleId",
											"value": "{{ruleId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[Z105]Create Entity",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b45ca225-09f2-4fd4-a05e-4c3d13a6dbf0",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"   ",
											"    let EntityJSON = pm.response.json();",
											"    pm.expect(EntityJSON.entityId).to.exist;",
											"    pm.expect(EntityJSON.isSaved).to.equal(true);",
											"    pm.environment.set(\"entityId\", EntityJSON.entityId);",
											"    console.log(EntityJSON);",
											"});",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "0e9b9ca9-9c49-46e8-ac8c-768fb21ce4b8",
										"exec": [
											"var milliseconds = new Date().getTime();",
											"var codeSeed = \"Auto-\";",
											"pm.environment.set(\"entityCode\", codeSeed.concat(milliseconds));",
											"",
											"",
											"var codeSeed = \"Auto2nd-\";",
											"pm.environment.set(\"secondaryEntityCode\", codeSeed.concat(milliseconds));",
											"",
											"var moment = require('moment');",
											"pm.environment.set(\"timestamp\", moment().format(\"YYYY-MM-DDThh:mm:ss.SSS\"))   ;",
											"console.log(pm.variables.get(\"timestamp\"));",
											"",
											"",
											"var moment = require('moment');",
											"pm.environment.set(\"pickUpTime\", moment().format(\"YYYY-MM-DDThh:mm:ss.SSS\")) ;",
											"console.log(pm.variables.get(\"pickUpTime\"));",
											"",
											"// let ran =  _.random(1111111111, 9999999999);",
											"// pm.environment.set(\"mobileNumberNAT\",ran);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": 0,\r\n  \"entityCode\": \"{{entityCode}}\",\r\n  \"name\": \"{{name}}\",\r\n  \"mobileNumber\": {{mobileNumberNAT}},\r\n  \"entityCreationDate\": \"{{timestamp}}\",\r\n  \"entitySourceSystemId\": {{entitySourceSystemId}},\r\n  \"entityStateDate\": \"{{pickUpTime}}\",\r\n  \"entityStateType\": {{entityStateType}},\r\n  \"entitySubStateType\":{{entitySubStateType}},\r\n  \"entityStateValue\": \" {{entityStateValue}} \",\r\n  \"secondaryEntityCode\": \"{{secondaryEntityCode}}\",\r\n  \"secondaryName\": \"{{secondaryName}}\",\r\n  \"secondaryMobileNumber\": {{secondaryMobileNumber}},\r\n  \"customField1\":\"location-pune\",\r\n  \"customField2\":\"state-MH\",\r\n  \"customFieldUrl\":\"https://www.w3schools.com/xml/xpath_nodes.asp\",\r\n  \"entitySegmentTypeId\": {{entitySegmentTypeId}},\r\n  \"languageTypeId\": {{languageTypeId}}\r\n}\r\n"
								},
								"url": {
									"raw": "{{url}}/api/Entity",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"Entity"
									]
								}
							},
							"response": []
						},
						{
							"name": "[Z106]Fetch Entity details by EntityId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "24ac8dfd-18cf-476f-8c08-1bd93aad7e83",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"verify Entity Code\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.entityCode).to.eql(pm.variables.get(\"entityCode\"));",
											"});",
											"",
											"pm.test(\"verify Mobile Number\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.mobileNumber).to.eql(pm.variables.get(\"mobileNumberNAT\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/api/Entity?entityId={{entityId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"Entity"
									],
									"query": [
										{
											"key": "entityId",
											"value": "{{entityId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[Z107]Trigger RuleExecution for weekly",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "24ac8dfd-18cf-476f-8c08-1bd93aad7e83",
										"exec": [
											"pm.test(\"[Rule Execution] Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"[Rule Execution] checking isexecuted field\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.eql(true);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c946b38f-136e-4e65-b49e-4c71372452f4",
										"exec": [
											"pm.environment.set(\"JobId\", 6);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/api/RuleExecution?ruleId={{ruleId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"RuleExecution"
									],
									"query": [
										{
											"key": "ruleId",
											"value": "{{ruleId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[Z108]Trigger Job Execution for Notification Message",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "24ac8dfd-18cf-476f-8c08-1bd93aad7e83",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Your test name\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.isExecuted).to.eql(true);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/api/JobExecution?jobId=15",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"JobExecution"
									],
									"query": [
										{
											"key": "jobId",
											"value": "15"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[Z109]SearchMessageSentViaRule",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "24ac8dfd-18cf-476f-8c08-1bd93aad7e83",
										"exec": [
											"pm.test(\"[search msg sent via rule] Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"[search msg sent via rule] To check notifications exist\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.notifications).to.exist;",
											"    /*var size1 = jsonData.notifications.length;",
											"    console.log(\"Size: \",size1);*/",
											"    ",
											"    var array=JSON.parse(pm.environment.get(\"ruleLineItemId\"));",
											"    ",
											"     pm.expect((jsonData.notifications[0].ruleLineItemId)).to.eql(array);",
											"",
											"   // pm.environment.set(\"TotalNudgesenttoentity\",size1);",
											"  ",
											"   // console.log( \"[PRE-NAT]first nudge of entity is associated with  rulelineitemId : \"+pm.variables.get(\"ruleLineItemId\") );",
											"",
											"    ",
											"",
											"",
											"});",
											"pm.test(\"Nudge delivery Verification\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.notifications[0].messageContent).to.eql(\"\");",
											"    pm.expect(jsonData.notifications[0].mobileNumber).to.eql(\"\");",
											"    ",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/api/NotificationMessageProcessor/SearchMessageSentViaRule?entityId={{entityId}}&ruleId={{ruleId}}&ruleLineItemId={{ruleLineItemId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"NotificationMessageProcessor",
										"SearchMessageSentViaRule"
									],
									"query": [
										{
											"key": "entityId",
											"value": "{{entityId}}"
										},
										{
											"key": "ruleId",
											"value": "{{ruleId}}"
										},
										{
											"key": "ruleLineItemId",
											"value": "{{ruleLineItemId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[Z110]read template",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5f00d9c5-a80b-4f94-9b62-c4c9847be638",
										"exec": [
											"\r",
											"pm.test(\"Read Template\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"}); "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/api/NotificationMessageTemplate/Search?templateName={{TemplateName}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"NotificationMessageTemplate",
										"Search"
									],
									"query": [
										{
											"key": "templateName",
											"value": "{{TemplateName}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[Z111]notificationMessageProcessorHistory",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "24ac8dfd-18cf-476f-8c08-1bd93aad7e83",
										"exec": [
											"pm.test(\"status code 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// pm.test(\"extract bitly url\",function(){",
											"",
											"// var string = pm.variables.get(\"messageContent\");",
											"// var bitly = string.match(/\\bhttps?:\\/\\/\\S+/gi);",
											"// pm.environment.set(\"bitly\",bitly);",
											"// console.log(bitly);",
											" ",
											"",
											"// });",
											"",
											"",
											"",
											"/*pm.test(\"[After Nudge Sent] checking mobile number in message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.notificationMessageProcessorHistoryRecords[0].mobileNumber).to.eql(pm.environment.get(\"mobileNumberNAT\"));",
											"});",
											"",
											"    ",
											"pm.test(\"[After Nudge Sent] checking entity name in message content\", function () {",
											"    pm.expect(jsonData.).to.include(\"{{EntityName}}\");",
											"});",
											"",
											"pm.test(\"[After Nudge Sent] checking  customfield1 value in message content\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"{{CustomField1}}\");",
											"});",
											"",
											"pm.test(\"[After Nudge Sent] checking  customfield2 value in message content\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"{{CustomField2}}\");",
											"});",
											"",
											"pm.test(\"[After Nudge Sent] checking  entityStateValue value in message content\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"{{entityStateValue}}\");",
											"});*/"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/api/NotificationMessageProcessedHistory",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"NotificationMessageProcessedHistory"
									]
								}
							},
							"response": []
						},
						{
							"name": "[Z112]Deletes a rule from system",
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "text/plain, application/json, text/json"
									}
								],
								"url": {
									"raw": "{{url}}/api/Rule?ruleId={{ruleId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"Rule"
									],
									"query": [
										{
											"key": "ruleId",
											"value": "{{ruleId}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "9db10bd0-ef1a-483f-9309-1489afdab7bf",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "8ce8cc85-3792-4b33-89a9-662c1e6185f7",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "SNP_ARDM",
					"item": [
						{
							"name": "[A101]Creates Template(1)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4ce724b8-9589-4ba0-b1b3-935d6e6e46e0",
										"exec": [
											"",
											" var jsonData = pm.response.json();",
											" ",
											"pm.environment.set(\"notificationMessageTemplateId\", jsonData.notificationMessageTemplateId);",
											"  ",
											"",
											"pm.test(\"Successful POST request Test\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([201,202]);",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "9b8b754b-1026-4dd1-a35c-a14f2318cc64",
										"exec": [
											"var random = _.random(100, 1000);",
											"",
											"",
											"var codeSeed = \"ARDM-\";",
											"pm.environment.set(\"TemplateName\", codeSeed.concat(random));",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "text/plain, application/json, text/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"{{TemplateName}}\",\r\n  \"entitySourceSystemId\":{{entitySourceSystemId}},\r\n  \"notificationMessageTemplateLineItems\": [\r\n    {\r\n      \"elementName\": \"ARDM Template\",\r\n      \"templateContent\": \"Hi, {1}\\nPlease find select details regarding your recruitment funnel:Following prospects have submitted their ARFs, please ensure that they complete their DRF, if not yet completed, and their exam is scheduled\\n{2}\\nFollowing prospects are have completed NAT, but are yet to submit their ARF,\\n{3}\\nFollowing prospects are yet to complete their NAT or update their disposition in Super Express,\\n{4}\\nProspects displayed in italics have viewed multiple nudges sent to them; you may want to understand if they have any query regarding the information shared.\\nPlease reply Yes to acknowledge that you have spoken to your prospect advisors\",\r\n      \"languageTypeId\": 1,\r\n      \"entitySegmentTypeId\": 1,\r\n      \"isDefault\": true,\r\n      \"isApproved\": true,\r\n      \"notificationMessageTemplateConfigurationMappings\": [\r\n        {\r\n          \"placeholderKey\": 1,\r\n          \"notificationMessageTemplatePlaceHolderTypeId\": 1,\r\n          \"value\": \"string\"\r\n        },\r\n          {\r\n          \"placeholderKey\": 2,\r\n          \"notificationMessageTemplatePlaceHolderTypeId\": 9,\r\n          \"value\": \"string\"\r\n        },\r\n          {\r\n          \"placeholderKey\": 3,\r\n          \"notificationMessageTemplatePlaceHolderTypeId\": 10,\r\n          \"value\": \"string\"\r\n        },\r\n         {\r\n          \"placeholderKey\": 4,\r\n          \"notificationMessageTemplatePlaceHolderTypeId\": 3,\r\n          \"value\": \"string\"\r\n        }\r\n      ]\r\n    }\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{url}}/api/NotificationMessageTemplate",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"NotificationMessageTemplate"
									]
								}
							},
							"response": []
						},
						{
							"name": "[A102]create Rule",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9b7b9e2e-8674-4d11-b9c2-de3b5c25dc3f",
										"exec": [
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(201);",
											"     var jsonData = pm.response.json();",
											"     pm.environment.set(\"ruleId\", jsonData.ruleId);",
											"     ",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e9f50de3-c2ed-4ae5-88af-5fa1255fd65b",
										"exec": [
											"pm.environment.set(\"entityStateType\",2);",
											"pm.environment.set(\"entitySubStateType\",5);",
											"",
											"var random = _.random(100, 1000);",
											"",
											"",
											"var codeSeed = \"ARDM_Rule-\";",
											"pm.environment.set(\"RuleName\", codeSeed.concat(random));",
											"",
											"",
											"pm.environment.set(\"RuleType\", 1);",
											"pm.environment.set(\"FrequencyType\", 1);",
											"pm.environment.set(\"entityStateType\", 2);",
											"pm.environment.set(\"entitySubStateType\", 5);",
											"pm.environment.set(\"RuleLineItemType\", 1);",
											"pm.environment.set(\"RuleCategoryId\", 1);",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"rule\": {\r\n    \"name\": \"{{RuleName}}\",\r\n    \"description\": \"{{Description}}\",\r\n    \"ruleType\": {{RuleType}},\r\n    \"frequencyType\": {{FrequencyType}},\r\n    \"entitySourceSystemId\":{{entitySourceSystemId}},\r\n    \"entityStateType\":{{entityStateType}},\r\n    \"entitySubStateType\": {{entitySubStateType}},\r\n    \"ruleFrequencies\": [\r\n      {\r\n        \"id\": 0,\r\n        \"hour\": 11,\r\n        \"minute\": 30\r\n      }\r\n    ],\r\n    \"ruleLineItems\": [\r\n      {\r\n        \"id\": 0,\r\n        \"ruleLineItemType\":{{RuleLineItemType}} ,\r\n        \"name\": \"ARDM_Nudge_1\",\r\n        \"parentId\": \"string\",\r\n        \"sequence\": 1,\r\n        \"sendToPrimary\": true,\r\n        \"intendedPositiveOutput\": \"Nugde for ARDM\",\r\n        \"ruleLineItemConditions\": [],\r\n        \"ruleLineItemResults\": [\r\n          {\r\n            \"notificationChannelType\": 2,\r\n            \"notificationMessageTemplateId\":{{notificationMessageTemplateId}},\r\n            \"isSMSAsFallBack\": false,\r\n            \"notificationMessageTemplateName\": \"{{TemplateName}}\"\r\n          }\r\n        ]\r\n      }\r\n    ]\r\n  }\r\n}\r\n\r\n"
								},
								"url": {
									"raw": "{{url}}/api/Rule",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"Rule"
									]
								}
							},
							"response": []
						},
						{
							"name": "[A103]read Rule By Rule ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b21dfda3-5d01-4762-bed6-681e39e637c4",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Your test name\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.rule.ruleLineItems[0].id).to.exist;",
											"    pm.environment.set(\"ruleLineItemId\",jsonData.rule.ruleLineItems[0].id);",
											"    var size = jsonData.rule.ruleLineItems.length;",
											"    pm.environment.set(\"totalrulelineitems\",size-1);",
											"    ",
											"     pm.environment.set(\"TemplateName\",jsonData.rule.ruleLineItems[0].ruleLineItemResults[0].notificationMessageTemplateName);",
											"    ",
											"",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/api/Rule?ruleId={{ruleId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"Rule"
									],
									"query": [
										{
											"key": "ruleId",
											"value": "{{ruleId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[A104]create entity",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b45ca225-09f2-4fd4-a05e-4c3d13a6dbf0",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"   ",
											"    let EntityJSON = pm.response.json();",
											"    pm.expect(EntityJSON.entityId).to.exist;",
											"    pm.expect(EntityJSON.isSaved).to.equal(true);",
											"     pm.environment.set(\"entityId\", EntityJSON.entityId);",
											"    console.log(EntityJSON);",
											"});",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "0e9b9ca9-9c49-46e8-ac8c-768fb21ce4b8",
										"exec": [
											"var milliseconds = new Date().getTime();",
											"var codeSeed = \"ARDM-\";",
											"pm.environment.set(\"entityCode\", codeSeed.concat(milliseconds));",
											"",
											"",
											"var codeSeed = \"BM-\";",
											"pm.environment.set(\"secondaryEntityCode\", codeSeed.concat(milliseconds));",
											"",
											"var moment = require('moment');",
											"pm.environment.set(\"timestamp\", moment().format(\"YYYY-MM-DDThh:mm:ss.SSS\"))   ;",
											"console.log(pm.variables.get(\"timestamp\"));",
											"",
											"",
											"var moment = require('moment');",
											"pm.environment.set(\"pickUpTime\", moment().format(\"YYYY-MM-DDThh:mm:ss.SSS\")) ;",
											"console.log(pm.variables.get(\"pickUpTime\"));",
											"",
											"pm.environment.set(\"entitySegmentTypeId\", 1);",
											"pm.environment.set(\"secondaryName\", \"Brahmanand\");",
											"pm.environment.set(\"languageTypeId\", 1);",
											"pm.environment.set(\"mobileNumberNAT\", \"9817570376\");",
											"pm.environment.set(\"secondaryMobileNumber\", \"9592543456\");",
											"pm.environment.set(\"CustomField1\",\"Prospect-1 13412, Prospect-2 52355, Prospect-3 25236, Prospect-4 53456, Prospect-5 25534, Prospect-6 52395, Prospect-7 90539, Prospect-8 78923, Prospect-9 20239, Prospect-10 46299\");",
											"pm.environment.set(\"CustomField2\", \"Prospect-1 15812, Prospect-2 52235, Prospect-3 251236, Prospect-4 56656, Prospect-5 47534, Prospect-6 36334, Prospect-7 56474, Prospect-8 47784, Prospect-9 46346, Prospect-10 78678 \");",
											"pm.environment.set(\"entityStateValue\", \"Prospect-1 58568, Prospect-2 36375, Prospect-3 47484, Prospect-4 56848, Prospect-5 58574, Prospect-6 47474, Prospect-7 74548, Prospect-8 47454, Prospect-9 34636, Prospect-10 89077 \");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": 0,\r\n  \"entityCode\": \"{{entityCode}}\",\r\n  \"name\": \"ARDM-{{name}}\",\r\n  \"mobileNumber\": {{mobileNumberNAT}},\r\n  \"entityCreationDate\": \"{{timestamp}}\",\r\n  \"entitySourceSystemId\": {{entitySourceSystemId}},\r\n  \"entityStateDate\": \"{{pickUpTime}}\",\r\n  \"entityStateType\": {{entityStateType}},\r\n  \"entitySubStateType\":{{entitySubStateType}},\r\n  \"entityStateValue\": \" {{entityStateValue}} \",\r\n  \"secondaryEntityCode\": \"{{secondaryEntityCode}}\",\r\n  \"secondaryName\": \"{{secondaryName}}\",\r\n  \"secondaryMobileNumber\": {{secondaryMobileNumber}},\r\n  \"customField1\":\"{{CustomField1}}\",\r\n  \"customField2\":\"{{CustomField2}}\",\r\n  \"customFieldUrl\":\"https://www.w3schools.com/xml/xpath_nodes.asp\",\r\n  \"entitySegmentTypeId\": {{entitySegmentTypeId}},\r\n  \"languageTypeId\": {{languageTypeId}}\r\n}\r\n"
								},
								"url": {
									"raw": "{{url}}/api/Entity",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"Entity"
									]
								}
							},
							"response": []
						},
						{
							"name": "[A105]read entity by entityId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "24ac8dfd-18cf-476f-8c08-1bd93aad7e83",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"verify mobile number\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.mobileNumber).to.eql(pm.variables.get(\"mobileNumberNAT\"));",
											"    pm.environment.set(\"MobileNuber\",jsonData.mobileNumber);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/api/Entity?entityId={{entityId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"Entity"
									],
									"query": [
										{
											"key": "entityId",
											"value": "{{entityId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[A106]Trigger RuleExecuteEvent",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "24ac8dfd-18cf-476f-8c08-1bd93aad7e83",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Your test name\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.eql(true);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/api/RuleExecution?ruleId={{ruleId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"RuleExecution"
									],
									"query": [
										{
											"key": "ruleId",
											"value": "{{ruleId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[A107]Trigger Message Execution Job",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "24ac8dfd-18cf-476f-8c08-1bd93aad7e83",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Your test name\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.isExecuted).to.eql(true);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/api/JobExecution?jobId=15",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"JobExecution"
									],
									"query": [
										{
											"key": "jobId",
											"value": "15"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[A108]SearchMessageSentViaRule",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "24ac8dfd-18cf-476f-8c08-1bd93aad7e83",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"to check notifications exist\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.notifications).to.exist;",
											"    var size1 = jsonData.notifications.length;",
											"    console.log(\"Size: \",size1);",
											"    ",
											"    var array=JSON.parse(pm.environment.get(\"ruleLineItemId\"));",
											"    ",
											"     pm.expect((jsonData.notifications[0].ruleLineItemId)).to.eql(array);",
											"",
											"    pm.environment.set(\"TotalNudgesenttoentity\",size1);",
											"  ",
											"    console.log( \"[PRE-NAT]first nudge of entity is associated with  rulelineitemId : \"+pm.variables.get(\"ruleLineItemId\") );",
											"",
											"    ",
											"",
											"",
											"});",
											"pm.test(\"Nudge delivery Verification\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.notifications[0].messageContent).to.eql(\"\");",
											"    pm.expect(jsonData.notifications[0].mobileNumber).to.eql(\"\");",
											"    ",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/api/NotificationMessageProcessor/SearchMessageSentViaRule?entityId={{entityId}}&ruleId={{ruleId}}&ruleLineItemId={{ruleLineItemId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"NotificationMessageProcessor",
										"SearchMessageSentViaRule"
									],
									"query": [
										{
											"key": "entityId",
											"value": "{{entityId}}"
										},
										{
											"key": "ruleId",
											"value": "{{ruleId}}"
										},
										{
											"key": "ruleLineItemId",
											"value": "{{ruleLineItemId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[A109]read template",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5f00d9c5-a80b-4f94-9b62-c4c9847be638",
										"exec": [
											"pm.test(\"Your test name\", function () {\r",
											"\r",
											"  var jsonData = pm.response.json();\r",
											"\r",
											"  \r",
											"\r",
											"    var size = jsonData.notificationMessageTemplates[0].notificationMessageTemplateLineItems.length;\r",
											"\r",
											"   \r",
											"\r",
											"    console.log(size);\r",
											"\r",
											"    for (let i=0; i<size; i++)\r",
											"\r",
											"    {\r",
											"\r",
											"        let X =JSON.parse(jsonData.notificationMessageTemplates[0].notificationMessageTemplateLineItems[i].languageTypeId);\r",
											"\r",
											"        \r",
											"\r",
											"        let Y =jsonData.notificationMessageTemplates[0].notificationMessageTemplateLineItems[i].entitySegmentTypeId;\r",
											"\r",
											"     \r",
											"\r",
											"       if( X==pm.environment.get(\"languageTypeId\") & Y==pm.environment.get(\"entitySegmentTypeId\"))\r",
											"\r",
											"        {\r",
											"\r",
											"            console.log(\"TemplateContent retrived for: \");\r",
											"\r",
											"            console.log(\"Segmet:\"       +Y);\r",
											"\r",
											"            console.log(\"lanaguage:\"    +X);\r",
											"\r",
											"\r",
											" \r",
											"\r",
											"\r",
											"        pm.environment.set(\"TemplateContent\",jsonData.notificationMessageTemplates[0].notificationMessageTemplateLineItems[i].templateContent);\r",
											"\r",
											"        }\r",
											"\r",
											"    \r",
											"\r",
											"    }\r",
											"});\r",
											"\r",
											" "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/api/NotificationMessageTemplate/Search?templateName={{TemplateName}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"NotificationMessageTemplate",
										"Search"
									],
									"query": [
										{
											"key": "templateName",
											"value": "{{TemplateName}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[A110]notificationMessageProcessorHistory",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "24ac8dfd-18cf-476f-8c08-1bd93aad7e83",
										"exec": [
											"pm.test(\"status code 200\", function () {",
											"    pm.response.to.have.status(200);",
											"    ",
											"",
											"    ",
											"});",
											"",
											"pm.test(\"extract message\", function () {",
											"    ",
											"    console.log(\"Nudge Details:\");",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.notificationMessageProcessorHistoryRecords).to.exist;",
											"    var size = jsonData.notificationMessageProcessorHistoryRecords.length;",
											"    ",
											"    var count=0;",
											"     for ( var i=0;i<size;i++){",
											"   if((jsonData.notificationMessageProcessorHistoryRecords[i].mobileNumber)==(pm.environment.get(\"mobileNumberNAT\"))){",
											"  ",
											"   count++;",
											"   ",
											"pm.environment.set(\"TotalNudgesenttoMobilenum\",count );",
											"   ",
											"pm.environment.set(\"messageContent\",jsonData.notificationMessageProcessorHistoryRecords[0].messageContent);",
											"",
											"pm.environment.set(\"NudgeReceivedVia_NotificationChannelType\",jsonData.notificationMessageProcessorHistoryRecords[i].notificationChannelTypeId);",
											"console.log(\"nudgeNudgeReceivedVia_NotificationChannelType :\" +pm.variables.get(\"NudgeReceivedVia_NotificationChannelType\"));",
											"",
											"}",
											"   ",
											"    }",
											"    console.log(\"Number of nudges sent to mobile num  : \"+pm.variables.get(\"TotalNudgesenttoMobilenum\"));",
											"",
											"});",
											"",
											"",
											"",
											"",
											"",
											"",
											"    ",
											"    ",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/api/NotificationMessageProcessedHistory",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"NotificationMessageProcessedHistory"
									]
								}
							},
							"response": []
						},
						{
							"name": "[A111]Delete Rule",
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/api/Rule?ruleId={{ruleId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"Rule"
									],
									"query": [
										{
											"key": "ruleId",
											"value": "{{ruleId}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "03821bd9-fcd6-46cc-9eaa-567fa5246d3c",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "9f311d63-a0b8-452d-a9e3-2a8fc290d876",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "8b1a9413-0e17-4543-8352-cc5fcaa5c88d",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "2d99b34c-5703-4a36-938a-76b1d64a7cee",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}